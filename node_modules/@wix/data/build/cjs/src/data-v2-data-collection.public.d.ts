import { HttpClient } from '@wix/sdk-types';
import { DataCollection, ListDataCollectionsOptions } from './data-v2-data-collection.universal';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createDataCollection(httpClient: HttpClient): (collection: DataCollection) => Promise<DataCollection & {
    _id: string;
    collectionType: import("./data-v2-data-collection.universal").CollectionType;
    defaultDisplayOrder?: {
        fieldKey: string;
        direction: import("./data-v2-data-collection.universal").Direction;
    } | undefined;
    capabilities?: {
        dataOperations: import("./data-v2-data-collection.universal").DataOperation[];
        collectionOperations: import("./data-v2-data-collection.universal").CollectionOperation[];
        indexLimits?: {
            regular: number;
            unique: number;
            total: number;
        } | undefined;
    } | undefined;
    fields: {
        key: string;
        type: import("./data-v2-data-collection.universal").FieldType;
        typeMetadata?: {
            reference?: {
                referencedCollectionId: string;
            } | undefined;
            multiReference?: {
                referencedCollectionId: string;
                referencingFieldKey: string;
                referencingDisplayName: string;
            } | undefined;
            object?: {
                fields: {
                    key: string;
                    type: import("./data-v2-data-collection.universal").FieldType;
                    capabilities?: {
                        sortable: boolean;
                        queryOperators: import("./data-v2-data-collection.universal").QueryOperator[];
                    } | undefined;
                }[];
            } | undefined;
            array?: {
                elementType: import("./data-v2-data-collection.universal").FieldType;
            } | undefined;
            pageLink?: {
                calculator?: {
                    fieldsPattern?: {
                        pattern: string;
                        lowercase: boolean;
                    } | undefined;
                    urlizedOnlyPattern?: {
                        pattern: string;
                    } | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        systemField: boolean;
        capabilities?: {
            sortable: boolean;
            queryOperators: import("./data-v2-data-collection.universal").QueryOperator[];
        } | undefined;
        encrypted: boolean;
    }[];
    permissions?: {
        insert: import("./data-v2-data-collection.universal").Role;
        update: import("./data-v2-data-collection.universal").Role;
        remove: import("./data-v2-data-collection.universal").Role;
        read: import("./data-v2-data-collection.universal").Role;
    } | undefined;
    plugins: {
        publishOptions?: {
            defaultStatus: import("./data-v2-data-collection.universal").Status;
        } | undefined;
        singleItemOptions?: {
            singleItemId: string;
        } | undefined;
        urlizedOptions?: {
            format: import("./data-v2-data-collection.universal").Format;
        } | undefined;
        gridapplessOptions?: {
            migrated: boolean;
        } | undefined;
        multilingualOptions?: {
            translatableFieldKeys: string[];
        } | undefined;
        type: import("./data-v2-data-collection.universal").Type;
    }[];
    pagingModes: import("./data-v2-data-collection.universal").PagingMode[];
}>;
export declare function getDataCollection(httpClient: HttpClient): (dataCollectionId: string) => Promise<DataCollection & {
    _id: string;
    collectionType: import("./data-v2-data-collection.universal").CollectionType;
    defaultDisplayOrder?: {
        fieldKey: string;
        direction: import("./data-v2-data-collection.universal").Direction;
    } | undefined;
    capabilities?: {
        dataOperations: import("./data-v2-data-collection.universal").DataOperation[];
        collectionOperations: import("./data-v2-data-collection.universal").CollectionOperation[];
        indexLimits?: {
            regular: number;
            unique: number;
            total: number;
        } | undefined;
    } | undefined;
    fields: {
        key: string;
        type: import("./data-v2-data-collection.universal").FieldType;
        typeMetadata?: {
            reference?: {
                referencedCollectionId: string;
            } | undefined;
            multiReference?: {
                referencedCollectionId: string;
                referencingFieldKey: string;
                referencingDisplayName: string;
            } | undefined;
            object?: {
                fields: {
                    key: string;
                    type: import("./data-v2-data-collection.universal").FieldType;
                    capabilities?: {
                        sortable: boolean;
                        queryOperators: import("./data-v2-data-collection.universal").QueryOperator[];
                    } | undefined;
                }[];
            } | undefined;
            array?: {
                elementType: import("./data-v2-data-collection.universal").FieldType;
            } | undefined;
            pageLink?: {
                calculator?: {
                    fieldsPattern?: {
                        pattern: string;
                        lowercase: boolean;
                    } | undefined;
                    urlizedOnlyPattern?: {
                        pattern: string;
                    } | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        systemField: boolean;
        capabilities?: {
            sortable: boolean;
            queryOperators: import("./data-v2-data-collection.universal").QueryOperator[];
        } | undefined;
        encrypted: boolean;
    }[];
    permissions?: {
        insert: import("./data-v2-data-collection.universal").Role;
        update: import("./data-v2-data-collection.universal").Role;
        remove: import("./data-v2-data-collection.universal").Role;
        read: import("./data-v2-data-collection.universal").Role;
    } | undefined;
    plugins: {
        publishOptions?: {
            defaultStatus: import("./data-v2-data-collection.universal").Status;
        } | undefined;
        singleItemOptions?: {
            singleItemId: string;
        } | undefined;
        urlizedOptions?: {
            format: import("./data-v2-data-collection.universal").Format;
        } | undefined;
        gridapplessOptions?: {
            migrated: boolean;
        } | undefined;
        multilingualOptions?: {
            translatableFieldKeys: string[];
        } | undefined;
        type: import("./data-v2-data-collection.universal").Type;
    }[];
    pagingModes: import("./data-v2-data-collection.universal").PagingMode[];
}>;
export declare function listDataCollections(httpClient: HttpClient): (options?: ListDataCollectionsOptions | undefined) => Promise<import("./data-v2-data-collection.universal").ListDataCollectionsResponse & import("./data-v2-data-collection.universal").ListDataCollectionsResponseNonNullableFields>;
export declare function updateDataCollection(httpClient: HttpClient): (collection: DataCollection) => Promise<DataCollection & {
    _id: string;
    collectionType: import("./data-v2-data-collection.universal").CollectionType;
    defaultDisplayOrder?: {
        fieldKey: string;
        direction: import("./data-v2-data-collection.universal").Direction;
    } | undefined;
    capabilities?: {
        dataOperations: import("./data-v2-data-collection.universal").DataOperation[];
        collectionOperations: import("./data-v2-data-collection.universal").CollectionOperation[];
        indexLimits?: {
            regular: number;
            unique: number;
            total: number;
        } | undefined;
    } | undefined;
    fields: {
        key: string;
        type: import("./data-v2-data-collection.universal").FieldType;
        typeMetadata?: {
            reference?: {
                referencedCollectionId: string;
            } | undefined;
            multiReference?: {
                referencedCollectionId: string;
                referencingFieldKey: string;
                referencingDisplayName: string;
            } | undefined;
            object?: {
                fields: {
                    key: string;
                    type: import("./data-v2-data-collection.universal").FieldType;
                    capabilities?: {
                        sortable: boolean;
                        queryOperators: import("./data-v2-data-collection.universal").QueryOperator[];
                    } | undefined;
                }[];
            } | undefined;
            array?: {
                elementType: import("./data-v2-data-collection.universal").FieldType;
            } | undefined;
            pageLink?: {
                calculator?: {
                    fieldsPattern?: {
                        pattern: string;
                        lowercase: boolean;
                    } | undefined;
                    urlizedOnlyPattern?: {
                        pattern: string;
                    } | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        systemField: boolean;
        capabilities?: {
            sortable: boolean;
            queryOperators: import("./data-v2-data-collection.universal").QueryOperator[];
        } | undefined;
        encrypted: boolean;
    }[];
    permissions?: {
        insert: import("./data-v2-data-collection.universal").Role;
        update: import("./data-v2-data-collection.universal").Role;
        remove: import("./data-v2-data-collection.universal").Role;
        read: import("./data-v2-data-collection.universal").Role;
    } | undefined;
    plugins: {
        publishOptions?: {
            defaultStatus: import("./data-v2-data-collection.universal").Status;
        } | undefined;
        singleItemOptions?: {
            singleItemId: string;
        } | undefined;
        urlizedOptions?: {
            format: import("./data-v2-data-collection.universal").Format;
        } | undefined;
        gridapplessOptions?: {
            migrated: boolean;
        } | undefined;
        multilingualOptions?: {
            translatableFieldKeys: string[];
        } | undefined;
        type: import("./data-v2-data-collection.universal").Type;
    }[];
    pagingModes: import("./data-v2-data-collection.universal").PagingMode[];
}>;
export declare function deleteDataCollection(httpClient: HttpClient): (dataCollectionId: string) => Promise<void>;
export { CollectionType, Direction, DataOperation, CollectionOperation, FieldType, QueryOperator, Role, Status, Format, Type, PagingMode, SortOrder, } from './data-v2-data-collection.universal';
export { DataCollection, Sort, CollectionCapabilities, IndexLimits, Field, FieldRangeValidationsOneOf, TypeMetadata, TypeMetadataMetadataOneOf, FieldCapabilities, ObjectField, FieldsPattern, UrlizedOnlyPattern, Calculator, CalculatorPatternOneOf, Reference, MultiReference, Object, Array, PageLink, NumberRange, StringLengthRange, ArraySizeRange, Permissions, Plugin, PluginOptionsOneOf, PublishPluginOptions, SingleItemPluginOptions, UrlizedPluginOptions, GridapplessPluginOptions, MultilingualOptions, DataCollectionClonedEvent, DataCollectionChangedEvent, FieldUpdate, PluginUpdate, CreateDataCollectionRequest, CreateDataCollectionResponse, GetDataCollectionRequest, GetDataCollectionResponse, ListDataCollectionsRequest, Sorting, Paging, ListDataCollectionsResponse, PagingMetadataV2, BulkGetDataCollectionsRequest, BulkGetDataCollectionsResponse, UpdateDataCollectionRequest, UpdateDataCollectionResponse, DeleteDataCollectionRequest, DeleteDataCollectionResponse, CreateDataCollectionFieldRequest, CreateDataCollectionFieldResponse, UpdateDataCollectionFieldRequest, UpdateDataCollectionFieldResponse, DeleteDataCollectionFieldRequest, DeleteDataCollectionFieldResponse, BulkGetDataCollectionsBySnapshotsRequest, BulkGetDataCollectionsBySnapshotsResponse, SnapshotDataCollections, CreateDataCollectionsSnapshotRequest, CreateDataCollectionsSnapshotResponse, RestoreDataCollectionsFromSnapshotRequest, RestoreDataCollectionsFromSnapshotResponse, DeleteDataCollectionsSnapshotRequest, DeleteDataCollectionsSnapshotResponse, CreateDataCollectionResponseNonNullableFields, GetDataCollectionResponseNonNullableFields, ListDataCollectionsResponseNonNullableFields, UpdateDataCollectionResponseNonNullableFields, ListDataCollectionsOptions, } from './data-v2-data-collection.universal';
