"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteDataCollection = exports.updateDataCollection = exports.listDataCollections = exports.getDataCollection = exports.createDataCollection = exports.SortOrder = exports.PagingMode = exports.Type = exports.Format = exports.Status = exports.Role = exports.QueryOperator = exports.FieldType = exports.CollectionOperation = exports.DataOperation = exports.Direction = exports.CollectionType = exports.__debug = void 0;
const velo_1 = require("@wix/metro-runtime/velo");
const ambassadorWixDataV2DataCollection = __importStar(require("./data-v2-data-collection.http"));
let __verbose = false;
function __log(...args) {
    __verbose && console.log(...args);
}
function __inspect(obj) {
    return obj;
}
exports.__debug = {
    verboseLogging: {
        on: () => (__verbose = true),
        off: () => (__verbose = false),
    },
};
const _toVeloEntity = '$';
const _fromVeloEntity = '$';
var CollectionType;
(function (CollectionType) {
    /** User-created collection. */
    CollectionType["NATIVE"] = "NATIVE";
    /** [Collection](https://support.wix.com/en/article/velo-working-with-wix-app-collections-and-code#what-are-wix-app-collections) created by a Wix app when it is installed. This type of collection can be modified dynamically by that app (for example, Wix Forms). */
    CollectionType["WIX_APP"] = "WIX_APP";
    /** Collection created by a Wix Blocks app. */
    CollectionType["BLOCKS_APP"] = "BLOCKS_APP";
    /** Collection located in externally connected storage. */
    CollectionType["EXTERNAL"] = "EXTERNAL";
})(CollectionType = exports.CollectionType || (exports.CollectionType = {}));
var Direction;
(function (Direction) {
    Direction["ASC"] = "ASC";
    Direction["DESC"] = "DESC";
})(Direction = exports.Direction || (exports.Direction = {}));
var DataOperation;
(function (DataOperation) {
    DataOperation["AGGREGATE"] = "AGGREGATE";
    DataOperation["BULK_INSERT"] = "BULK_INSERT";
    DataOperation["BULK_REMOVE"] = "BULK_REMOVE";
    DataOperation["BULK_SAVE"] = "BULK_SAVE";
    DataOperation["BULK_UPDATE"] = "BULK_UPDATE";
    DataOperation["COUNT"] = "COUNT";
    DataOperation["DISTINCT"] = "DISTINCT";
    DataOperation["FIND"] = "FIND";
    DataOperation["GET"] = "GET";
    DataOperation["INSERT"] = "INSERT";
    DataOperation["INSERT_REFERENCE"] = "INSERT_REFERENCE";
    DataOperation["IS_REFERENCED"] = "IS_REFERENCED";
    DataOperation["QUERY_REFERENCED"] = "QUERY_REFERENCED";
    DataOperation["REMOVE"] = "REMOVE";
    DataOperation["REMOVE_REFERENCE"] = "REMOVE_REFERENCE";
    DataOperation["REPLACE_REFERENCES"] = "REPLACE_REFERENCES";
    DataOperation["SAVE"] = "SAVE";
    DataOperation["TRUNCATE"] = "TRUNCATE";
    DataOperation["UPDATE"] = "UPDATE";
})(DataOperation = exports.DataOperation || (exports.DataOperation = {}));
var CollectionOperation;
(function (CollectionOperation) {
    /** Supports updating this collection. */
    CollectionOperation["UPDATE"] = "UPDATE";
    /** Supports removing this collections. */
    CollectionOperation["REMOVE"] = "REMOVE";
})(CollectionOperation = exports.CollectionOperation || (exports.CollectionOperation = {}));
var FieldType;
(function (FieldType) {
    FieldType["UNKNOWN_FIELD_TYPE"] = "UNKNOWN_FIELD_TYPE";
    FieldType["TEXT"] = "TEXT";
    FieldType["NUMBER"] = "NUMBER";
    FieldType["DATE"] = "DATE";
    FieldType["DATETIME"] = "DATETIME";
    FieldType["IMAGE"] = "IMAGE";
    FieldType["BOOLEAN"] = "BOOLEAN";
    FieldType["DOCUMENT"] = "DOCUMENT";
    FieldType["URL"] = "URL";
    FieldType["RICH_TEXT"] = "RICH_TEXT";
    FieldType["VIDEO"] = "VIDEO";
    FieldType["ANY"] = "ANY";
    FieldType["ARRAY_STRING"] = "ARRAY_STRING";
    FieldType["ARRAY_DOCUMENT"] = "ARRAY_DOCUMENT";
    FieldType["AUDIO"] = "AUDIO";
    FieldType["TIME"] = "TIME";
    FieldType["LANGUAGE"] = "LANGUAGE";
    FieldType["RICH_CONTENT"] = "RICH_CONTENT";
    FieldType["MEDIA_GALLERY"] = "MEDIA_GALLERY";
    FieldType["ADDRESS"] = "ADDRESS";
    FieldType["PAGE_LINK"] = "PAGE_LINK";
    FieldType["REFERENCE"] = "REFERENCE";
    FieldType["MULTI_REFERENCE"] = "MULTI_REFERENCE";
    FieldType["OBJECT"] = "OBJECT";
    FieldType["ARRAY"] = "ARRAY";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_TIME"] = "LEGACY_TIME";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_BOOK"] = "LEGACY_BOOK";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_EXTERNAL_URL"] = "LEGACY_EXTERNAL_URL";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_BROKEN_REFERENCE"] = "LEGACY_BROKEN_REFERENCE";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_IMAGE"] = "LEGACY_IMAGE";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_COLOR"] = "LEGACY_COLOR";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_EXTERNAL_VIDEO"] = "LEGACY_EXTERNAL_VIDEO";
})(FieldType = exports.FieldType || (exports.FieldType = {}));
var QueryOperator;
(function (QueryOperator) {
    QueryOperator["EQ"] = "EQ";
    QueryOperator["LT"] = "LT";
    QueryOperator["GT"] = "GT";
    QueryOperator["NE"] = "NE";
    QueryOperator["LTE"] = "LTE";
    QueryOperator["GTE"] = "GTE";
    QueryOperator["STARTS_WITH"] = "STARTS_WITH";
    QueryOperator["ENDS_WITH"] = "ENDS_WITH";
    QueryOperator["CONTAINS"] = "CONTAINS";
    QueryOperator["HAS_SOME"] = "HAS_SOME";
    QueryOperator["HAS_ALL"] = "HAS_ALL";
    QueryOperator["EXISTS"] = "EXISTS";
    QueryOperator["URLIZED"] = "URLIZED";
})(QueryOperator = exports.QueryOperator || (exports.QueryOperator = {}));
var Role;
(function (Role) {
    /** Unknown. */
    Role["UNKNOWN_ROLE"] = "UNKNOWN_ROLE";
    /** Site administrator. */
    Role["ADMIN"] = "ADMIN";
    /** Signed-in user who added content to this collection. */
    Role["SITE_MEMBER_AUTHOR"] = "SITE_MEMBER_AUTHOR";
    /** Any signed-in user. */
    Role["SITE_MEMBER"] = "SITE_MEMBER";
    /** Any site visitor. */
    Role["ANYONE"] = "ANYONE";
})(Role = exports.Role || (exports.Role = {}));
var Status;
(function (Status) {
    Status["UNKNOWN_PUBLISH_PLUGIN_STATUS"] = "UNKNOWN_PUBLISH_PLUGIN_STATUS";
    Status["PUBLISHED"] = "PUBLISHED";
    Status["DRAFT"] = "DRAFT";
})(Status = exports.Status || (exports.Status = {}));
var Format;
(function (Format) {
    Format["UNKNOWN_URLIZED_PLUGIN_FORMAT"] = "UNKNOWN_URLIZED_PLUGIN_FORMAT";
    Format["ORIGINAL"] = "ORIGINAL";
    Format["PLAIN"] = "PLAIN";
})(Format = exports.Format || (exports.Format = {}));
var Type;
(function (Type) {
    /** Unknown plugin type. */
    Type["UNKNOWN_PLUGIN_TYPE"] = "UNKNOWN_PLUGIN_TYPE";
    /** Allows items to be marked as either draft or published. For each item you can set a publishing time when the item will become visible to site visitors. */
    Type["PUBLISH"] = "PUBLISH";
    /** Ensures the collection can have one item at most. Can only be applied to a new collection. */
    Type["SINGLE_ITEM"] = "SINGLE_ITEM";
    /** Generates item URLs for collections used by dynamic pages. */
    Type["URLIZED"] = "URLIZED";
    /** This plugin is read-only and can't be manually added. Indicates collection structure is shared between sandbox and live environments. */
    Type["GRIDAPPLESS"] = "GRIDAPPLESS";
    /** Indicates that the collection is translatable. This allows you to manage translation for selected fields using [Wix Multilingual](https://www.wix.com/app-market/wix-multilingual). */
    Type["MULTILINGUAL"] = "MULTILINGUAL";
    /** Indicates that collection is shared with current site */
    Type["SHARED"] = "SHARED";
    /** Indicates that page link fields are persisted and can be updated */
    Type["EDITABLE_PAGE_LINK"] = "EDITABLE_PAGE_LINK";
})(Type = exports.Type || (exports.Type = {}));
var PagingMode;
(function (PagingMode) {
    /** Offset-based paging. */
    PagingMode["OFFSET"] = "OFFSET";
    /** Cursor-based paging. */
    PagingMode["CURSOR"] = "CURSOR";
})(PagingMode = exports.PagingMode || (exports.PagingMode = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder = exports.SortOrder || (exports.SortOrder = {}));
const _array = { typeMetadata: '_typeMetadata' };
const _createDataCollectionRequest = { collection: '_dataCollection' };
const _createDataCollectionResponse = { collection: '_dataCollection' };
const _dataCollection = { fields: '_field' };
const _deleteDataCollectionRequest = {};
const _deleteDataCollectionResponse = {};
const _field = { typeMetadata: '_typeMetadata' };
const _getDataCollectionRequest = {};
const _getDataCollectionResponse = {
    collection: '_dataCollection',
    referencedCollections: '_dataCollection',
};
const _listDataCollectionsRequest = {};
const _listDataCollectionsResponse = { collections: '_dataCollection' };
const _object = { fields: '_objectField' };
const _objectField = { typeMetadata: '_typeMetadata' };
const _typeMetadata = { object: '_object', array: '_array' };
const _updateDataCollectionRequest = { collection: '_dataCollection' };
const _updateDataCollectionResponse = { collection: '_dataCollection' };
/**
 * Creates a new data collection.
 *
 * The request body must include an ID, details for at least 1 field, and a permissions object. If any of these are missing, the collection isn't created.
 * @param collection - Collection details.
 * @public
 * @documentationMaturity preview
 * @requiredField collection
 * @requiredField collection._id
 * @requiredField collection.fields.key
 * @requiredField collection.fields.type
 * @requiredField collection.permissions
 * @requiredField collection.permissions.insert
 * @requiredField collection.permissions.read
 * @requiredField collection.permissions.remove
 * @requiredField collection.permissions.update
 * @param options - Options for creating a data collection.
 * @permissionScope Write Data Collections
 * @applicableIdentity APP
 * @returns Details of collection created.
 */
function createDataCollection(collection) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { collection: '$[0]' };
        const responseTransformation = '$.collection';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _createDataCollectionRequest,
            depSchemas: {
                _array,
                _dataCollection,
                _field,
                _object,
                _objectField,
                _typeMetadata,
            },
            fqdnTransformation: {
                paths: [...['collection']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _createDataCollectionResponse,
            depSchemas: {
                _array,
                _dataCollection,
                _field,
                _object,
                _objectField,
                _typeMetadata,
            },
            fqdnTransformation: {
                paths: [...['collection']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([collection]);
        const reqOpts = ambassadorWixDataV2DataCollection.createDataCollection(payload);
        __log(`"CreateDataCollection" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'collection',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.createDataCollection = createDataCollection;
/**
 * Retrieves a data collection by ID.
 * @param dataCollectionId - ID of the collection to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField dataCollectionId
 * @param options - Options for retrieving a data collection.
 * @permissionScope Read Data Collections
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Details of the collection requested.
 */
function getDataCollection(dataCollectionId) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { dataCollectionId: '$[0]' };
        const responseTransformation = '$.collection';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _getDataCollectionRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _getDataCollectionResponse,
            depSchemas: {
                _array,
                _dataCollection,
                _field,
                _object,
                _objectField,
                _typeMetadata,
            },
            fqdnTransformation: {
                paths: [...['collection', 'Array#referencedCollections']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([dataCollectionId]);
        const reqOpts = ambassadorWixDataV2DataCollection.getDataCollection(payload);
        __log(`"GetDataCollection" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'dataCollectionId',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.getDataCollection = getDataCollection;
/**
 * Retrieves a list of all data collections associated with the site or project.
 *
 * By default, the list is ordered by ID in ascending order.
 * @public
 * @documentationMaturity preview
 * @param options - Options for retrieving a list of data collections.
 * @permissionScope Read Data Collections
 * @applicableIdentity APP
 */
function listDataCollections(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { sort: '$[0].sort', paging: '$[0].paging' };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _listDataCollectionsRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _listDataCollectionsResponse,
            depSchemas: {
                _array,
                _dataCollection,
                _field,
                _object,
                _objectField,
                _typeMetadata,
            },
            fqdnTransformation: {
                paths: [...['Array#collections']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataCollection.listDataCollections(payload);
        __log(`"ListDataCollections" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.listDataCollections = listDataCollections;
/**
 * Updates a data collection.
 *
 * A collection ID, revision number, permissions, and at least 1 field must be provided within `options.collection`.
 * If a collection with that ID exists, and if its current `revision` number matches the one provided, it is updated.
 * Otherwise, the request fails.
 *
 * When a collection is updated, its `_updatedDate` property is changed to the current date and its `revision` property is incremented.
 *
 * > **Note:**
 * > After a collection is updated, it only contains the properties included in the `updateDataCollection()` call. If the existing collection has properties with values and those properties
 * > aren't included in the updated collection details, their values are lost.
 * @param collection - Updated collection details. The existing collection is replaced with this version.
 * @public
 * @documentationMaturity preview
 * @requiredField collection
 * @requiredField collection._id
 * @requiredField collection.fields.key
 * @requiredField collection.fields.type
 * @requiredField collection.permissions
 * @requiredField collection.permissions.insert
 * @requiredField collection.permissions.read
 * @requiredField collection.permissions.remove
 * @requiredField collection.permissions.update
 * @requiredField collection.revision
 * @param options - Options for updating a data collection.
 * @permissionScope Write Data Collections
 * @applicableIdentity APP
 * @returns Updated collection details.
 */
function updateDataCollection(collection) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { collection: '$[0]' };
        const responseTransformation = '$.collection';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _updateDataCollectionRequest,
            depSchemas: {
                _array,
                _dataCollection,
                _field,
                _object,
                _objectField,
                _typeMetadata,
            },
            fqdnTransformation: {
                paths: [...['collection']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _updateDataCollectionResponse,
            depSchemas: {
                _array,
                _dataCollection,
                _field,
                _object,
                _objectField,
                _typeMetadata,
            },
            fqdnTransformation: {
                paths: [...['collection']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([collection]);
        const reqOpts = ambassadorWixDataV2DataCollection.updateDataCollection(payload);
        __log(`"UpdateDataCollection" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'collection',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.updateDataCollection = updateDataCollection;
/**
 * Deletes a data collection.
 *
 * > **Note:**
 * > Once a collection is deleted, it can't be restored.
 * @param dataCollectionId - ID of the collection to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField dataCollectionId
 * @permissionScope Write Data Collections
 * @applicableIdentity APP
 */
function deleteDataCollection(dataCollectionId) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { dataCollectionId: '$[0]' };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _deleteDataCollectionRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _deleteDataCollectionResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([dataCollectionId]);
        const reqOpts = ambassadorWixDataV2DataCollection.deleteDataCollection(payload);
        __log(`"DeleteDataCollection" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'dataCollectionId',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.deleteDataCollection = deleteDataCollection;
//# sourceMappingURL=data-v2-data-collection.universal.js.map