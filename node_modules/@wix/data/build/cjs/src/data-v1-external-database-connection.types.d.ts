/** An external database connection defines a connection between an external database and a Wix site or project. */
export interface ExternalDatabaseConnection {
    /**
     * Name of the external database connection.
     * An external database connection may connect to one or more external data collections or tables.
     * These are represented as `connectionName/dataCollectionId`.
     */
    name?: string;
    /** Base URL for provisioning and managing data in the external database. For example: `https://example.com/my-external-database`. */
    endpoint?: string | null;
    /**
     * Settings passed to the external database connection as part of each request.
     * These settings can relate to authentication, tenancy, or provide any other information needed for processing a request.
     * Their content and structure depend on the specific requirements of the external database's API.
     */
    configuration?: Record<string, any> | null;
    /**
     * Status of the external database connection. Includes whether the connection was established successfully, and if not, the reason for the failure.
     * @readonly
     */
    connectionStatus?: ConnectionStatus;
}
export declare enum CauseOfFailure {
    /** No connection failure. */
    NONE = "NONE",
    /** General communication failure. */
    COMMUNICATION_FAILURE = "COMMUNICATION_FAILURE",
    /** External database host is unreachable. */
    DESTINATION_HOST_UNREACHABLE = "DESTINATION_HOST_UNREACHABLE",
    /** Unauthorized to access external database. */
    UNAUTHORIZED = "UNAUTHORIZED"
}
export declare enum CollectionsFound {
    UNKNOWN = "UNKNOWN",
    YES = "YES",
    NO = "NO"
}
export declare enum FieldType {
    UNKNOWN_FIELD_TYPE = "UNKNOWN_FIELD_TYPE",
    TEXT = "TEXT",
    NUMBER = "NUMBER",
    DATE = "DATE",
    DATETIME = "DATETIME",
    IMAGE = "IMAGE",
    BOOLEAN = "BOOLEAN",
    DOCUMENT = "DOCUMENT",
    URL = "URL",
    RICH_TEXT = "RICH_TEXT",
    VIDEO = "VIDEO",
    ANY = "ANY",
    ARRAY_STRING = "ARRAY_STRING",
    ARRAY_DOCUMENT = "ARRAY_DOCUMENT",
    AUDIO = "AUDIO",
    TIME = "TIME",
    LANGUAGE = "LANGUAGE",
    RICH_CONTENT = "RICH_CONTENT",
    MEDIA_GALLERY = "MEDIA_GALLERY",
    ADDRESS = "ADDRESS",
    PAGE_LINK = "PAGE_LINK",
    REFERENCE = "REFERENCE",
    MULTI_REFERENCE = "MULTI_REFERENCE",
    OBJECT = "OBJECT",
    ARRAY = "ARRAY",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_TIME = "LEGACY_TIME",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_BOOK = "LEGACY_BOOK",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_EXTERNAL_URL = "LEGACY_EXTERNAL_URL",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_BROKEN_REFERENCE = "LEGACY_BROKEN_REFERENCE",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_IMAGE = "LEGACY_IMAGE",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_COLOR = "LEGACY_COLOR",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_EXTERNAL_VIDEO = "LEGACY_EXTERNAL_VIDEO"
}
export interface ConnectionStatus {
    /** Whether the connection was established successfully. */
    successful?: boolean;
    /**
     * Reason for the failure, if a connection isn't established successfully.
     * + `NONE`: No connection failure.
     * +  `COMMUNICATION_FAILURE`: General communication failure.
     * + `DESTINATION_HOST_UNREACHABLE`: External database host is unreachable.
     * + `UNAUTHORIZED`: Unauthorized to access external database.
     */
    causeOfFailure?: CauseOfFailure;
    /**
     * Whether the external database has existing collections. Possible values are:
     * + `UNKNOWN`: The attempt to connect to the external database failed, so status is unknown.
     * + `NO`: External database does not have any existing collections.
     * + `YES`: External database has existing collections.
     * @readonly
     */
    hasCollections?: CollectionsFound;
}
export declare enum ProtocolVersion {
    UNKNOWN_PROTOCOL_VERSION = "UNKNOWN_PROTOCOL_VERSION",
    V1 = "V1",
    V2 = "V2",
    V3 = "V3"
}
export interface Capabilities {
    /** Whether the external database supports creating or updating collections. */
    collectionModificationsSupported?: boolean;
    /**
     * Field types supported by the external database.
     * This option only affects collection creation and update requests.
     */
    fieldTypes?: FieldType[];
    /** Whether the external database supports storing the collection display name. */
    collectionDisplayNameSupported?: boolean;
    /** Whether the external database supports storing the collection display field. */
    collectionDisplayFieldSupported?: boolean;
    /** Whether the external database supports storing collection permissions. */
    collectionPermissionsSupported?: boolean;
    /** Whether the external database supports storing the field display name. */
    collectionFieldDisplayNameSupported?: boolean;
    /** Whether the external database supports storing the field description. */
    collectionFieldDescriptionSupported?: boolean;
}
export interface GetExternalDatabaseConnectionRequest {
    /** Name of the external database connection to retrieve. */
    name: string;
}
export interface GetExternalDatabaseConnectionResponse {
    /** Details of the external database connection requested. */
    externalDatabaseConnection?: ExternalDatabaseConnection;
}
export interface ListExternalDatabaseConnectionsRequest {
    /** Paging */
    paging?: Paging;
}
export interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface ListExternalDatabaseConnectionsResponse {
    /** List of external database connections. */
    externalDatabaseConnections?: ExternalDatabaseConnection[];
    /** Paging metadata */
    pagingMetadata?: PagingMetadata;
}
export interface PagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
}
export interface CreateExternalDatabaseConnectionRequest {
    /** External database connection details. */
    externalDatabaseConnection: ExternalDatabaseConnection;
}
export interface CreateExternalDatabaseConnectionResponse {
    /** Details of external database connection created. */
    externalDatabaseConnection?: ExternalDatabaseConnection;
}
export interface UpdateExternalDatabaseConnectionRequest {
    /** Updated external database connection details. The existing connection is replaced with this version. */
    externalDatabaseConnection: ExternalDatabaseConnection;
}
export interface UpdateExternalDatabaseConnectionResponse {
    /** Updated external database connection details. */
    externalDatabaseConnection?: ExternalDatabaseConnection;
}
export interface DeleteExternalDatabaseConnectionRequest {
    /** Name of the external database connection to delete. */
    name: string;
}
export interface DeleteExternalDatabaseConnectionResponse {
}
export interface GetExternalDatabaseConnectionResponseNonNullableFields {
    externalDatabaseConnection?: {
        name: string;
        connectionStatus?: {
            successful: boolean;
            causeOfFailure: CauseOfFailure;
            hasCollections: CollectionsFound;
        };
        protocolVersion: ProtocolVersion;
        capabilities?: {
            collectionModificationsSupported: boolean;
            fieldTypes: FieldType[];
            collectionDisplayNameSupported: boolean;
            collectionDisplayFieldSupported: boolean;
            collectionPermissionsSupported: boolean;
            collectionFieldDisplayNameSupported: boolean;
            collectionFieldDescriptionSupported: boolean;
        };
    };
}
export interface ListExternalDatabaseConnectionsResponseNonNullableFields {
    externalDatabaseConnections: {
        name: string;
        connectionStatus?: {
            successful: boolean;
            causeOfFailure: CauseOfFailure;
            hasCollections: CollectionsFound;
        };
        protocolVersion: ProtocolVersion;
        capabilities?: {
            collectionModificationsSupported: boolean;
            fieldTypes: FieldType[];
            collectionDisplayNameSupported: boolean;
            collectionDisplayFieldSupported: boolean;
            collectionPermissionsSupported: boolean;
            collectionFieldDisplayNameSupported: boolean;
            collectionFieldDescriptionSupported: boolean;
        };
    }[];
}
export interface CreateExternalDatabaseConnectionResponseNonNullableFields {
    externalDatabaseConnection?: {
        name: string;
        connectionStatus?: {
            successful: boolean;
            causeOfFailure: CauseOfFailure;
            hasCollections: CollectionsFound;
        };
        protocolVersion: ProtocolVersion;
        capabilities?: {
            collectionModificationsSupported: boolean;
            fieldTypes: FieldType[];
            collectionDisplayNameSupported: boolean;
            collectionDisplayFieldSupported: boolean;
            collectionPermissionsSupported: boolean;
            collectionFieldDisplayNameSupported: boolean;
            collectionFieldDescriptionSupported: boolean;
        };
    };
}
export interface UpdateExternalDatabaseConnectionResponseNonNullableFields {
    externalDatabaseConnection?: {
        name: string;
        connectionStatus?: {
            successful: boolean;
            causeOfFailure: CauseOfFailure;
            hasCollections: CollectionsFound;
        };
        protocolVersion: ProtocolVersion;
        capabilities?: {
            collectionModificationsSupported: boolean;
            fieldTypes: FieldType[];
            collectionDisplayNameSupported: boolean;
            collectionDisplayFieldSupported: boolean;
            collectionPermissionsSupported: boolean;
            collectionFieldDisplayNameSupported: boolean;
            collectionFieldDescriptionSupported: boolean;
        };
    };
}
