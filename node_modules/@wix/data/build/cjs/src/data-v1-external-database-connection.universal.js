"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteExternalDatabaseConnection = exports.updateExternalDatabaseConnection = exports.createExternalDatabaseConnection = exports.listExternalDatabaseConnections = exports.getExternalDatabaseConnection = exports.ProtocolVersion = exports.FieldType = exports.CollectionsFound = exports.CauseOfFailure = exports.__debug = void 0;
const velo_1 = require("@wix/metro-runtime/velo");
const ambassadorWixDataV1ExternalDatabaseConnection = __importStar(require("./data-v1-external-database-connection.http"));
let __verbose = false;
function __log(...args) {
    __verbose && console.log(...args);
}
function __inspect(obj) {
    return obj;
}
exports.__debug = {
    verboseLogging: {
        on: () => (__verbose = true),
        off: () => (__verbose = false),
    },
};
const _toVeloEntity = '$';
const _fromVeloEntity = '$';
var CauseOfFailure;
(function (CauseOfFailure) {
    /** No connection failure. */
    CauseOfFailure["NONE"] = "NONE";
    /** General communication failure. */
    CauseOfFailure["COMMUNICATION_FAILURE"] = "COMMUNICATION_FAILURE";
    /** External database host is unreachable. */
    CauseOfFailure["DESTINATION_HOST_UNREACHABLE"] = "DESTINATION_HOST_UNREACHABLE";
    /** Unauthorized to access external database. */
    CauseOfFailure["UNAUTHORIZED"] = "UNAUTHORIZED";
})(CauseOfFailure = exports.CauseOfFailure || (exports.CauseOfFailure = {}));
var CollectionsFound;
(function (CollectionsFound) {
    CollectionsFound["UNKNOWN"] = "UNKNOWN";
    CollectionsFound["YES"] = "YES";
    CollectionsFound["NO"] = "NO";
})(CollectionsFound = exports.CollectionsFound || (exports.CollectionsFound = {}));
var FieldType;
(function (FieldType) {
    FieldType["UNKNOWN_FIELD_TYPE"] = "UNKNOWN_FIELD_TYPE";
    FieldType["TEXT"] = "TEXT";
    FieldType["NUMBER"] = "NUMBER";
    FieldType["DATE"] = "DATE";
    FieldType["DATETIME"] = "DATETIME";
    FieldType["IMAGE"] = "IMAGE";
    FieldType["BOOLEAN"] = "BOOLEAN";
    FieldType["DOCUMENT"] = "DOCUMENT";
    FieldType["URL"] = "URL";
    FieldType["RICH_TEXT"] = "RICH_TEXT";
    FieldType["VIDEO"] = "VIDEO";
    FieldType["ANY"] = "ANY";
    FieldType["ARRAY_STRING"] = "ARRAY_STRING";
    FieldType["ARRAY_DOCUMENT"] = "ARRAY_DOCUMENT";
    FieldType["AUDIO"] = "AUDIO";
    FieldType["TIME"] = "TIME";
    FieldType["LANGUAGE"] = "LANGUAGE";
    FieldType["RICH_CONTENT"] = "RICH_CONTENT";
    FieldType["MEDIA_GALLERY"] = "MEDIA_GALLERY";
    FieldType["ADDRESS"] = "ADDRESS";
    FieldType["PAGE_LINK"] = "PAGE_LINK";
    FieldType["REFERENCE"] = "REFERENCE";
    FieldType["MULTI_REFERENCE"] = "MULTI_REFERENCE";
    FieldType["OBJECT"] = "OBJECT";
    FieldType["ARRAY"] = "ARRAY";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_TIME"] = "LEGACY_TIME";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_BOOK"] = "LEGACY_BOOK";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_EXTERNAL_URL"] = "LEGACY_EXTERNAL_URL";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_BROKEN_REFERENCE"] = "LEGACY_BROKEN_REFERENCE";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_IMAGE"] = "LEGACY_IMAGE";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_COLOR"] = "LEGACY_COLOR";
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    FieldType["LEGACY_EXTERNAL_VIDEO"] = "LEGACY_EXTERNAL_VIDEO";
})(FieldType = exports.FieldType || (exports.FieldType = {}));
var ProtocolVersion;
(function (ProtocolVersion) {
    ProtocolVersion["UNKNOWN_PROTOCOL_VERSION"] = "UNKNOWN_PROTOCOL_VERSION";
    ProtocolVersion["V1"] = "V1";
    ProtocolVersion["V2"] = "V2";
    ProtocolVersion["V3"] = "V3";
})(ProtocolVersion = exports.ProtocolVersion || (exports.ProtocolVersion = {}));
const _createExternalDatabaseConnectionRequest = {};
const _createExternalDatabaseConnectionResponse = {};
const _deleteExternalDatabaseConnectionRequest = {};
const _deleteExternalDatabaseConnectionResponse = {};
const _getExternalDatabaseConnectionRequest = {};
const _getExternalDatabaseConnectionResponse = {};
const _listExternalDatabaseConnectionsRequest = {};
const _listExternalDatabaseConnectionsResponse = {};
const _updateExternalDatabaseConnectionRequest = {};
const _updateExternalDatabaseConnectionResponse = {};
/**
 * Retrieves an external database connection by name.
 * @param name - Name of the external database connection to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField name
 * @permissionScope Read External Database Connections
 * @applicableIdentity APP
 * @returns Details of the external database connection requested.
 */
function getExternalDatabaseConnection(name) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { name: '$[0]' };
        const responseTransformation = '$.externalDatabaseConnection';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _getExternalDatabaseConnectionRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _getExternalDatabaseConnectionResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['externalDatabaseConnection']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([name]);
        const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.getExternalDatabaseConnection(payload);
        __log(`"GetExternalDatabaseConnection" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'name',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.getExternalDatabaseConnection = getExternalDatabaseConnection;
/**
 * Retrieves a list of all external database collections associated with the site or project.
 * @public
 * @documentationMaturity preview
 * @permissionScope Read External Database Connections
 * @applicableIdentity APP
 */
function listExternalDatabaseConnections(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { paging: '$[0].paging' };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _listExternalDatabaseConnectionsRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _listExternalDatabaseConnectionsResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#externalDatabaseConnections']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.listExternalDatabaseConnections(payload);
        __log(`"ListExternalDatabaseConnections" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.listExternalDatabaseConnections = listExternalDatabaseConnections;
/**
 * Creates a new external database connection.
 *
 * The `options.externalDatabaseConnection` parameter must include a name, base URL, and configuration details for the external database.
 * If any of these are missing, the external database connection isn't created.
 * @param externalDatabaseConnection - External database connection details.
 * @public
 * @documentationMaturity preview
 * @requiredField externalDatabaseConnection
 * @requiredField externalDatabaseConnection.name
 * @param options - Options for creating an external database connection.
 * @permissionScope Write External Database Connections
 * @applicableIdentity APP
 * @returns Details of external database connection created.
 */
function createExternalDatabaseConnection(externalDatabaseConnection) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { externalDatabaseConnection: '$[0]' };
        const responseTransformation = '$.externalDatabaseConnection';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _createExternalDatabaseConnectionRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['externalDatabaseConnection']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _createExternalDatabaseConnectionResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['externalDatabaseConnection']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([externalDatabaseConnection]);
        const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.createExternalDatabaseConnection(payload);
        __log(`"CreateExternalDatabaseConnection" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'externalDatabaseConnection',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.createExternalDatabaseConnection = createExternalDatabaseConnection;
/**
 * Updates an external database connection.
 *
 * An external database collection name must be provided in `name`.
 * If an existing external database connection is found with the same name, that connection's details are updated.
 * If no external database connection has that name, the request fails.
 *
 * > **Note:** After an external database connection is updated, it only contains the values provided in the request. All previous values are lost.
 * @param name - Name of the external database connection.
 * An external database connection may connect to one or more external data collections or tables.
 * These are represented as `connectionName/dataCollectionId`.
 * @public
 * @documentationMaturity preview
 * @requiredField externalDatabaseConnection
 * @requiredField name
 * @param options - Options for updating an external database connection.
 * @permissionScope Write External Database Connections
 * @applicableIdentity APP
 * @returns Updated external database connection details.
 */
function updateExternalDatabaseConnection(name, externalDatabaseConnection) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            externalDatabaseConnection: { '*': '$[1]', name: '$[0]' },
        };
        const responseTransformation = '$.externalDatabaseConnection';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[2];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _updateExternalDatabaseConnectionRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['externalDatabaseConnection']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _updateExternalDatabaseConnectionResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['externalDatabaseConnection']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([name, externalDatabaseConnection]);
        const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.updateExternalDatabaseConnection(payload);
        __log(`"UpdateExternalDatabaseConnection" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'name',
                'externalDatabaseConnection',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.updateExternalDatabaseConnection = updateExternalDatabaseConnection;
/**
 * Deletes an external database connection.
 *
 * > **Note:** Once an external database connection is deleted, it can't be restored. To reconnect the database you need to create a new external database connection.
 * @param name - Name of the external database connection to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField name
 * @permissionScope Write External Database Connections
 * @applicableIdentity APP
 */
function deleteExternalDatabaseConnection(name) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { name: '$[0]' };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _deleteExternalDatabaseConnectionRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _deleteExternalDatabaseConnectionResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([name]);
        const reqOpts = ambassadorWixDataV1ExternalDatabaseConnection.deleteExternalDatabaseConnection(payload);
        __log(`"DeleteExternalDatabaseConnection" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'name',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.deleteExternalDatabaseConnection = deleteExternalDatabaseConnection;
//# sourceMappingURL=data-v1-external-database-connection.universal.js.map