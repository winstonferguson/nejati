"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listIndexes = exports.dropIndex = exports.createIndex = exports.Environment = exports.Status = exports.Order = exports.__debug = void 0;
const velo_1 = require("@wix/metro-runtime/velo");
const ambassadorWixDataV2Index = __importStar(require("./data-v2-index.http"));
let __verbose = false;
function __log(...args) {
    __verbose && console.log(...args);
}
function __inspect(obj) {
    return obj;
}
exports.__debug = {
    verboseLogging: {
        on: () => (__verbose = true),
        off: () => (__verbose = false),
    },
};
const _toVeloEntity = '$';
const _fromVeloEntity = '$';
/**
 * Order determines how values are ordered in the index. This is important when
 * ordering and/or range querying by indexed fields.
 */
var Order;
(function (Order) {
    Order["ASC"] = "ASC";
    Order["DESC"] = "DESC";
})(Order = exports.Order || (exports.Order = {}));
var Status;
(function (Status) {
    /** Place holder. Never returned by the service. */
    Status["UNKNOWN"] = "UNKNOWN";
    /** Index creation is in progress. */
    Status["BUILDING"] = "BUILDING";
    /** Index has been successfully created and can be used in queries. */
    Status["ACTIVE"] = "ACTIVE";
    /** Index is in the process of being dropped. */
    Status["DROPPING"] = "DROPPING";
    /** Index has been dropped successfully. */
    Status["DROPPED"] = "DROPPED";
    /** Index creation has failed. */
    Status["FAILED"] = "FAILED";
    /** Index contains incorrectly indexed data. */
    Status["INVALID"] = "INVALID";
})(Status = exports.Status || (exports.Status = {}));
var Environment;
(function (Environment) {
    Environment["LIVE"] = "LIVE";
    Environment["SANDBOX"] = "SANDBOX";
})(Environment = exports.Environment || (exports.Environment = {}));
const _createIndexRequest = {};
const _createIndexResponse = {};
const _dropIndexRequest = {};
const _dropIndexResponse = {};
const _listIndexesRequest = {};
const _listIndexesResponse = {};
/**
 * Creates an index for a data collection.
 *
 * The index can't be used immediately, as the process of generating the index takes time.
 * You can check whether your index is ready using `listIndexes()`.
 *
 * Note that when an index fails to create, the failed index still occupies a slot.
 * To remove the failed index and free up the slot for a new index, use `dropIndex()`.
 * @param dataCollectionId - ID of the data collection for which to generate the index.
 * @param index - Details of the index to be created.
 * @public
 * @documentationMaturity preview
 * @requiredField dataCollectionId
 * @requiredField index
 * @requiredField index.fields
 * @requiredField index.fields.path
 * @requiredField index.name
 * @param options - Options for creating an index.
 * @permissionScope Write Data Indexes
 * @applicableIdentity APP
 * @returns Details of the index being generated.
 */
function createIndex(dataCollectionId, index) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { dataCollectionId: '$[0]', index: '$[1]' };
        const responseTransformation = '$.index';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[2];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _createIndexRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['index']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _createIndexResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['index']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([dataCollectionId, index]);
        const reqOpts = ambassadorWixDataV2Index.createIndex(payload);
        __log(`"CreateIndex" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'dataCollectionId',
                'index',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.createIndex = createIndex;
/**
 * Removes an index from a data collection.
 *
 * The process of dropping an index from a collection takes time.
 * You can check whether your index has been dropped by calling `listIndexes()`.
 * @param dataCollectionId - ID of the data collection for which the index to be dropped is defined.
 * @param indexName - Name of the index to drop.
 * @public
 * @documentationMaturity preview
 * @requiredField dataCollectionId
 * @requiredField indexName
 * @param options - Options for dropping an index.
 * @permissionScope Write Data Indexes
 * @applicableIdentity APP
 */
function dropIndex(dataCollectionId, indexName) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { dataCollectionId: '$[0]', indexName: '$[1]' };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[2];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _dropIndexRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _dropIndexResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([dataCollectionId, indexName]);
        const reqOpts = ambassadorWixDataV2Index.dropIndex(payload);
        __log(`"DropIndex" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'dataCollectionId',
                'indexName',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.dropIndex = dropIndex;
/**
 * Lists all indexes defined for a data collection.
 *
 * When an index's status is `ACTIVE`, it is ready to use.
 * While it is still being created, its status is `BUILDING`.
 *
 * When an index's status is `DROPPED`, it has been dropped successfully.
 * While it is still in the process of being removed, its status is `DROPPING`.
 * @param dataCollectionId - ID of the data collection for which to list indexes.
 * @public
 * @documentationMaturity preview
 * @requiredField dataCollectionId
 * @param options - Options for retrieving a list of indexes.
 * @permissionScope Read Data Indexes
 * @applicableIdentity APP
 */
function listIndexes(dataCollectionId, options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0]',
            paging: '$[1].paging',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[2];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _listIndexesRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _listIndexesResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#indexes']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([dataCollectionId, options]);
        const reqOpts = ambassadorWixDataV2Index.listIndexes(payload);
        __log(`"ListIndexes" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'dataCollectionId',
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.listIndexes = listIndexes;
//# sourceMappingURL=data-v2-index.universal.js.map