var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { serializer, transformError, resolveQueryFieldsTransformationPaths, } from '@wix/metro-runtime/velo';
import * as ambassadorWixDataV2DataItem from './data-v2-data-item.http';
// @ts-ignore
import { wrapWithQueryBuilder } from '@wix/motion-edm-autogen-query-wrapper';
let __verbose = false;
function __log(...args) {
    __verbose && console.log(...args);
}
function __inspect(obj) {
    return obj;
}
export const __debug = {
    verboseLogging: {
        on: () => (__verbose = true),
        off: () => (__verbose = false),
    },
};
const _toVeloEntity = '$';
const _fromVeloEntity = '$';
export var Environment;
(function (Environment) {
    Environment["LIVE"] = "LIVE";
    Environment["SANDBOX"] = "SANDBOX";
})(Environment || (Environment = {}));
export var Action;
(function (Action) {
    Action["UNKNOWN_ACTION"] = "UNKNOWN_ACTION";
    Action["INSERTED"] = "INSERTED";
    Action["UPDATED"] = "UPDATED";
})(Action || (Action = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var BulkActionType;
(function (BulkActionType) {
    BulkActionType["UNKNOWN_ACTION_TYPE"] = "UNKNOWN_ACTION_TYPE";
    BulkActionType["INSERT"] = "INSERT";
    BulkActionType["UPDATE"] = "UPDATE";
    BulkActionType["DELETE"] = "DELETE";
})(BulkActionType || (BulkActionType = {}));
const _aggregateDataItemsRequest = {};
const _aggregateDataItemsResponse = {};
const _bulkInsertDataItemReferencesRequest = {};
const _bulkInsertDataItemReferencesResponse = {};
const _bulkInsertDataItemsRequest = {};
const _bulkInsertDataItemsResponse = {};
const _bulkRemoveDataItemReferencesRequest = {};
const _bulkRemoveDataItemReferencesResponse = {};
const _bulkRemoveDataItemsRequest = {};
const _bulkRemoveDataItemsResponse = {};
const _bulkSaveDataItemsRequest = {};
const _bulkSaveDataItemsResponse = {};
const _bulkUpdateDataItemsRequest = {};
const _bulkUpdateDataItemsResponse = {};
const _countDataItemsRequest = {};
const _countDataItemsResponse = {};
const _getDataItemRequest = {};
const _getDataItemResponse = {};
const _insertDataItemReferenceRequest = {};
const _insertDataItemReferenceResponse = {};
const _insertDataItemRequest = {};
const _insertDataItemResponse = {};
const _isReferencedDataItemRequest = {};
const _isReferencedDataItemResponse = {};
const _queryDataItemsRequest = {};
const _queryDataItemsResponse = {};
const _queryDistinctValuesRequest = {};
const _queryDistinctValuesResponse = {};
const _queryReferencedDataItemsRequest = {};
const _queryReferencedDataItemsResponse = {};
const _removeDataItemReferenceRequest = {};
const _removeDataItemReferenceResponse = {};
const _removeDataItemRequest = {};
const _removeDataItemResponse = {};
const _replaceDataItemReferencesRequest = {};
const _replaceDataItemReferencesResponse = {};
const _saveDataItemRequest = {};
const _saveDataItemResponse = {};
const _truncateDataItemsRequest = {};
const _truncateDataItemsResponse = {};
const _updateDataItemRequest = {};
const _updateDataItemResponse = {};
/**
 * Adds an item to a collection.
 *
 *
 * An item can only be inserted into an existing connection.
 * You can create a new collection using the Data Collections API.
 *
 * When an item is inserted into a collection, the item's ID is automatically assigned a random value.
 * You can optionally provide a custom ID in `dataItem.id` when inserting the item.
 * If you specify an ID that already exists in the collection, the insertion will fail.
 *
 * If `options.dataItem.data` is empty, a new item is created with no data fields.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.dataCollectionId
 * @requiredField options.dataItem
 * @param options - Options for adding an item to a collection.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function insertDataItem(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            dataItem: '$[0].dataItem',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _insertDataItemRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['dataItem']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _insertDataItemResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['dataItem']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.insertDataItem(payload);
        __log(`"InsertDataItem" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Updates an item in a collection.
 *
 *
 * This function replaces the data item's existing data with the payload provided in `options.dataItem.data` in the request.
 *
 * To update an item, you need to specify an item ID and a collection ID.
 * If an item is found in the specified collection with the specified ID, that item is updated.
 * If the collection doesn't contain an item with that ID, the request fails.
 *
 * When an item is updated, its `data._updatedDate` field is changed to the current date and time.
 *
 * > **Note:**
 * > After an item is updated, it only contains the fields included in the `options.dataItem.data` payload in the `updateDataItem()` call.
 * > If the existing item has fields with values and those fields aren't included in the updated item, their values are lost.
 * @param _id - Data item ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField options
 * @requiredField options.dataCollectionId
 * @requiredField options.dataItem
 * @param options - Options for updating an item in a collection.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function updateDataItem(_id, options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataItem: { '*': '$[1].dataItem', id: '$[0]' },
            dataCollectionId: '$[1].dataCollectionId',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[2];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _updateDataItemRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['dataItem']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _updateDataItemResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['dataItem']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([_id, options]);
        const reqOpts = ambassadorWixDataV2DataItem.updateDataItem(payload);
        __log(`"UpdateDataItem" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                '_id',
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Inserts or updates an item in a collection.
 *
 *
 * The `saveDataItem()` function inserts or updates the specified item, depending on whether it already exists in the collection.
 *
 * + If you don't provide an ID, a new item is created.
 *
 * + If you provide an ID that does not exist in the collection, a new item is created with that ID.
 *
 * + If an item with the ID you provide already exists in the collection, that item is updated. When an item is updated, its `data._updatedDate` field is changed to the current date and time.
 *
 * > **Note:** When you provide an item with an ID that already exists in the collection, the payload you provide in `options.dataItem.data` replaces the existing item with that ID.
 * > This means that the item's previous fields and values are lost.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.dataCollectionId
 * @requiredField options.dataItem
 * @param options - Options for saving an item in a collection.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function saveDataItem(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            dataItem: '$[0].dataItem',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _saveDataItemRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['dataItem']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _saveDataItemResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['dataItem']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.saveDataItem(payload);
        __log(`"SaveDataItem" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Retrieves an item from a collection.
 *
 *
 * > **Note**: When calling `getDataItem()` following an update to your collection, the data retrieved may not contain the most recent changes. If you need the most up-to-date data, set `options.consistentRead` to `true`.
 * @param dataItemId - ID of the data item to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField dataItemId
 * @requiredField options.dataCollectionId
 * @param options - Options for retrieving an item from a collection.
 * @permissionScope Read Data Items
 * @applicableIdentity APP
 * @returns Retrieved item.
 */
export function getDataItem(dataItemId, options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataItemId: '$[0]',
            dataCollectionId: '$[1].dataCollectionId',
            consistentRead: '$[1].consistentRead',
        };
        const responseTransformation = '$.dataItem';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[2];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _getDataItemRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _getDataItemResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['dataItem']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([dataItemId, options]);
        const reqOpts = ambassadorWixDataV2DataItem.getDataItem(payload);
        __log(`"GetDataItem" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'dataItemId',
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Removes an item from a collection.
 *
 *
 * If any items in other collections reference the removed item in reference or multi-reference fields, those fields are cleared.
 *
 * > **Note:**
 * > Once an item has been removed from a collection, it can't be restored.
 * @param dataItemId - ID of the item to remove.
 * @public
 * @documentationMaturity preview
 * @requiredField dataItemId
 * @requiredField options
 * @requiredField options.dataCollectionId
 * @param options - Options for removing an item from a collection.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function removeDataItem(dataItemId, options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataItemId: '$[0]',
            dataCollectionId: '$[1].dataCollectionId',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[2];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _removeDataItemRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _removeDataItemResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['dataItem']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([dataItemId, options]);
        const reqOpts = ambassadorWixDataV2DataItem.removeDataItem(payload);
        __log(`"RemoveDataItem" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'dataItemId',
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Removes all items from a collection.
 *
 *
 * If any items in other collections reference the removed items in reference or multi-reference fields, those fields are cleared.
 *
 * > **Note:**
 * > Once items have been removed from a collection, they can't be restored.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.dataCollectionId
 * @param options - Options for truncating data items from a collection.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function truncateDataItems(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { dataCollectionId: '$[0].dataCollectionId' };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _truncateDataItemsRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _truncateDataItemsResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.truncateDataItems(payload);
        __log(`"TruncateDataItems" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Creates a query to retrieve items from a database collection.
 *
 * The `queryDataItems()` function builds a query to retrieve data items from a collection and returns a `DataItemsQueryBuilder` object.
 *
 * The returned object contains the query definition which is typically used to run the query using the `find()` function.
 *
 * You can refine the query by chaining `DataItemsQueryBuilder` functions onto the query. `DataItemsQueryBuilder` functions enable you to sort, filter, and control the results that `queryDataItems()` returns.
 *
 * The `queryDataItems()` function runs with the following `DataItemsQueryBuilder` defaults that you can override:
 *
 * + `skip`: 0
 * + `limit`: 50
 * + `descending`: by `_createdDate`
 *
 * The functions that are chained to `queryDataItems()` are applied in the order they are called. For example, if you sort on an `age` field in ascending order and then on a `name` field in descending order, the results are sorted first by the age of the items and then, if there are multiple results with the same age, the items are sorted by name in descending order, per age value.
 *
 * If the collection that you are querying has references to other collections, by default the data from referenced collections is not retrieved. To get the data from referenced items, specify them in the `options.includeReferencedItems` parameter.
 *
 * > **Note**: When calling `queryDataItems()` following an update to your collection, the data retrieved may not contain the most recent changes. If you need the most up-to-date data, set `options.consistentRead` to `true`.
 *
 *
 * @public
 * @documentationMaturity preview
 * @requiredField options.options.dataCollectionId
 * @param options - Options for querying data items.
 * @permissionScope Read Data Items
 * @applicableIdentity APP
 */
export function queryDataItems(options) {
    const requestTransformation = { '*': '$[1]', query: '$[0]' };
    const responseTransformation = {
        items: '$.dataItems',
        pagingMetadata: '$.pagingMetadata',
    };
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const { toAmbassadorRequest } = serializer({
        rootSchema: _queryDataItemsRequest,
        depSchemas: {},
        fqdnTransformation: {
            paths: [],
            transformation: _fromVeloEntity,
        },
        customTransformation: requestTransformation,
    });
    const { fromJSON } = serializer({
        rootSchema: _queryDataItemsResponse,
        depSchemas: {},
        fqdnTransformation: {
            paths: [...['Array#dataItems']],
            transformation: _toVeloEntity,
        },
        customTransformation: responseTransformation,
    });
    return wrapWithQueryBuilder({
        func: (payload) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const reqOpts = ambassadorWixDataV2DataItem.queryDataItems(Object.assign(Object.assign({}, payload), options));
            (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
            try {
                const result = yield httpClient.request(reqOpts);
                (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
                return result;
            }
            catch (err) {
                (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
                throw err;
            }
        }),
        requestTransformer: (...args) => toAmbassadorRequest(args),
        responseTransformer: ({ data }) => fromJSON(data),
        errorTransformer: (err) => {
            const transformedError = transformError(err, requestTransformation);
            throw transformedError;
        },
        pagingMethod: 'OFFSET',
        transformationPaths: resolveQueryFieldsTransformationPaths(_toVeloEntity),
    })({ cursorWithEmptyFilterAndSort: true });
}
/**
 * Runs an aggregation on a data collection and returns the resulting list of items.
 *
 *
 * An aggregation enables you to perform certain calculations on your collection data, or on groups of items that you define, to retrieve meaningful summaries.
 * You can also add paging, filtering, and sorting preferences to your aggregation to retrieve exactly what you need.
 * @public
 * @documentationMaturity preview
 * @requiredField options.dataCollectionId
 * @param options - Options for running an aggregation.
 * @permissionScope Read Data Items
 * @applicableIdentity APP
 */
export function aggregateDataItems(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            initialFilter: '$[0].initialFilter',
            aggregation: '$[0].aggregation',
            finalFilter: '$[0].finalFilter',
            paging: '$[0].paging',
            cursorPaging: '$[0].cursorPaging',
            sort: '$[0].sort',
            returnTotalCount: '$[0].returnTotalCount',
            consistentRead: '$[0].consistentRead',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _aggregateDataItemsRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _aggregateDataItemsResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.aggregateDataItems(payload);
        __log(`"AggregateDataItems" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Counts the number of items in a data collection that match the provided filtering preferences.
 *
 * > **Note**: When calling `countDataItems()` following an update to your collection, the result returned may not reflect the most recent changes. If you need the most up-to-date data, set `options.consistentRead` to `true`.
 * @public
 * @documentationMaturity preview
 * @requiredField options.dataCollectionId
 * @param options - Options for counting the number of items in a data collection.
 * @permissionScope Read Data Items
 * @applicableIdentity APP
 */
export function countDataItems(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            filter: '$[0].filter',
            consistentRead: '$[0].consistentRead',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _countDataItemsRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _countDataItemsResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.countDataItems(payload);
        __log(`"CountDataItems" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Retrieves a list of distinct values for a given field in all items that match a query, without duplicates.
 *
 *
 * As with `queryDataItems()`, this endpoint retrieves items based on the filtering, sorting, and paging preferences you provide.
 * However, `queryDistinctValues()` doesn't return all of the full items that match the query.
 * Rather, it returns all unique values of the field you specify in `options.fieldName` for items that match the query.
 * If more than one item has the same value for that field, that value appears only once.
 *
 * For more details on using queries, see [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language).
 *
 * > **Note**: When calling `queryDistinctValues()` following an update to your collection, the data retrieved may not reflect the most recent changes. If you need the most up-to-date data, set `options.consistentRead` to `true`.
 * @public
 * @documentationMaturity preview
 * @requiredField options.dataCollectionId
 * @param options - Options for querying distinct values.
 * @permissionScope Read Data Items
 * @applicableIdentity APP
 */
export function queryDistinctValues(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            fieldName: '$[0].fieldName',
            filter: '$[0].filter',
            order: '$[0].order',
            paging: '$[0].paging',
            cursorPaging: '$[0].cursorPaging',
            returnTotalCount: '$[0].returnTotalCount',
            consistentRead: '$[0].consistentRead',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _queryDistinctValuesRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _queryDistinctValuesResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.queryDistinctValues(payload);
        __log(`"QueryDistinctValues" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Adds multiple items to a collection.
 *
 *
 * When each item is inserted into a collection, its ID is automatically assigned a random value.
 * You can optionally provide your own ID when inserting the item. If you specify an ID that already exists in the collection, the insertion will fail.
 * @public
 * @documentationMaturity preview
 * @requiredField options.dataCollectionId
 * @requiredField options.dataItems
 * @param options - Options for adding multiple items to a collection.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function bulkInsertDataItems(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            dataItems: '$[0].dataItems',
            returnEntity: '$[0].returnEntity',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _bulkInsertDataItemsRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#dataItems']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _bulkInsertDataItemsResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#results.dataItem']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.bulkInsertDataItems(payload);
        __log(`"BulkInsertDataItems" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Updates multiple items in a collection.
 *
 *
 * This function replaces each specified data item's existing data with the payload provided in the request.
 *
 * Each item in the request must include an ID. If an item is found in the specified collection with
 * the same ID, that item is updated. If the collection doesn't contain an item with that ID, the update fails.
 *
 * When an item is updated, its `data._updatedDate` field is changed to the current date and time.
 *
 * > **Note:**
 * > After each item is updated, it only contains the fields included in the request. If the existing item has fields with values and those fields
 * > aren't included in the updated item, their values are lost.
 * @public
 * @documentationMaturity preview
 * @requiredField options.dataCollectionId
 * @requiredField options.dataItems
 * @param options - Options for updating multiple items in a collection.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function bulkUpdateDataItems(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            dataItems: '$[0].dataItems',
            returnEntity: '$[0].returnEntity',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _bulkUpdateDataItemsRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#dataItems']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _bulkUpdateDataItemsResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#results.dataItem']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.bulkUpdateDataItems(payload);
        __log(`"BulkUpdateDataItems" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Inserts or updates multiple items in a collection.
 *
 *
 * This function inserts or updates each item provided, depending on whether it already exists in the collection. For each item:
 *
 * + If you don't provide an ID, a new item is created.
 *
 * + If you provide an ID that doesn't exist in the collection, a new item is created with that ID.
 *
 * + If an item with the ID you provide already exists in the collection, that item is updated. When an item is updated, its `data._updatedDate` field is changed to the current date and time.
 *
 * > **Note:** When you provide an item with an ID that already exists in the collection, the item you provide completely replaces the existing item with that ID.
 * > This means that all of the item's previous fields and values are lost.
 * @public
 * @documentationMaturity preview
 * @requiredField options.dataCollectionId
 * @requiredField options.dataItems
 * @param options - Options for saving multiple items in a collection.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function bulkSaveDataItems(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            dataItems: '$[0].dataItems',
            returnEntity: '$[0].returnEntity',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _bulkSaveDataItemsRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#dataItems']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _bulkSaveDataItemsResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#results.dataItem']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.bulkSaveDataItems(payload);
        __log(`"BulkSaveDataItems" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Removes multiple items from a collection.
 *
 *
 * If any items in other collections reference the removed items in reference or multi-reference fields, those fields are cleared.
 *
 * > **Note:** Once an item has been removed from a collection, it can't be restored.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.dataCollectionId
 * @requiredField options.dataItemIds
 * @param options - Options for removing multiple items from a collection.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function bulkRemoveDataItems(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            dataItemIds: '$[0].dataItemIds',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _bulkRemoveDataItemsRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _bulkRemoveDataItemsResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#results.dataItem']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.bulkRemoveDataItems(payload);
        __log(`"BulkRemoveDataItems" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Retrieves the full items referenced in the specified field of an item.
 *
 *
 * Reference and multi-reference fields refer to items in different collections.
 * Use this function to retrieve the full details of the referenced items themselves.
 *
 * For example, suppose you have a **Movies** collection with an **Actors** field that contains references to items in a **People** collection.
 * Querying the **Movies** collection using `queryReferencedDataItems()` returns the relevant **People** items referenced in the **Actors** field of the specified **Movie** item.
 * This gives you information from the **People** collection about each of the actors in the specified movie.
 *
 * > **Note**: When calling `queryReferencedDataItems()` following an update to your collection, the data retrieved may not contain the most recent changes. If you need the most up-to-date data, set `options.consistentRead` to `true`.
 * @public
 * @documentationMaturity preview
 * @requiredField options.dataCollectionId
 * @param options - Options for querying referenced data items.
 * @permissionScope Read Data Items
 * @applicableIdentity APP
 */
export function queryReferencedDataItems(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            referringItemId: '$[0].referringItemId',
            referringItemFieldName: '$[0].referringItemFieldName',
            order: '$[0].order',
            paging: '$[0].paging',
            cursorPaging: '$[0].cursorPaging',
            returnTotalCount: '$[0].returnTotalCount',
            consistentRead: '$[0].consistentRead',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _queryReferencedDataItemsRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _queryReferencedDataItemsResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#results.dataItem']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.queryReferencedDataItems(payload);
        __log(`"QueryReferencedDataItems" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Checks whether a field in a referring item contains a reference to a specified item.
 *
 * > **Note**: When calling `isReferencedDataItem()` following an update to your collection, the result returned may not reflect the most recent changes. If you need the most up-to-date data, set `options.consistentRead` to `true`.
 * @public
 * @documentationMaturity preview
 * @requiredField options.dataCollectionId
 * @requiredField options.referencedItemId
 * @requiredField options.referringItemFieldName
 * @requiredField options.referringItemId
 * @param options - Options for checking whether a field contains a reference to an item.
 * @permissionScope Read Data Items
 * @applicableIdentity APP
 */
export function isReferencedDataItem(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            referringItemFieldName: '$[0].referringItemFieldName',
            referringItemId: '$[0].referringItemId',
            referencedItemId: '$[0].referencedItemId',
            consistentRead: '$[0].consistentRead',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _isReferencedDataItemRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _isReferencedDataItemResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.isReferencedDataItem(payload);
        __log(`"IsReferencedDataItem" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Inserts a reference in the specified field in an item in a collection.
 *
 *
 * A reference in `options.dataItemReference` specifies a referring item's ID, the field in which to insert the reference, and the ID of the referenced item.
 * @public
 * @documentationMaturity preview
 * @requiredField options.dataCollectionId
 * @requiredField options.dataItemReference.referencedItemId
 * @requiredField options.dataItemReference.referringItemFieldName
 * @requiredField options.dataItemReference.referringItemId
 * @param options - Options for inserting a reference.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function insertDataItemReference(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            dataItemReference: '$[0].dataItemReference',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _insertDataItemReferenceRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _insertDataItemReferenceResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.insertDataItemReference(payload);
        __log(`"InsertDataItemReference" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Removes the specified reference from the specified field.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.dataCollectionId
 * @requiredField options.dataItemReference
 * @requiredField options.dataItemReference.referencedItemId
 * @requiredField options.dataItemReference.referringItemFieldName
 * @requiredField options.dataItemReference.referringItemId
 * @param options - Options for removing a reference.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function removeDataItemReference(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            dataItemReference: '$[0].dataItemReference',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _removeDataItemReferenceRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _removeDataItemReferenceResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.removeDataItemReference(payload);
        __log(`"RemoveDataItemReference" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Inserts one or more references in the specified fields of items in a collection.
 *
 *
 * This endpoint adds one or more references to a collection.
 * Each new reference in `options.dataItemReferences` specifies a referring item's ID, the field in which to insert the reference, and the ID of the referenced item.
 * @public
 * @documentationMaturity preview
 * @requiredField options.dataCollectionId
 * @requiredField options.dataItemReferences
 * @requiredField options.dataItemReferences.referencedItemId
 * @requiredField options.dataItemReferences.referringItemFieldName
 * @requiredField options.dataItemReferences.referringItemId
 * @param options - Options for inserting one or more references.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function bulkInsertDataItemReferences(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            dataItemReferences: '$[0].dataItemReferences',
            returnEntity: '$[0].returnEntity',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _bulkInsertDataItemReferencesRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _bulkInsertDataItemReferencesResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.bulkInsertDataItemReferences(payload);
        __log(`"BulkInsertDataItemReferences" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Removes one or more references.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.dataCollectionId
 * @requiredField options.dataItemReferences
 * @requiredField options.dataItemReferences.referencedItemId
 * @requiredField options.dataItemReferences.referringItemFieldName
 * @requiredField options.dataItemReferences.referringItemId
 * @param options - Options for removing one or more references.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function bulkRemoveDataItemReferences(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            dataItemReferences: '$[0].dataItemReferences',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _bulkRemoveDataItemReferencesRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _bulkRemoveDataItemReferencesResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.bulkRemoveDataItemReferences(payload);
        __log(`"BulkRemoveDataItemReferences" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Replaces references in a specified field of a specified data item.
 *
 *
 * This function replaces the existing reference or references contained in the field specified in `options.referringItemFieldName` within the data item specified in `options.referringItemId`.
 * The function removes existing references and in their place it adds references to the items specified in `options.newReferencedItemIds`.
 *
 * > **Note:** If you pass an empty array in `options.newReferencedItemIds`, all existing references are removed.
 * @public
 * @documentationMaturity preview
 * @requiredField options.dataCollectionId
 * @requiredField options.referringItemFieldName
 * @requiredField options.referringItemId
 * @param options - Options for replacing references.
 * @permissionScope Write Data Items
 * @applicableIdentity APP
 */
export function replaceDataItemReferences(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            dataCollectionId: '$[0].dataCollectionId',
            referringItemFieldName: '$[0].referringItemFieldName',
            referringItemId: '$[0].referringItemId',
            newReferencedItemIds: '$[0].newReferencedItemIds',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _replaceDataItemReferencesRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _replaceDataItemReferencesResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixDataV2DataItem.replaceDataItemReferences(payload);
        __log(`"ReplaceDataItemReferences" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = transformError(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
//# sourceMappingURL=data-v2-data-item.universal.js.map