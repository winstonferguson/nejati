import { toURLSearchParams } from '@wix/metro-runtime';
import { serializer } from '@wix/metro-runtime/ambassador';
import { resolveUrl } from '@wix/metro-runtime';
const _aggregateDataItemsRequest = {};
const _aggregateDataItemsResponse = {};
const _bulkInsertDataItemReferencesRequest = {};
const _bulkInsertDataItemReferencesResponse = {};
const _bulkInsertDataItemsRequest = {};
const _bulkInsertDataItemsResponse = {};
const _bulkRemoveDataItemReferencesRequest = {};
const _bulkRemoveDataItemReferencesResponse = {};
const _bulkRemoveDataItemsRequest = {};
const _bulkRemoveDataItemsResponse = {};
const _bulkSaveDataItemsRequest = {};
const _bulkSaveDataItemsResponse = {};
const _bulkUpdateDataItemsRequest = {};
const _bulkUpdateDataItemsResponse = {};
const _countDataItemsRequest = {};
const _countDataItemsResponse = {};
const _getDataItemRequest = {};
const _getDataItemResponse = {};
const _insertDataItemReferenceRequest = {};
const _insertDataItemReferenceResponse = {};
const _insertDataItemRequest = {};
const _insertDataItemResponse = {};
const _isReferencedDataItemRequest = {};
const _isReferencedDataItemResponse = {};
const _queryDataItemsRequest = {};
const _queryDataItemsResponse = {};
const _queryDistinctValuesRequest = {};
const _queryDistinctValuesResponse = {};
const _queryReferencedDataItemsRequest = {};
const _queryReferencedDataItemsResponse = {};
const _removeDataItemReferenceRequest = {};
const _removeDataItemReferenceResponse = {};
const _removeDataItemRequest = {};
const _removeDataItemResponse = {};
const _replaceDataItemReferencesRequest = {};
const _replaceDataItemReferencesResponse = {};
const _saveDataItemRequest = {};
const _saveDataItemResponse = {};
const _truncateDataItemsRequest = {};
const _truncateDataItemsResponse = {};
const _updateDataItemRequest = {};
const _updateDataItemResponse = {};
function resolveComWixpressCloudDataApiDataDataItemServiceUrl(opts) {
    const domainToMappings = {
        'api._api_base_domain_': [
            {
                srcPath: '/cloud-data',
                destPath: '',
            },
        ],
        'code._base_domain_': [
            {
                srcPath: '/_api/cloud-data/v1/data-settings',
                destPath: '/v1/data-settings',
            },
            {
                srcPath: '/_api/cloud-data/v1/schemas',
                destPath: '/v1/schemas',
            },
            {
                srcPath: '/_api/cloud-data/v1/connector',
                destPath: '/v1/connector',
            },
            {
                srcPath: '/_api/data/v1/data-settings',
                destPath: '/v1/data-settings',
            },
            {
                srcPath: '/_api/data/v1/schemas',
                destPath: '/v1/schemas',
            },
            {
                srcPath: '/_api/data/v1/connector',
                destPath: '/v1/connector',
            },
            {
                srcPath: '/_api/cloud-data/v1/wix-data',
                destPath: '/v1/wix-data',
            },
        ],
        'cloud-data.wix-code.com': [
            {
                srcPath: '',
                destPath: '',
            },
        ],
        _: [
            {
                srcPath: '/_api/cloud-data',
                destPath: '',
            },
            {
                srcPath: '/_api/cloud-data/v1/schemas',
                destPath: '/v1/schemas',
            },
        ],
        'www._base_domain_': [
            {
                srcPath: '/_api/cloud-data',
                destPath: '',
            },
            {
                srcPath: '/_api/data',
                destPath: '',
            },
            {
                srcPath: '/[a-z0-9-_/]+/_api/cloud-data',
                destPath: '',
            },
        ],
        'dev._base_domain_': [
            {
                srcPath: '/_api/cloud-data',
                destPath: '',
            },
        ],
        'bo._base_domain_': [
            {
                srcPath: '/_api/cloud-data/v1',
                destPath: '/v1',
            },
            {
                srcPath: '/[a-z0-9-_/]+/_api/cloud-data',
                destPath: '',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/_api/cloud-data',
                destPath: '',
            },
            {
                srcPath: '/_api/data',
                destPath: '',
            },
            {
                srcPath: '/[a-z0-9-_/]+/_api/cloud-data',
                destPath: '',
            },
        ],
        'editor._base_domain_': [
            {
                srcPath: '/_api/cloud-data/v1/schemas',
                destPath: '/v1/schemas',
            },
            {
                srcPath: '/_api/cloud-data/dbs/tasks',
                destPath: '/dbs/tasks',
            },
            {
                srcPath: '/_api/data/v1/schemas',
                destPath: '/v1/schemas',
            },
            {
                srcPath: '/_api/data/dbs/tasks',
                destPath: '/dbs/tasks',
            },
            {
                srcPath: '/_api/cloud-data/v1/wix-data',
                destPath: '/v1/wix-data',
            },
            {
                srcPath: '/_api/cloud-data/v1/data-settings',
                destPath: '/v1/data-settings',
            },
            {
                srcPath: '/_api/data/v2/indexes',
                destPath: '/v2/indexes',
            },
            {
                srcPath: '/_api/cloud-data/v1/external-database-connections',
                destPath: '/v1/external-database-connections',
            },
            {
                srcPath: '/_api/data/v1/data-collection-sharing',
                destPath: '/v1/data-collection-sharing',
            },
            {
                srcPath: '/_api/cloud-data/v2/collections',
                destPath: '/v2/collections',
            },
        ],
        'blocks._base_domain_': [
            {
                srcPath: '/_api/cloud-data/v1/schemas',
                destPath: '/v1/schemas',
            },
            {
                srcPath: '/_api/cloud-data/dbs/tasks',
                destPath: '/dbs/tasks',
            },
            {
                srcPath: '/_api/data/v1/schemas',
                destPath: '/v1/schemas',
            },
            {
                srcPath: '/_api/data/dbs/tasks',
                destPath: '/dbs/tasks',
            },
            {
                srcPath: '/_api/cloud-data/v1/wix-data',
                destPath: '/v1/wix-data',
            },
            {
                srcPath: '/_api/cloud-data/v1/data-settings',
                destPath: '/v1/data-settings',
            },
            {
                srcPath: '/_api/data/v2/indexes',
                destPath: '/v2/indexes',
            },
            {
                srcPath: '/_api/cloud-data/v1/external-database-connections',
                destPath: '/v1/external-database-connections',
            },
            {
                srcPath: '/_api/data/v1/data-collection-sharing',
                destPath: '/v1/data-collection-sharing',
            },
            {
                srcPath: '/_api/cloud-data/v2/collections',
                destPath: '/v2/collections',
            },
        ],
        'create.editorx': [
            {
                srcPath: '/_api/cloud-data/v1/schemas',
                destPath: '/v1/schemas',
            },
            {
                srcPath: '/_api/cloud-data/dbs/tasks',
                destPath: '/dbs/tasks',
            },
            {
                srcPath: '/_api/data/v1/schemas',
                destPath: '/v1/schemas',
            },
            {
                srcPath: '/_api/data/dbs/tasks',
                destPath: '/dbs/tasks',
            },
            {
                srcPath: '/_api/cloud-data/v1/wix-data',
                destPath: '/v1/wix-data',
            },
            {
                srcPath: '/_api/cloud-data/v1/data-settings',
                destPath: '/v1/data-settings',
            },
            {
                srcPath: '/_api/data/v2/indexes',
                destPath: '/v2/indexes',
            },
            {
                srcPath: '/_api/cloud-data/v1/external-database-connections',
                destPath: '/v1/external-database-connections',
            },
            {
                srcPath: '/_api/data/v1/data-collection-sharing',
                destPath: '/v1/data-collection-sharing',
            },
            {
                srcPath: '/_api/cloud-data/v2/collections',
                destPath: '/v2/collections',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/wix-data/v1/collections',
                destPath: '/v1/wix-data/collections',
            },
            {
                srcPath: '/wix-data/v1/external-database-connections',
                destPath: '/v1/external-database-connections',
            },
            {
                srcPath: '/wix-data/v2/indexes',
                destPath: '/v2/indexes',
            },
            {
                srcPath: '/wix-data/v1/items',
                destPath: '/v1/items',
            },
            {
                srcPath: '/wix-data/v1/bulk',
                destPath: '/v1/bulk',
            },
            {
                srcPath: '/wix-data/v1/external-databases',
                destPath: '/v1/external-databases',
            },
            {
                srcPath: '/wix-data/v2',
                destPath: '/v2',
            },
        ],
        'www.wixgateway.com': [
            {
                srcPath: '/wix-data/v1/items',
                destPath: '/v1/items',
            },
            {
                srcPath: '/wix-data/v1/bulk',
                destPath: '/v1/bulk',
            },
        ],
    };
    return resolveUrl(Object.assign(opts, { domainToMappings }));
}
/**
 * Adds an item to a collection.
 *
 *
 * An item can only be inserted into an existing connection.
 * You can create a new collection using the Data Collections API.
 *
 * When an item is inserted into a collection, the item's ID is automatically assigned a random value.
 * You can optionally provide a custom ID in `dataItem.id` when inserting the item.
 * If you specify an ID that already exists in the collection, the insertion will fail.
 *
 * If `options.dataItem.data` is empty, a new item is created with no data fields.
 */
export function insertDataItem(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_insertDataItemRequest, {});
    const { fromJSON: fromRes } = serializer(_insertDataItemResponse, {});
    function __insertDataItem({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.InsertDataItem',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __insertDataItem.fromReq = fromReq;
    return __insertDataItem;
}
/**
 * Updates an item in a collection.
 *
 *
 * This function replaces the data item's existing data with the payload provided in `options.dataItem.data` in the request.
 *
 * To update an item, you need to specify an item ID and a collection ID.
 * If an item is found in the specified collection with the specified ID, that item is updated.
 * If the collection doesn't contain an item with that ID, the request fails.
 *
 * When an item is updated, its `data._updatedDate` field is changed to the current date and time.
 *
 * > **Note:**
 * > After an item is updated, it only contains the fields included in the `options.dataItem.data` payload in the `updateDataItem()` call.
 * > If the existing item has fields with values and those fields aren't included in the updated item, their values are lost.
 */
export function updateDataItem(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_updateDataItemRequest, {});
    const { fromJSON: fromRes } = serializer(_updateDataItemResponse, {});
    function __updateDataItem({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'PUT',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.UpdateDataItem',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/{dataItem.id}',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __updateDataItem.fromReq = fromReq;
    return __updateDataItem;
}
/**
 * Inserts or updates an item in a collection.
 *
 *
 * The `saveDataItem()` function inserts or updates the specified item, depending on whether it already exists in the collection.
 *
 * + If you don't provide an ID, a new item is created.
 *
 * + If you provide an ID that does not exist in the collection, a new item is created with that ID.
 *
 * + If an item with the ID you provide already exists in the collection, that item is updated. When an item is updated, its `data._updatedDate` field is changed to the current date and time.
 *
 * > **Note:** When you provide an item with an ID that already exists in the collection, the payload you provide in `options.dataItem.data` replaces the existing item with that ID.
 * > This means that the item's previous fields and values are lost.
 */
export function saveDataItem(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_saveDataItemRequest, {});
    const { fromJSON: fromRes } = serializer(_saveDataItemResponse, {});
    function __saveDataItem({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.SaveDataItem',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/save',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __saveDataItem.fromReq = fromReq;
    return __saveDataItem;
}
/**
 * Retrieves an item from a collection.
 *
 *
 * > **Note**: When calling `getDataItem()` following an update to your collection, the data retrieved may not contain the most recent changes. If you need the most up-to-date data, set `options.consistentRead` to `true`.
 */
export function getDataItem(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_getDataItemRequest, {});
    const { fromJSON: fromRes } = serializer(_getDataItemResponse, {});
    function __getDataItem({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'GET',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.GetDataItem',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/{dataItemId}',
                data: serializedData,
                host,
            }),
            params: toURLSearchParams(serializedData),
            transformResponse: fromRes,
        };
        return metadata;
    }
    __getDataItem.fromReq = fromReq;
    return __getDataItem;
}
/**
 * Removes an item from a collection.
 *
 *
 * If any items in other collections reference the removed item in reference or multi-reference fields, those fields are cleared.
 *
 * > **Note:**
 * > Once an item has been removed from a collection, it can't be restored.
 */
export function removeDataItem(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_removeDataItemRequest, {});
    const { fromJSON: fromRes } = serializer(_removeDataItemResponse, {});
    function __removeDataItem({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'DELETE',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.RemoveDataItem',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/{dataItemId}',
                data: serializedData,
                host,
            }),
            params: toURLSearchParams(serializedData),
            transformResponse: fromRes,
        };
        return metadata;
    }
    __removeDataItem.fromReq = fromReq;
    return __removeDataItem;
}
/**
 * Removes all items from a collection.
 *
 *
 * If any items in other collections reference the removed items in reference or multi-reference fields, those fields are cleared.
 *
 * > **Note:**
 * > Once items have been removed from a collection, they can't be restored.
 */
export function truncateDataItems(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_truncateDataItemsRequest, {});
    const { fromJSON: fromRes } = serializer(_truncateDataItemsResponse, {});
    function __truncateDataItems({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.TruncateDataItems',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/truncate',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __truncateDataItems.fromReq = fromReq;
    return __truncateDataItems;
}
/**
 * Creates a query to retrieve items from a database collection.
 *
 * The `queryDataItems()` function builds a query to retrieve data items from a collection and returns a `DataItemsQueryBuilder` object.
 *
 * The returned object contains the query definition which is typically used to run the query using the `find()` function.
 *
 * You can refine the query by chaining `DataItemsQueryBuilder` functions onto the query. `DataItemsQueryBuilder` functions enable you to sort, filter, and control the results that `queryDataItems()` returns.
 *
 * The `queryDataItems()` function runs with the following `DataItemsQueryBuilder` defaults that you can override:
 *
 * + `skip`: 0
 * + `limit`: 50
 * + `descending`: by `_createdDate`
 *
 * The functions that are chained to `queryDataItems()` are applied in the order they are called. For example, if you sort on an `age` field in ascending order and then on a `name` field in descending order, the results are sorted first by the age of the items and then, if there are multiple results with the same age, the items are sorted by name in descending order, per age value.
 *
 * If the collection that you are querying has references to other collections, by default the data from referenced collections is not retrieved. To get the data from referenced items, specify them in the `options.includeReferencedItems` parameter.
 *
 * > **Note**: When calling `queryDataItems()` following an update to your collection, the data retrieved may not contain the most recent changes. If you need the most up-to-date data, set `options.consistentRead` to `true`.
 *
 *
 */
export function queryDataItems(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_queryDataItemsRequest, {});
    const { fromJSON: fromRes } = serializer(_queryDataItemsResponse, {});
    function __queryDataItems({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.QueryDataItems',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/query',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __queryDataItems.fromReq = fromReq;
    return __queryDataItems;
}
/**
 * Runs an aggregation on a data collection and returns the resulting list of items.
 *
 *
 * An aggregation enables you to perform certain calculations on your collection data, or on groups of items that you define, to retrieve meaningful summaries.
 * You can also add paging, filtering, and sorting preferences to your aggregation to retrieve exactly what you need.
 */
export function aggregateDataItems(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_aggregateDataItemsRequest, {});
    const { fromJSON: fromRes } = serializer(_aggregateDataItemsResponse, {});
    function __aggregateDataItems({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.AggregateDataItems',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/aggregate',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __aggregateDataItems.fromReq = fromReq;
    return __aggregateDataItems;
}
/**
 * Counts the number of items in a data collection that match the provided filtering preferences.
 *
 * > **Note**: When calling `countDataItems()` following an update to your collection, the result returned may not reflect the most recent changes. If you need the most up-to-date data, set `options.consistentRead` to `true`.
 */
export function countDataItems(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_countDataItemsRequest, {});
    const { fromJSON: fromRes } = serializer(_countDataItemsResponse, {});
    function __countDataItems({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.CountDataItems',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/count',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __countDataItems.fromReq = fromReq;
    return __countDataItems;
}
/**
 * Retrieves a list of distinct values for a given field in all items that match a query, without duplicates.
 *
 *
 * As with `queryDataItems()`, this endpoint retrieves items based on the filtering, sorting, and paging preferences you provide.
 * However, `queryDistinctValues()` doesn't return all of the full items that match the query.
 * Rather, it returns all unique values of the field you specify in `options.fieldName` for items that match the query.
 * If more than one item has the same value for that field, that value appears only once.
 *
 * For more details on using queries, see [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language).
 *
 * > **Note**: When calling `queryDistinctValues()` following an update to your collection, the data retrieved may not reflect the most recent changes. If you need the most up-to-date data, set `options.consistentRead` to `true`.
 */
export function queryDistinctValues(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_queryDistinctValuesRequest, {});
    const { fromJSON: fromRes } = serializer(_queryDistinctValuesResponse, {});
    function __queryDistinctValues({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.QueryDistinctValues',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/query-distinct-values',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __queryDistinctValues.fromReq = fromReq;
    return __queryDistinctValues;
}
/**
 * Adds multiple items to a collection.
 *
 *
 * When each item is inserted into a collection, its ID is automatically assigned a random value.
 * You can optionally provide your own ID when inserting the item. If you specify an ID that already exists in the collection, the insertion will fail.
 */
export function bulkInsertDataItems(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_bulkInsertDataItemsRequest, {});
    const { fromJSON: fromRes } = serializer(_bulkInsertDataItemsResponse, {});
    function __bulkInsertDataItems({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.BulkInsertDataItems',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/bulk/items/insert',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __bulkInsertDataItems.fromReq = fromReq;
    return __bulkInsertDataItems;
}
/**
 * Updates multiple items in a collection.
 *
 *
 * This function replaces each specified data item's existing data with the payload provided in the request.
 *
 * Each item in the request must include an ID. If an item is found in the specified collection with
 * the same ID, that item is updated. If the collection doesn't contain an item with that ID, the update fails.
 *
 * When an item is updated, its `data._updatedDate` field is changed to the current date and time.
 *
 * > **Note:**
 * > After each item is updated, it only contains the fields included in the request. If the existing item has fields with values and those fields
 * > aren't included in the updated item, their values are lost.
 */
export function bulkUpdateDataItems(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_bulkUpdateDataItemsRequest, {});
    const { fromJSON: fromRes } = serializer(_bulkUpdateDataItemsResponse, {});
    function __bulkUpdateDataItems({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.BulkUpdateDataItems',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/bulk/items/update',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __bulkUpdateDataItems.fromReq = fromReq;
    return __bulkUpdateDataItems;
}
/**
 * Inserts or updates multiple items in a collection.
 *
 *
 * This function inserts or updates each item provided, depending on whether it already exists in the collection. For each item:
 *
 * + If you don't provide an ID, a new item is created.
 *
 * + If you provide an ID that doesn't exist in the collection, a new item is created with that ID.
 *
 * + If an item with the ID you provide already exists in the collection, that item is updated. When an item is updated, its `data._updatedDate` field is changed to the current date and time.
 *
 * > **Note:** When you provide an item with an ID that already exists in the collection, the item you provide completely replaces the existing item with that ID.
 * > This means that all of the item's previous fields and values are lost.
 */
export function bulkSaveDataItems(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_bulkSaveDataItemsRequest, {});
    const { fromJSON: fromRes } = serializer(_bulkSaveDataItemsResponse, {});
    function __bulkSaveDataItems({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.BulkSaveDataItems',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/bulk/items/save',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __bulkSaveDataItems.fromReq = fromReq;
    return __bulkSaveDataItems;
}
/**
 * Removes multiple items from a collection.
 *
 *
 * If any items in other collections reference the removed items in reference or multi-reference fields, those fields are cleared.
 *
 * > **Note:** Once an item has been removed from a collection, it can't be restored.
 */
export function bulkRemoveDataItems(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_bulkRemoveDataItemsRequest, {});
    const { fromJSON: fromRes } = serializer(_bulkRemoveDataItemsResponse, {});
    function __bulkRemoveDataItems({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.BulkRemoveDataItems',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/bulk/items/remove',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __bulkRemoveDataItems.fromReq = fromReq;
    return __bulkRemoveDataItems;
}
/**
 * Retrieves the full items referenced in the specified field of an item.
 *
 *
 * Reference and multi-reference fields refer to items in different collections.
 * Use this function to retrieve the full details of the referenced items themselves.
 *
 * For example, suppose you have a **Movies** collection with an **Actors** field that contains references to items in a **People** collection.
 * Querying the **Movies** collection using `queryReferencedDataItems()` returns the relevant **People** items referenced in the **Actors** field of the specified **Movie** item.
 * This gives you information from the **People** collection about each of the actors in the specified movie.
 *
 * > **Note**: When calling `queryReferencedDataItems()` following an update to your collection, the data retrieved may not contain the most recent changes. If you need the most up-to-date data, set `options.consistentRead` to `true`.
 */
export function queryReferencedDataItems(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_queryReferencedDataItemsRequest, {});
    const { fromJSON: fromRes } = serializer(_queryReferencedDataItemsResponse, {});
    function __queryReferencedDataItems({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.QueryReferencedDataItems',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/query-referenced',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __queryReferencedDataItems.fromReq = fromReq;
    return __queryReferencedDataItems;
}
/**
 * Checks whether a field in a referring item contains a reference to a specified item.
 *
 * > **Note**: When calling `isReferencedDataItem()` following an update to your collection, the result returned may not reflect the most recent changes. If you need the most up-to-date data, set `options.consistentRead` to `true`.
 */
export function isReferencedDataItem(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_isReferencedDataItemRequest, {});
    const { fromJSON: fromRes } = serializer(_isReferencedDataItemResponse, {});
    function __isReferencedDataItem({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.IsReferencedDataItem',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/is-referenced',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __isReferencedDataItem.fromReq = fromReq;
    return __isReferencedDataItem;
}
/**
 * Inserts a reference in the specified field in an item in a collection.
 *
 *
 * A reference in `options.dataItemReference` specifies a referring item's ID, the field in which to insert the reference, and the ID of the referenced item.
 */
export function insertDataItemReference(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_insertDataItemReferenceRequest, {});
    const { fromJSON: fromRes } = serializer(_insertDataItemReferenceResponse, {});
    function __insertDataItemReference({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.InsertDataItemReference',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/insert-reference',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __insertDataItemReference.fromReq = fromReq;
    return __insertDataItemReference;
}
/** Removes the specified reference from the specified field. */
export function removeDataItemReference(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_removeDataItemReferenceRequest, {});
    const { fromJSON: fromRes } = serializer(_removeDataItemReferenceResponse, {});
    function __removeDataItemReference({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.RemoveDataItemReference',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/remove-reference',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __removeDataItemReference.fromReq = fromReq;
    return __removeDataItemReference;
}
/**
 * Inserts one or more references in the specified fields of items in a collection.
 *
 *
 * This endpoint adds one or more references to a collection.
 * Each new reference in `options.dataItemReferences` specifies a referring item's ID, the field in which to insert the reference, and the ID of the referenced item.
 */
export function bulkInsertDataItemReferences(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_bulkInsertDataItemReferencesRequest, {});
    const { fromJSON: fromRes } = serializer(_bulkInsertDataItemReferencesResponse, {});
    function __bulkInsertDataItemReferences({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.BulkInsertDataItemReferences',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/bulk/items/insert-references',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __bulkInsertDataItemReferences.fromReq = fromReq;
    return __bulkInsertDataItemReferences;
}
/** Removes one or more references. */
export function bulkRemoveDataItemReferences(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_bulkRemoveDataItemReferencesRequest, {});
    const { fromJSON: fromRes } = serializer(_bulkRemoveDataItemReferencesResponse, {});
    function __bulkRemoveDataItemReferences({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.BulkRemoveDataItemReferences',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/bulk/items/remove-references',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __bulkRemoveDataItemReferences.fromReq = fromReq;
    return __bulkRemoveDataItemReferences;
}
/**
 * Replaces references in a specified field of a specified data item.
 *
 *
 * This function replaces the existing reference or references contained in the field specified in `options.referringItemFieldName` within the data item specified in `options.referringItemId`.
 * The function removes existing references and in their place it adds references to the items specified in `options.newReferencedItemIds`.
 *
 * > **Note:** If you pass an empty array in `options.newReferencedItemIds`, all existing references are removed.
 */
export function replaceDataItemReferences(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_replaceDataItemReferencesRequest, {});
    const { fromJSON: fromRes } = serializer(_replaceDataItemReferencesResponse, {});
    function __replaceDataItemReferences({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.data.v2.data_item',
            method: 'POST',
            methodFqn: 'com.wixpress.cloud.data.api.data.DataItemService.ReplaceDataItemReferences',
            url: resolveComWixpressCloudDataApiDataDataItemServiceUrl({
                protoPath: '/v2/items/replace-references',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __replaceDataItemReferences.fromReq = fromReq;
    return __replaceDataItemReferences;
}
//# sourceMappingURL=data-v2-data-item.http.js.map