import type { HTMLTag, AlignmentParam, AlignType, FittingType, FileType, ImageQuality, ImageQualityData, ImageTransformFiltersOption, TransformType, UpscaleMethod, ImageDataAttributes } from '../types';
/**
 * image service api version
 */
declare const API_VERSION = "v1";
/**
the maximum retina factor
 */
declare const MAX_DEVICE_PIXEL_RATIO = 2;
/**
 site BG legacy max width x height
 */
declare const DSKTP_MAX_BG_SITE_LEGACY_WIDTH = 1920;
declare const DSKTP_MAX_BG_SITE_LEGACY_HEIGHT = 1920;
declare const MOBILE_MAX_BG_SITE_LEGACY_WIDTH = 1000;
declare const MOBILE_MAX_BG_SITE_LEGACY_HEIGHT = 1000;
/**
 * Enum string values of requested image fitting types
 * Note: TILE_HORIZONTAL, TILE_VERTICAL, FIT_AND_TILE are supported for legacy purposes but are not exposed
 * in the documentation because they should not be exposed for new features
 */
declare const fittingTypes: Record<string, FittingType>;
/**
 * Enum string values of image transform types as passed to the image service api
 */
declare const transformTypes: Record<string, TransformType>;
/**
 * Enum string values of requested image align types
 * @type {{CENTER: string, RIGHT: string, LEFT: string, TOP: string, BOTTOM: string, TOP_RIGHT: string, TOP_LEFT: string, BOTTOM_RIGHT: string, BOTTOM_LEFT: string}}
 */
declare const alignTypes: Record<string, AlignType>;
/**
 * Enum 9Grid alignment to focal point
 */
declare const ALIGN_TYPE_TO_FOCAL_POINT: {
    [x: string]: {
        x: number;
        y: number;
    };
};
/**
 * Enum string values of image align types as passed to the image service
 */
declare const alignTypesMap: Record<AlignType, AlignmentParam>;
/**
 * Enum string values of html tag used to construct the css or svg attributes
 *  @type {{BG: string, IMG: string, SVG: string}}
 */
declare const htmlTag: Record<string, HTMLTag>;
/**
 * Enum string values of upscale method
 *  @type {{DEFAULT: string, SUPER: string}}
 */
declare const upscaleMethods: Record<string, UpscaleMethod>;
/**
 *  api values of upscale method
 *  @type {{default: number, super: number}}
 */
declare const upscaleMethodsValues: {
    classic: number;
    super: number;
};
/**
 * default unsharp mask values
 *  @type {{radius: number, amount: number, threshold: number}}
 */
declare const defaultUSM: {
    radius: string;
    amount: string;
    threshold: string;
};
/**
 * default empty data
 */
declare const emptyData: ImageDataAttributes;
declare const SAFE_TRANSFORMED_AREA: number;
/**
 * super res machine learning upscale factor models -
 * @type {number[]}
 */
declare const SUPER_UPSCALE_MODELS: number[];
/**
 * image qualities
 */
declare const imageScaleDefaults: Record<ImageQuality, ImageQualityData>;
/**
 * image quality
 * @type {{HIGH: string, MEDIUM: string, LOW: string, TINY: string}}
 */
declare const imageQuality: Record<ImageQuality, ImageQuality>;
/**
 * image filters
 * @type {{CONTRAST: string, BRIGHTNESS: string, SATURATION: string, HUE: string, BLUR: string}}
 */
declare const imageFilters: Record<string, keyof ImageTransformFiltersOption>;
declare const fileType: Record<string, FileType>;
declare const supportedExtensions: FileType[];
export { alignTypes, alignTypesMap, transformTypes, fittingTypes, htmlTag, upscaleMethods, upscaleMethodsValues, defaultUSM, emptyData, imageQuality, imageFilters, imageScaleDefaults, fileType, supportedExtensions, DSKTP_MAX_BG_SITE_LEGACY_WIDTH, MOBILE_MAX_BG_SITE_LEGACY_WIDTH, DSKTP_MAX_BG_SITE_LEGACY_HEIGHT, MOBILE_MAX_BG_SITE_LEGACY_HEIGHT, SAFE_TRANSFORMED_AREA, SUPER_UPSCALE_MODELS, MAX_DEVICE_PIXEL_RATIO, ALIGN_TYPE_TO_FOCAL_POINT, API_VERSION, };
//# sourceMappingURL=imageServiceConstants.d.ts.map