import type { FittingType, Dimensions, ImageTransformSource } from '../types';
declare function getIsFakeTile(fittingType: string, src: ImageTransformSource, { width: targetWidth, height: targetHeight, }: {
    width: number;
    height: number;
}): boolean;
/**
 *
 * @param {FittingType}             fittingType      imageServicesTypes.fittingTypes
 * @param {ImageTransformSource}    src              source image
 * @param {Dimensions}              target           target container dimensions
 * @param {boolean}                 [isSEOBot=false] whether it is a render for a bot request
 * @returns {Dimensions} scaled dimensions
 */
declare function getScaledDimensions(fittingType: FittingType, src: ImageTransformSource, { width, height }: Dimensions, isSEOBot?: boolean): {
    width: number;
    height: number;
};
/**
 *
 * @param {FittingType} fittingType  imageServicesTypes.fittingTypes
 * @param {boolean} isFakeTile
 * @returns {string} fittingType
 */
declare function getConvertedFitting(fittingType: FittingType, isFakeTile: boolean): FittingType;
/**
 *
 * @param {ImageTransformSource}    src                 source image
 * @param {number || ''}            width
 * @param {number || ''}            height
 * @returns {Dimensions}    width, height
 */
declare function validateTargetDimensions(src: ImageTransformSource, { width, height }: {
    width?: number;
    height?: number;
}): {
    width: number;
    height: number;
};
/**
 *
 * @param {number} width
 * @param {FittingType} fittingType imageServicesTypes.fittingTypes
 * @param {boolean} isSEOBot
 * @return {number}
 */
declare function getBlurValue(width: number, fittingType: FittingType, isSEOBot?: boolean): 3 | 0 | 1 | 2;
/**
 *
 * @param {FittingType}                       fittingType
 * @param {ImageTransformSource}              src                  source image
 * @param {{width?: number; height?: number}} target               target element
 * @param {string}                            [alignment='center']
 * @returns {{img}, {container}}
 */
declare function getCSSOverrides(fittingType: FittingType, src: ImageTransformSource, target: {
    width?: number;
    height?: number;
}, alignment?: string): {
    img: {};
    container: {};
};
export { getBlurValue, getConvertedFitting, getCSSOverrides, getIsFakeTile, getScaledDimensions, validateTargetDimensions, };
//# sourceMappingURL=imagePlaceholderUtils.d.ts.map