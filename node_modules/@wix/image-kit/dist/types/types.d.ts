export type FittingType = 'fill' | 'fit' | 'stretch' | 'original_size' | 'tile' | 'legacy_fill' | 'tile_horizontal' | 'tile_vertical' | 'fit_and_tile' | 'legacy_strip_tile' | 'legacy_strip_tile_horizontal' | 'legacy_strip_tile_vertical' | 'legacy_strip_fill' | 'legacy_strip_fit' | 'legacy_strip_fit_and_tile' | 'legacy_strip_original_size' | 'actual_size' | 'fitWidth' | 'fitHeight' | 'full' | 'legacy_tile' | 'legacy_tile_horizontal' | 'legacy_tile_vertical' | 'legacy_normal';
export type AlignType = 'center' | 'top' | 'top_left' | 'top_right' | 'left' | 'right' | 'bottom' | 'bottom_left' | 'bottom_right';
export type HTMLTag = 'bg' | 'img' | 'svg';
export type UpscaleMethod = 'auto' | 'classic' | 'super';
export type TemplateUnsharpMask = {
    amount?: string;
    radius?: string;
    threshold?: string;
};
export type OptionUnsharpMask = {
    amount?: number;
    radius?: number;
    threshold?: number;
};
export type TransformType = 'fit' | 'fill' | 'fill_focal' | 'crop' | 'legacy_crop' | 'legacy_fill';
export type AlignmentParam = 'c' | 't' | 'tl' | 'tr' | 'b' | 'bl' | 'br' | 'l' | 'r';
export type ImageQuality = 'HIGH' | 'MEDIUM' | 'LOW' | 'TINY';
export type ImageQualityData = {
    size: number;
    quality: number;
    maxUpscale: number;
};
export type FileType = 'jpg' | 'jpeg' | 'jpe' | 'png' | 'webp' | 'wix_ico_mp' | 'wix_mp' | 'gif' | 'svg' | 'unrecognized';
export type ImageTransformData = {
    width: number;
    height: number;
    forceUSM: boolean;
    scaleFactor: number;
    cssUpscaleNeeded: boolean;
};
export type TransformCropPart = ImageTransformData & {
    transformType: TransformType[3];
    x: number;
    y: number;
    upscale: boolean;
};
export type TransformFitPart = ImageTransformData & {
    transformType: TransformType[0];
    alignment: AlignmentParam[0];
    upscale: boolean;
    upscaleMethodValue: number;
};
export type TransformFillPart = ImageTransformData & {
    transformType: TransformType[1];
    alignment: AlignmentParam;
    focalPointX?: number | string;
    focalPointY?: number | string;
    upscale: boolean;
    upscaleMethodValue: number;
};
export type TransformLegacyFitPart = {
    transformType: TransformType[0];
    width: number;
    height: number;
    upscale: boolean;
    forceUSM: boolean;
    scaleFactor: number;
    cssUpscaleNeeded: boolean;
};
export type TransformLegacyFillPart = {
    transformType: TransformType[5];
    width: number;
    height: number;
    alignment: AlignmentParam;
    upscale: boolean;
    forceUSM: boolean;
    scaleFactor: number;
    cssUpscaleNeeded: boolean;
};
export type TransformLegacyCropPart = {
    transformType: TransformType[4];
    width: number;
    height: number;
    alignment: AlignmentParam;
    upscale: boolean;
    forceUSM: boolean;
    scaleFactor: number;
    cssUpscaleNeeded: boolean;
};
export type ImageTransformSource = {
    id: string;
    width: number;
    height: number;
    name?: string;
    crop?: {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    focalPoint?: {
        x?: number;
        y?: number;
    };
};
export type ImagePlaceholderTransformTarget = {
    width?: number;
    height?: number;
    pixelAspectRatio?: number;
    alignment?: AlignType;
    htmlTag?: HTMLTag;
};
export type ImageTransformTarget = ImagePlaceholderTransformTarget & {
    width: number;
    height: number;
};
export type ImageDataAttributes = {
    uri?: string;
    srcset?: {
        dpr?: string[];
    };
    css?: {
        img?: {
            top?: number | string;
            bottom?: number | string;
            left?: number | string;
            right?: number | string;
            width?: string | number;
            height?: string | number;
            objectFit?: string;
        };
        container?: {
            backgroundSize?: string;
            backgroundRepeat?: string;
            backgroundPosition?: string;
        };
    };
    attr?: {
        img?: {
            x?: number;
            y?: number;
            width?: string;
            height?: string;
            preserveAspectRatio?: string;
        };
        container?: {};
    };
    transformed: boolean;
};
export type ImageTransformFiltersOption = {
    contrast?: number;
    brightness?: number;
    saturation?: number;
    hue?: number;
    blur?: number;
};
export type ImageTransformOptions = {
    filters?: ImageTransformFiltersOption;
    progressive?: boolean;
    unsharpMask?: OptionUnsharpMask;
    focalPoint?: {
        x: number;
        y: number;
    };
    name?: string;
    quality?: number;
    upscaleMethod?: UpscaleMethod;
    watermark?: string;
    isSEOBot?: boolean;
    baseHostURL?: string;
    preferredExtension?: string;
    autoEncode?: boolean;
    shouldLoadHQImage?: boolean;
    useSrcset?: boolean;
    hasAnimation?: boolean;
};
export type ImageTransformObjectPart = TransformCropPart | TransformFitPart | TransformFillPart | TransformLegacyFitPart | TransformLegacyFillPart | TransformLegacyCropPart;
export type ImageTransformObject = {
    parts: ImageTransformObjectPart[];
    fileName: string;
    fileExtension: string;
    fileType: string;
    fittingType: FittingType;
    preferredExtension: string;
    src: {
        id: string;
        width: number;
        height: number;
        isCropped: boolean;
    };
    focalPoint: {
        x?: number;
        y?: number;
    };
    devicePixelRatio: number;
    quality: number;
    upscaleMethod: UpscaleMethod;
    progressive: boolean;
    watermark?: string;
    autoEncode?: boolean;
    unsharpMask?: TemplateUnsharpMask;
    filters: {
        blur?: number;
    };
    transformed: boolean;
};
export type Dimensions = {
    width: number;
    height: number;
};
export type Point = {
    x: number;
    y: number;
};
//# sourceMappingURL=types.d.ts.map