{"version":3,"names":["template","strings","keys","values","dict","length","result","forEach","key","i","value","Number","isInteger","push","join","last","array"],"sources":["../../../src/helpers/utils.ts"],"sourcesContent":["/**\n * Simple templates.\n * Receives a string with es6 ${...} style template arguments and returns a transformed string.\n * @param string\n * @returns {Function}\n */\n\nfunction template(strings: TemplateStringsArray, ...keys: string[]) {\n  return function (...values: Record<string, any>[]) {\n    const dict = values[values.length - 1] || {};\n    const result = [strings[0]];\n    keys.forEach(function (key, i) {\n      const value = Number.isInteger(key) ? values[key as any] : dict[key];\n      result.push(value, strings[i + 1]);\n    });\n    return result.join('');\n  };\n}\n\n/**\n * Get the last element in an array\n * @param array\n * @returns {*}\n */\nfunction last(array: any[]) {\n  return array[array.length - 1];\n}\n\nexport { last, template };\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQA,CAACC,OAA6B,EAAE,GAAGC,IAAc,EAAE;EAClE,OAAO,UAAU,GAAGC,MAA6B,EAAE;IACjD,MAAMC,IAAI,GAAGD,MAAM,CAACA,MAAM,CAACE,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;IAC5C,MAAMC,MAAM,GAAG,CAACL,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3BC,IAAI,CAACK,OAAO,CAAC,UAAUC,GAAG,EAAEC,CAAC,EAAE;MAC7B,MAAMC,KAAK,GAAGC,MAAM,CAACC,SAAS,CAACJ,GAAG,CAAC,GAAGL,MAAM,CAACK,GAAG,CAAQ,GAAGJ,IAAI,CAACI,GAAG,CAAC;MACpEF,MAAM,CAACO,IAAI,CAACH,KAAK,EAAET,OAAO,CAACQ,CAAC,GAAG,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC;IACF,OAAOH,MAAM,CAACQ,IAAI,CAAC,EAAE,CAAC;EACxB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAACC,KAAY,EAAE;EAC1B,OAAOA,KAAK,CAACA,KAAK,CAACX,MAAM,GAAG,CAAC,CAAC;AAChC"}