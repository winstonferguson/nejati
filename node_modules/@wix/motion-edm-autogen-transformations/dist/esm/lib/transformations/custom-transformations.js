import { __assign } from "tslib";
import { isJsonPathExpression, reduceTransformation, runCustomFunctionCallExpression, } from '@wix/motion-edm-autogen-transformations-core';
import { JSONPath } from 'jsonpath-plus';
import { get, isPlainObject, omit, pickBy, set } from 'lodash';
var getValueAtPath = function (json, path) { return JSONPath({ path: path, json: json, wrap: false }); };
var getValueToSpread = function (_a) {
    var sourceObject = _a.sourceObject, expressionOfValueToSpread = _a.expressionOfValueToSpread, spreadOperatorSiblingKeys = _a.spreadOperatorSiblingKeys;
    // eslint-disable-next-line no-use-before-define
    var valueToSpread = transform(sourceObject, expressionOfValueToSpread);
    return isPlainObject(valueToSpread)
        ? pickBy(valueToSpread, function (_, k) { return !spreadOperatorSiblingKeys.includes(k); })
        : {};
};
var resolveArgumentValues = function (argumentExpressions, sourceObject) {
    return argumentExpressions.map(function (expression) {
        return isJsonPathExpression(expression)
            ? getValueAtPath(sourceObject, expression)
            : expression;
    });
};
var transform = function (sourceObject, transformation, customFunctions) {
    if (customFunctions === void 0) { customFunctions = undefined; }
    return reduceTransformation(transformation, {
        visitors: {
            TopLevelSimpleTransformationExpression: function (expression) {
                return getValueAtPath(sourceObject, expression);
            },
            TopLevelCustomFunctionExpression: function (functionName, argumentExpressions) {
                return runCustomFunctionCallExpression({
                    customFunctions: customFunctions,
                    functionName: functionName,
                    argumentValues: resolveArgumentValues(argumentExpressions, sourceObject),
                    transformationParentPath: '',
                });
            },
            NestedSpreadExpression: function (acc, path, expressionOfValueToSpread, spreadOperatorSiblingKeys) {
                var valueToSpread = getValueToSpread({
                    sourceObject: sourceObject,
                    expressionOfValueToSpread: expressionOfValueToSpread,
                    spreadOperatorSiblingKeys: spreadOperatorSiblingKeys,
                });
                var existing = get(acc, path, {});
                set(acc, path, __assign(__assign({}, existing), valueToSpread));
            },
            TopLevelSpreadExpression: function (acc, expressionOfValueToSpread, spreadOperatorSiblingKeys) {
                var valueToSpread = getValueToSpread({
                    sourceObject: sourceObject,
                    expressionOfValueToSpread: expressionOfValueToSpread,
                    spreadOperatorSiblingKeys: spreadOperatorSiblingKeys,
                });
                Object.keys(valueToSpread).forEach(function (key) {
                    acc[key] = valueToSpread[key];
                });
            },
            CustomFunctionExpression: function (acc, path, functionName, argumentExpressions) {
                var customFunctionResult = runCustomFunctionCallExpression({
                    customFunctions: customFunctions,
                    functionName: functionName,
                    argumentValues: resolveArgumentValues(argumentExpressions, sourceObject),
                    transformationParentPath: path,
                });
                set(acc, path, customFunctionResult);
            },
            NestedSimpleTransformationExpression: function (acc, path, simpleTransformationExpression) {
                set(acc, path, getValueAtPath(sourceObject, simpleTransformationExpression));
            },
            TopLevelMapArrayItems: function (sourceArrayExpression, itemTransformation) {
                var source = transform(sourceObject, sourceArrayExpression);
                return Array.isArray(source)
                    ? source.map(function (item) {
                        return transform(item, itemTransformation, customFunctions);
                    })
                    : source;
            },
            MapArrayItems: function (acc, path, sourceArrayExpression, itemTransformation) {
                var source = transform(sourceObject, sourceArrayExpression);
                var transformedValue = Array.isArray(source)
                    ? source.map(function (item) {
                        return transform(item, itemTransformation, customFunctions);
                    })
                    : source;
                set(acc, path, transformedValue);
            },
            TopLevelOmit: function (sourcePathExpression, fieldsToOmit) {
                var source = transform(sourceObject, sourcePathExpression);
                if (source === undefined) {
                    return undefined;
                }
                return isPlainObject(source)
                    ? omit(source, fieldsToOmit)
                    : sourceObject;
            },
            NestedOmit: function (accumulator, path, sourcePathExpression, fieldsToOmit) {
                var source = transform(sourceObject, sourcePathExpression);
                if (source === undefined) {
                    set(accumulator, path, undefined);
                    return;
                }
                var value = isPlainObject(source)
                    ? omit(source, fieldsToOmit)
                    : source;
                set(accumulator, path, value);
            },
            NestedConstantValue: function (_a) {
                var accumulator = _a.accumulator, path = _a.path, value = _a.value;
                set(accumulator, path, value);
            },
        },
        accumulator: {},
    });
};
var transformToRequestMessage = function (sourceObject, transformation, customFunctions) {
    if (customFunctions === void 0) { customFunctions = undefined; }
    return transform(sourceObject, transformation, customFunctions) || {};
};
var transformResponseMessage = function (sourceObject, transformation, customFunctions) {
    if (customFunctions === void 0) { customFunctions = undefined; }
    return transform(sourceObject, transformation, customFunctions);
};
export { transformResponseMessage, transformToRequestMessage };
//# sourceMappingURL=custom-transformations.js.map