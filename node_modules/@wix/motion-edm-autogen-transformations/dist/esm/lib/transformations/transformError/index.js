import { constantCase } from 'constant-case';
import { getReasonPhrase } from 'http-status-codes';
import yaml from 'js-yaml';
import _ from 'lodash';
import { violationsWithRenamedFields } from './violationsWithRenamedFields';
var get = _.get, has = _.has, forOwn = _.forOwn, isEqual = _.isEqual;
var UNKNOWN_STATUS_CODE_TEST = 'Unknown';
var MAX_YAML_LINE_WIDTH = 1000;
var CANCELLED_STATUS_CODE = 499;
var CANCELLED_STATUS_CODE_STRING = CANCELLED_STATUS_CODE.toString();
var CANCELLED_STATUS_TEXT = 'Client Closed Request';
var toYamlString = function (object) {
    return yaml.dump(object, { lineWidth: MAX_YAML_LINE_WIDTH }).replace(/\n$/, '');
};
var ambassadorSafeStatusText = function (_maybeHttpStatus) {
    if (_maybeHttpStatus === CANCELLED_STATUS_CODE ||
        _maybeHttpStatus === CANCELLED_STATUS_CODE_STRING) {
        return CANCELLED_STATUS_TEXT;
    }
    try {
        return getReasonPhrase(_maybeHttpStatus);
    }
    catch (error) {
        return UNKNOWN_STATUS_CODE_TEST;
    }
};
var buildError = function (_a) {
    var message = _a.message, _b = _a.extraProperties, extraProperties = _b === void 0 ? {} : _b;
    var error = new Error(message);
    forOwn(extraProperties, function (value, key) {
        if (value !== undefined) {
            error[key] = value;
        }
    });
    return error;
};
var isClientError = function (code) { return code >= 400 && code < 500; };
var isValidationError = function (ambassadorHTTPError) {
    return has(ambassadorHTTPError, 'response.details.validationError');
};
var isApplicationError = function (ambassadorHTTPError) {
    return has(ambassadorHTTPError, 'response.details.applicationError') ||
        isClientError(ambassadorHTTPError.httpStatus);
};
var buildValidationError = function (ambassadorHTTPError, transformation, argumentNames) {
    var fieldViolations = ambassadorHTTPError.response.details.validationError.fieldViolations;
    var transformedFieldViolations = _(violationsWithRenamedFields({
        transformation: transformation,
        fieldViolations: fieldViolations,
        argumentNames: argumentNames,
    }))
        .sortBy('field')
        .value();
    var message = "INVALID_ARGUMENT: ".concat(transformedFieldViolations
        .map(function (_a) {
        var field = _a.field, description = _a.description;
        return "\"".concat(field, "\" ").concat(description);
    })
        .join(', '));
    var details = {
        validationError: { fieldViolations: transformedFieldViolations },
    };
    return buildError({
        message: toYamlString({ message: message, details: details }),
        extraProperties: { details: details },
    });
};
var buildApplicationError = function (ambassadorHTTPError) {
    var statusText = ambassadorSafeStatusText(ambassadorHTTPError.httpStatus);
    var hasEmptyDetails = isEqual(get(ambassadorHTTPError, 'response.details', {}), {});
    if (hasEmptyDetails) {
        var details_1 = {
            applicationError: {
                description: statusText,
                code: constantCase(statusText),
                data: {},
            },
        };
        return buildError({
            message: toYamlString({
                message: get(ambassadorHTTPError, 'response.message', statusText),
                details: details_1,
            }),
            extraProperties: { details: details_1 },
        });
    }
    var message = get(ambassadorHTTPError, 'response.message', statusText);
    var description = get(ambassadorHTTPError, 'response.details.applicationError.description', statusText);
    var code = get(ambassadorHTTPError, 'response.details.applicationError.code', constantCase(statusText));
    var data = get(ambassadorHTTPError, 'response.details.applicationError.data', {});
    var combinedMessage = message === description ? message : "".concat(message, ": ").concat(description);
    var details = {
        applicationError: {
            description: description,
            code: code,
            data: data,
        },
    };
    return buildError({
        message: toYamlString({ message: combinedMessage, details: details }),
        extraProperties: { details: details },
    });
};
var buildSystemError = function (ambassadorHTTPError) {
    var code = constantCase(ambassadorSafeStatusText(ambassadorHTTPError.httpStatus));
    var message = ambassadorHTTPError.requestId
        ? "System error occurred, request-id: ".concat(ambassadorHTTPError.requestId)
        : 'System error occurred';
    return buildError({
        message: message,
        extraProperties: {
            requestId: ambassadorHTTPError.requestId,
            code: code,
        },
    });
};
// See https://github.com/wix-private/ambassador/blob/master/src/runtime/http.ts#L10
var transformError = function (ambassadorHTTPError, transformation, argumentNames) {
    if (transformation === void 0) { transformation = undefined; }
    if (argumentNames === void 0) { argumentNames = undefined; }
    switch (true) {
        case isValidationError(ambassadorHTTPError):
            return buildValidationError(ambassadorHTTPError, transformation, argumentNames);
        case isApplicationError(ambassadorHTTPError):
            return buildApplicationError(ambassadorHTTPError);
        default:
            return buildSystemError(ambassadorHTTPError);
    }
};
export { transformError };
//# sourceMappingURL=index.js.map