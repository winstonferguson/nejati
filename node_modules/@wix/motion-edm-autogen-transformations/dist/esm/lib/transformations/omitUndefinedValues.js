import { isEmpty, isPlainObject, transform } from 'lodash';
var isEmptyObject = function (maybeObject) {
    return isPlainObject(maybeObject) && isEmpty(maybeObject);
};
var isNonEmptyObject = function (maybeObject) {
    return isPlainObject(maybeObject) && !isEmpty(maybeObject);
};
var isDefinedNonObject = function (value) {
    return value !== undefined && !isPlainObject(value);
};
var omitUndefinedValuesRecursive = function (maybeObject) {
    return transform(maybeObject, function (acc, value, key) {
        if (isDefinedNonObject(value) || isEmptyObject(value)) {
            // @ts-expect-error
            acc[key] = value;
        }
        else {
            var withoutUndefinedValues = omitUndefinedValuesRecursive(value);
            if (isNonEmptyObject(withoutUndefinedValues)) {
                // @ts-expect-error
                acc[key] = withoutUndefinedValues;
            }
        }
        return acc;
    });
};
var omitUndefinedValues = function (obj) { return omitUndefinedValuesRecursive(obj); };
export { omitUndefinedValues };
//# sourceMappingURL=omitUndefinedValues.js.map