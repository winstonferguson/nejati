import { __assign, __makeTemplateObject } from "tslib";
import { anObject, aString } from '@wix/motion-runtime-test-context';
import { set, times } from 'lodash';
import { transformResponseMessage, transformToRequestMessage, } from '../../../lib/transformations/custom-transformations';
describe('transformation contract tests', function () {
    var sourceObjectPath = 'a.b.c';
    describe.each(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    transformationFunction       | expression                    | sourceFactory                     | undefinedFallback\n    ", " | ", " | ", " | ", "\n    ", "  | ", "    | ", "   | ", "\n  "], ["\n    transformationFunction       | expression                    | sourceFactory                     | undefinedFallback\n    ", " | ", " | ", " | ", "\n    ", "  | ", "    | ", "   | ", "\n  "])), transformToRequestMessage, "$[0].".concat(sourceObjectPath), function (sourceValue) { return [sourceValue]; }, {}, transformResponseMessage, "$.".concat(sourceObjectPath), function (sourceValue) { return sourceValue; }, undefined)('$transformationFunction.name - omitting fields', function (_a) {
        var transformationFunction = _a.transformationFunction, expression = _a.expression, sourceFactory = _a.sourceFactory, undefinedFallback = _a.undefinedFallback;
        var _b = times(2, function () { return anObject(); }), objectToKeep = _b[0], objectToOmit = _b[1];
        var fieldsToOmit = Object.keys(objectToOmit);
        var source = sourceFactory(set({}, sourceObjectPath, __assign(__assign({}, objectToKeep), objectToOmit)));
        var topLevelOmitTransformation = {
            '@source': expression,
            '@omit': fieldsToOmit,
        };
        var nestedPathOmitTransformation = {
            d: { e: { f: topLevelOmitTransformation } },
        };
        test('omits fields from a source path as a top-level transformation', function () {
            expect(transformationFunction(source, topLevelOmitTransformation)).toStrictEqual(objectToKeep);
        });
        test('omits fields from a source path as a nested transformation', function () {
            expect(transformationFunction(source, nestedPathOmitTransformation)).toStrictEqual({
                d: {
                    e: {
                        f: objectToKeep,
                    },
                },
            });
        });
        test('supports complex transformation on the @source part', function () {
            var transformation = {
                '@source': { '*': expression },
                '@omit': fieldsToOmit,
            };
            expect(transformationFunction(source, transformation)).toStrictEqual(objectToKeep);
        });
        describe('invalid inputs', function () {
            var nonObject = aString();
            var objectWithNonexistingSourcePath = { x: { y: { z: 1 } } };
            var nonObjectSource = set({}, sourceObjectPath, nonObject);
            test.each(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n          invalidSource                                     | description           | expected\n          ", " | ", "   | ", "\n          ", "                 | ", " | ", "\n        "], ["\n          invalidSource                                     | description           | expected\n          ", " | ", "   | ", "\n          ", "                 | ", " | ", "\n        "])), sourceFactory(objectWithNonexistingSourcePath), 'does not exist', undefinedFallback, sourceFactory(nonObjectSource), 'is not an object', sourceFactory(nonObjectSource))('handles a top-level object to omit that $description', function (_a) {
                var invalidSource = _a.invalidSource, expected = _a.expected;
                expect(transformationFunction(invalidSource, topLevelOmitTransformation)).toStrictEqual(expected);
            });
            test.each(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n          rawSource                          | description           | expected\n          ", " | ", "   | ", "\n          ", "                 | ", " | ", "\n        "], ["\n          rawSource                          | description           | expected\n          ", " | ", "   | ", "\n          ", "                 | ", " | ", "\n        "])), objectWithNonexistingSourcePath, 'does not exist', undefined, nonObjectSource, 'is not an object', nonObject)('does nothing when the nested-path object to omit from $description', function (_a) {
                var rawSource = _a.rawSource, expected = _a.expected;
                var invalidSource = sourceFactory(rawSource);
                expect(transformationFunction(invalidSource, nestedPathOmitTransformation)).toStrictEqual({
                    d: { e: { f: expected } },
                });
            });
        });
    });
    describe('spread operator', function () {
        test.each(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n      transformationFunction       | expression                    | sourceFactory\n      ", " | ", " | ", "\n      ", "  | ", "    | ", "\n    "], ["\n      transformationFunction       | expression                    | sourceFactory\n      ", " | ", " | ", "\n      ", "  | ", "    | ", "\n    "])), transformToRequestMessage, "$[0].".concat(sourceObjectPath), function (sourceValue) { return [sourceValue]; }, transformResponseMessage, "$.".concat(sourceObjectPath), function (sourceValue) { return sourceValue; })('$transformationFunction.name - supports complex expressions', function (_a) {
            var _b, _c;
            var transformationFunction = _a.transformationFunction, sourceFactory = _a.sourceFactory, expression = _a.expression;
            var _d = times(4, function () { return aString(); }), propertyToOmit = _d[0], valueToOmit = _d[1], propertyToKeep = _d[2], valueToKeep = _d[3];
            var sourceValue = set({}, sourceObjectPath, (_b = {},
                _b[propertyToOmit] = valueToOmit,
                _b[propertyToKeep] = valueToKeep,
                _b));
            var source = sourceFactory(sourceValue);
            var transformation = {
                '*': {
                    '@source': expression,
                    '@omit': [propertyToOmit],
                },
            };
            expect(transformationFunction(source, transformation)).toStrictEqual((_c = {},
                _c[propertyToKeep] = valueToKeep,
                _c));
        });
        /* eslint-disable max-len */
        test.each(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n      transformationFunction       | transformation                       | source                                     | expectedFactory\n      ", " | ", "       | ", "                 | ", "\n      ", "  | ", " | ", " | ", "\n    "], ["\n      transformationFunction       | transformation                       | source                                     | expectedFactory\n      ", " | ", "       | ", "                 | ", "\n      ", "  | ", " | ", " | ", "\n    "])), transformToRequestMessage, { id: '$[0]', '*': '$[1]' }, [aString(), anObject()], function (source) { return (__assign({ id: source[0] }, source[1])); }, transformResponseMessage, { id: '$.id', '*': '$.resource' }, { id: aString(), resource: anObject() }, function (source) { return (__assign({ id: source.id }, source.resource)); })(
        /* eslint-enable max-len */
        '$transformationFunction.name - flattens argument object keys onto its parent object', function (_a) {
            var transformationFunction = _a.transformationFunction, transformation = _a.transformation, source = _a.source, expectedFactory = _a.expectedFactory;
            expect(transformationFunction(source, transformation)).toStrictEqual(expectedFactory(source));
        });
        /* eslint-disable max-len */
        test.each(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n      transformationFunction       | transformation                                        | source                                                            | expectedFactory\n      ", " | ", "              | ", "                            | ", "\n      ", "  | ", " | ", " | ", "\n    "], ["\n      transformationFunction       | transformation                                        | source                                                            | expectedFactory\n      ", " | ", "              | ", "                            | ", "\n      ", "  | ", " | ", " | ", "\n    "])), transformToRequestMessage, { id: '$[0]', '*': ['$[1]', '$[2]'] }, [aString(), anObject(), anObject()], function (source) { return (__assign(__assign({ id: source[0] }, source[1]), source[2])); }, transformResponseMessage, { id: '$.id', '*': ['$.resource', '$.resource2'] }, { id: aString(), resource: anObject(), resource2: anObject() }, function (source) { return (__assign(__assign({ id: source.id }, source.resource), source.resource2)); })(
        /* eslint-enable max-len */
        '$transformationFunction.name - flattens top-level argument object-keys onto their parent object', function (_a) {
            var transformationFunction = _a.transformationFunction, transformation = _a.transformation, source = _a.source, expectedFactory = _a.expectedFactory;
            expect(transformationFunction(source, transformation)).toStrictEqual(expectedFactory(source));
        });
        /* eslint-disable max-len */
        test.each(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n      transformationFunction       | transformation                                               | source                                                            | expectedFactory\n      ", " | ", "              | ", "                            | ", "\n      ", "  | ", " | ", " | ", "\n    "], ["\n      transformationFunction       | transformation                                               | source                                                            | expectedFactory\n      ", " | ", "              | ", "                            | ", "\n      ", "  | ", " | ", " | ", "\n    "])), transformToRequestMessage, { id: '$[0]', b: { '*': ['$[1]', '$[2]'] } }, [aString(), anObject(), anObject()], function (source) { return ({ id: source[0], b: __assign(__assign({}, source[1]), source[2]) }); }, transformResponseMessage, { id: '$.id', b: { '*': ['$.resource', '$.resource2'] } }, { id: aString(), resource: anObject(), resource2: anObject() }, function (source) { return ({ id: source.id, b: __assign(__assign({}, source.resource), source.resource2) }); })(
        /* eslint-enable max-len */
        '$transformationFunction.name - flattens nested argument object-keys onto their parent object', function (_a) {
            var transformationFunction = _a.transformationFunction, transformation = _a.transformation, source = _a.source, expectedFactory = _a.expectedFactory;
            expect(transformationFunction(source, transformation)).toStrictEqual(expectedFactory(source));
        });
        describe('siblings override', function () {
            var _a;
            var keyThatShouldNotAppearInTransformed = aString();
            var someValue = aString();
            var sourceBase = {
                a: {
                    someValue: someValue,
                    b: (_a = {},
                        _a[keyThatShouldNotAppearInTransformed] = 2,
                        _a),
                },
            };
            /* eslint-disable max-len */
            test.each(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n        transformationFunction       | transformation                                                                       | source\n        ", " | ", " | ", "\n        ", "  | ", "       | ", "\n      "], ["\n        transformationFunction       | transformation                                                                       | source\n        ", " | ", " | ", "\n        ", "  | ", "       | ", "\n      "])), transformToRequestMessage, { '*': '$[0].a', b: { newC: "$[0].a.b.".concat(keyThatShouldNotAppearInTransformed) } }, [sourceBase], transformResponseMessage, { '*': '$.a', b: { newC: "$.a.b.".concat(keyThatShouldNotAppearInTransformed) } }, sourceBase)('$transformationFunction.name - does not override sibling properties at the spread target', function (_a) {
                /* eslint-enable max-len */
                var transformationFunction = _a.transformationFunction, transformation = _a.transformation, source = _a.source;
                expect(transformationFunction(source, transformation)).toStrictEqual({
                    someValue: someValue,
                    b: {
                        newC: 2,
                    },
                });
            });
            /* eslint-disable max-len */
            test.each(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n        transformationFunction       | transformation                                                                                     | source\n        ", " | ", " | ", "\n        ", "  | ", "       | ", "\n      "], ["\n        transformationFunction       | transformation                                                                                     | source\n        ", " | ", " | ", "\n        ", "  | ", "       | ", "\n      "])), transformToRequestMessage, { topLevel: { '*': '$[0].a', b: { newC: "$[0].a.b.".concat(keyThatShouldNotAppearInTransformed) } } }, [sourceBase], transformResponseMessage, { topLevel: { '*': '$.a', b: { newC: "$.a.b.".concat(keyThatShouldNotAppearInTransformed) } } }, sourceBase)('$transformationFunction.name - does not override nested sibling properties at the spread target', function (_a) {
                /* eslint-enable max-len */
                var transformationFunction = _a.transformationFunction, transformation = _a.transformation, source = _a.source;
                expect(transformationFunction(source, transformation)).toStrictEqual({
                    topLevel: {
                        someValue: someValue,
                        b: {
                            newC: 2,
                        },
                    },
                });
            });
        });
        describe('invalid inputs', function () {
            /* eslint-disable max-len */
            test.each(templateObject_10 || (templateObject_10 = __makeTemplateObject(["\n        transformationFunction       | transformation                       | source               | expectedFactory\n        ", " | ", "       | ", "       | ", "\n        ", "  | ", " | ", " | ", "\n      "], ["\n        transformationFunction       | transformation                       | source               | expectedFactory\n        ", " | ", "       | ", "       | ", "\n        ", "  | ", " | ", " | ", "\n      "])), transformToRequestMessage, { id: '$[0]', '*': '$[1]' }, [aString()], function (source) { return ({ id: source[0] }); }, transformResponseMessage, { id: '$.id', '*': '$.resource' }, { id: aString() }, function (source) { return ({ id: source.id }); })(
            /* eslint-enable max-len */
            '$transformationFunction.name - passes the input as is when the value to spread does not exist', function (_a) {
                var transformationFunction = _a.transformationFunction, transformation = _a.transformation, source = _a.source, expectedFactory = _a.expectedFactory;
                expect(transformationFunction(source, transformation)).toStrictEqual(expectedFactory(source));
            });
            /* eslint-disable max-len */
            test.each(templateObject_11 || (templateObject_11 = __makeTemplateObject(["\n        transformationFunction       | transformation                       | source                                    | expectedFactory\n        ", " | ", "       | ", "                 | ", "\n        ", "  | ", " | ", " | ", "\n      "], ["\n        transformationFunction       | transformation                       | source                                    | expectedFactory\n        ", " | ", "       | ", "                 | ", "\n        ", "  | ", " | ", " | ", "\n      "])), transformToRequestMessage, { id: '$[0]', '*': '$[1]' }, [aString(), aString()], function (source) { return ({ id: source[0] }); }, transformResponseMessage, { id: '$.id', '*': '$.resource' }, { id: aString(), resource: aString() }, function (source) { return ({ id: source.id }); })(
            /* eslint-enable max-len */
            '$transformationFunction.name - does nothing when the value to spread is not an object', function (_a) {
                var transformationFunction = _a.transformationFunction, transformation = _a.transformation, source = _a.source, expectedFactory = _a.expectedFactory;
                expect(transformationFunction(source, transformation)).toStrictEqual(expectedFactory(source));
            });
        });
    });
    describe.each(templateObject_12 || (templateObject_12 = __makeTemplateObject(["\n    transformationFunction       | idJsonPath | sourceFactory\n    ", " | ", "  | ", "\n    ", "  | ", "  | ", "\n  "], ["\n    transformationFunction       | idJsonPath | sourceFactory\n    ", " | ", "  | ", "\n    ", "  | ", "  | ", "\n  "])), transformToRequestMessage, '$[0]', function (id) { return [id]; }, transformResponseMessage, '$.id', function (id) { return ({ id: id }); })('$transformationFunction.name - custom functions', function (_a) {
        var transformationFunction = _a.transformationFunction, idJsonPath = _a.idJsonPath, sourceFactory = _a.sourceFactory;
        var id = aString();
        var source = sourceFactory(id);
        var constantArgumentExpression = aString();
        var functionCallSimpleTransformation = "#someCustomFunction(".concat(idJsonPath, ", ").concat(constantArgumentExpression, ")");
        var transformation = { id: functionCallSimpleTransformation };
        var someCustomFunction = function (s1, s2) { return "".concat([s1, s1].join('>>>'), "___").concat(s2); };
        test('are applied when transforming using complex mapping', function () {
            var customFunctions = { someCustomFunction: someCustomFunction };
            expect(transformationFunction(source, transformation, customFunctions)).toStrictEqual({
                id: "".concat(id, ">>>").concat(id, "___").concat(constantArgumentExpression),
            });
        });
        test('are applied when transforming using simple mapping', function () {
            var customFunctions = { someCustomFunction: someCustomFunction };
            expect(transformationFunction(source, functionCallSimpleTransformation, customFunctions)).toStrictEqual("".concat(id, ">>>").concat(id, "___").concat(constantArgumentExpression));
        });
        test('throws when the function is not recognized', function () {
            var customFunctions = {};
            expect(function () {
                return transformationFunction(source, transformation, customFunctions);
            }).toThrow("unrecognized custom function \"someCustomFunction\"");
        });
        test('throws an error when the function call throws an error', function () {
            var nestedPathTransformation = {
                some: { nested: { path: functionCallSimpleTransformation } },
            };
            var customFunctions = {
                someCustomFunction: function () {
                    throw new Error('Something went wrong in the custom function');
                },
            };
            var t = function () {
                return transformationFunction(source, nestedPathTransformation, customFunctions);
            };
            expect(t).toThrow(Error);
            expect(t).toThrow(/Transforming some.nested.path failed, #someCustomFunction threw: "Something went wrong in the custom function" for arguments: +./);
        });
    });
    describe('array items transformation', function () {
        var transformationPath = 'd.e.f';
        var nonArrayPath = 'x.y.z';
        var nonArrayPathValue = aString();
        var validSource = set({}, sourceObjectPath, [
            { aaa: 555, bbb: 6 },
            { aaa: 777, bbb: 8 },
        ]);
        var sourceBase = set(validSource, "".concat(sourceObjectPath, ".").concat(nonArrayPath), nonArrayPathValue);
        describe.each(templateObject_13 || (templateObject_13 = __makeTemplateObject(["\n      transformationFunction       | rootPathExpression            | source          | expectedForNonExistingPath\n      ", " | ", " | ", " | ", "\n      ", "  | ", "    | ", "   | ", "\n    "], ["\n      transformationFunction       | rootPathExpression            | source          | expectedForNonExistingPath\n      ", " | ", " | ", " | ", "\n      ", "  | ", "    | ", "   | ", "\n    "])), transformToRequestMessage, "$[0].".concat(sourceObjectPath), [sourceBase], {}, transformResponseMessage, "$.".concat(sourceObjectPath), sourceBase, undefined)('$transformationFunction.name', function (_a) {
            var transformationFunction = _a.transformationFunction, rootPathExpression = _a.rootPathExpression, source = _a.source, expectedForNonExistingPath = _a.expectedForNonExistingPath;
            test('maps each item from the source object to a new array as a top-level transformation', function () {
                var transformation = {
                    '@path': rootPathExpression,
                    '@itemTransformation': '$.aaa',
                };
                expect(transformationFunction(source, transformation)).toStrictEqual([
                    555, 777,
                ]);
            });
            test('maps each item from the source object to a new array on a nested transformation', function () {
                var transformation = set({}, transformationPath, {
                    '@path': rootPathExpression,
                    '@itemTransformation': '$.aaa',
                });
                expect(transformationFunction(source, transformation)).toStrictEqual({
                    d: {
                        e: {
                            f: [555, 777],
                        },
                    },
                });
            });
            test('supports custom functions applied on items - top-level', function () {
                var transformation = {
                    '@path': rootPathExpression,
                    '@itemTransformation': '#addOne($.aaa)',
                };
                var transformationResult = transformationFunction(source, transformation, { addOne: function (x) { return x + 1; } });
                expect(transformationResult).toStrictEqual([556, 778]);
            });
            test('supports custom functions applied on items', function () {
                var transformation = set({}, transformationPath, {
                    '@path': rootPathExpression,
                    '@itemTransformation': '#addOne($.aaa)',
                });
                var transformationResult = transformationFunction(source, transformation, { addOne: function (x) { return x + 1; } });
                expect(transformationResult).toStrictEqual({
                    d: {
                        e: {
                            f: [556, 778],
                        },
                    },
                });
            });
            describe('invalid inputs', function () {
                test.each(templateObject_14 || (templateObject_14 = __makeTemplateObject(["\n            path              | expected                      | description\n            ", " | ", " | ", "\n            ", "   | ", "          | ", "\n          "], ["\n            path              | expected                      | description\n            ", " | ", " | ", "\n            ", "   | ", "          | ", "\n          "])), 'doesNotExist', expectedForNonExistingPath, 'does not exist', nonArrayPath, nonArrayPathValue, 'is not an array')('does not fail when a top-level path $description', function (_a) {
                    var path = _a.path, expected = _a.expected;
                    var transformation = {
                        '@path': "".concat(rootPathExpression, ".").concat(path),
                        '@itemTransformation': '$.aaa',
                    };
                    expect(transformationFunction(source, transformation)).toStrictEqual(expected);
                });
                test.each(templateObject_15 || (templateObject_15 = __makeTemplateObject(["\n            path              | expected             | description\n            ", " | ", "         | ", "\n            ", "   | ", " | ", "\n          "], ["\n            path              | expected             | description\n            ", " | ", "         | ", "\n            ", "   | ", " | ", "\n          "])), 'doesNotExist', undefined, 'does not exist', nonArrayPath, nonArrayPathValue, 'is not an array')('does not fail when a nested path $description', function (_a) {
                    var path = _a.path, expected = _a.expected;
                    var transformation = set({}, transformationPath, {
                        '@path': "".concat(rootPathExpression, ".").concat(path),
                        '@itemTransformation': '$.aaa',
                    });
                    expect(transformationFunction(source, transformation)).toStrictEqual({
                        d: {
                            e: {
                                f: expected,
                            },
                        },
                    });
                });
            });
        });
    });
    describe('constant transformation', function () {
        describe.each(templateObject_16 || (templateObject_16 = __makeTemplateObject(["\n      transformationFunction       | expression                    | sourceFactory\n      ", " | ", " | ", "\n      ", "  | ", "    | ", "\n    "], ["\n      transformationFunction       | expression                    | sourceFactory\n      ", " | ", " | ", "\n      ", "  | ", "    | ", "\n    "])), transformToRequestMessage, "$[0].".concat(sourceObjectPath), function (sourceValue) { return [sourceValue]; }, transformResponseMessage, "$.".concat(sourceObjectPath), function (sourceValue) { return sourceValue; })('$transformationFunction.name - omitting fields', function (_a) {
            var transformationFunction = _a.transformationFunction, expression = _a.expression, sourceFactory = _a.sourceFactory;
            var sourceValue = aString();
            var source = sourceFactory(set({}, sourceObjectPath, sourceValue));
            var nestedConstantTransformation = {
                d: {
                    e: {
                        f: expression,
                        g: {
                            '@constant': {
                                something: '$.value',
                                notFunction: '#thisWontBeACustomFunction($)',
                                '*': 'notGoingToBeSpread',
                            },
                        },
                    },
                },
            };
            test('omits fields from a source path as a top-level transformation', function () {
                expect(transformationFunction(source, nestedConstantTransformation)).toStrictEqual({
                    d: {
                        e: {
                            f: sourceValue,
                            g: {
                                something: '$.value',
                                notFunction: '#thisWontBeACustomFunction($)',
                                '*': 'notGoingToBeSpread',
                            },
                        },
                    },
                });
            });
        });
    });
});
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16;
//# sourceMappingURL=contract.spec.js.map