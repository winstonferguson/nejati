import { __makeTemplateObject } from "tslib";
import { transformations } from '@wix/motion-edm-autogen-transformations-core';
import { anObject, aNumber, aRandomItemFrom, aString, } from '@wix/motion-runtime-test-context';
import { transformResponseMessage } from '../../..';
var RESPONSE_OBJECT_UNCHANGED = transformations.RESPONSE_OBJECT_UNCHANGED;
describe('transforming a response JSON to a JS object', function () {
    describe('the passthrough transformation', function () {
        test('returns the object returned by the service as-is', function () {
            var responseObject = anObject();
            var transformedReturnValue = transformResponseMessage(responseObject, RESPONSE_OBJECT_UNCHANGED);
            expect(transformedReturnValue).toStrictEqual(responseObject);
        });
    });
    describe('non-identity transformations', function () {
        var _a;
        var someString = aString();
        var someNumber = aNumber();
        var someObject = anObject();
        var objectKey = aRandomItemFrom(Object.keys(someObject));
        var objectValue = someObject[objectKey];
        var firstArrayItem = aString();
        var lastArrayItemKey = aString();
        var lastArrayItemValue = aString();
        var lastArrayItem = (_a = {}, _a[lastArrayItemKey] = lastArrayItemValue, _a);
        var someArray = [firstArrayItem, lastArrayItem];
        var responseObject = { someNumber: someNumber, someString: someString, someObject: someObject, someArray: someArray };
        describe('extracting a specific value from the response object', function () {
            /* eslint-disable max-len */
            test.each(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n        description                     | transformation                          | expectedReturnValue\n        ", " | ", "                       | ", "\n        ", "          | ", "                       | ", "\n        ", " | ", "          | ", "\n        ", "    | ", "                        | ", "\n        ", "                 | ", "                     | ", "\n        ", "    | ", " | ", "\n      "], ["\n        description                     | transformation                          | expectedReturnValue\n        ", " | ", "                       | ", "\n        ", "          | ", "                       | ", "\n        ", " | ", "          | ", "\n        ", "    | ", "                        | ", "\n        ", "                 | ", "                     | ", "\n        ", "    | ", " | ", "\n      "])), 'primitive value extraction', '$.someString', someString, 'object extraction', '$.someObject', someObject, 'object property extraction', "$.someObject.".concat(objectKey), objectValue, 'entire array extraction', "$.someArray", someArray, 'array item', "$.someArray[0]", firstArrayItem, 'array item nested field', "$.someArray[1].".concat(lastArrayItemKey), lastArrayItemValue)('extract a $description as a return value', function (_a) {
                var transformation = _a.transformation, expectedReturnValue = _a.expectedReturnValue;
                /* eslint-enable max-len */
                var transformedReturnValue = transformResponseMessage(responseObject, transformation);
                expect(transformedReturnValue).toStrictEqual(expectedReturnValue);
            });
        });
        describe('mapping the response object to another object', function () {
            /* eslint-disable max-len */
            test.each(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n        description                          | transformation                                                    | expectedReturnValue\n        ", "                | ", "                       | ", "\n        ", "                        | ", "                        | ", "\n        ", "                   | ", "                   | ", "\n        ", " | ", " | ", "\n        ", "                       | ", "                       | ", "\n        ", "        | ", "          | ", "\n      "], ["\n        description                          | transformation                                                    | expectedReturnValue\n        ", "                | ", "                       | ", "\n        ", "                        | ", "                        | ", "\n        ", "                   | ", "                   | ", "\n        ", " | ", " | ", "\n        ", "                       | ", "                       | ", "\n        ", "        | ", "          | ", "\n      "])), 'primitive values', { a: '$.someString', b: '$.someNumber' }, { a: someString, b: someNumber }, 'an array', { a: '$.someArray', b: '$.someNumber' }, { a: someArray, b: someNumber }, 'an array item', { a: '$.someArray[0]', b: "$.someArray[1]" }, { a: firstArrayItem, b: lastArrayItem }, 'a nested field of an array item', { a: '$.someString', b: "$.someArray[1].".concat(lastArrayItemKey) }, { a: someString, b: lastArrayItemValue }, 'an object', { a: '$.someObject', b: '$.someNumber' }, { a: someObject, b: someNumber }, 'an object property value', { a: "$.someObject.".concat(objectKey), b: '$.someNumber' }, { a: objectValue, b: someNumber })('map $description to the return-value object properties', function (_a) {
                var transformation = _a.transformation, expectedReturnValue = _a.expectedReturnValue;
                /* eslint-enable max-len */
                var transformedPayload = transformResponseMessage(responseObject, transformation);
                expect(transformedPayload).toStrictEqual(expectedReturnValue);
            });
        });
    });
});
var templateObject_1, templateObject_2;
//# sourceMappingURL=transform-response-message.spec.js.map