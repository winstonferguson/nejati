import { __makeTemplateObject } from "tslib";
import { anObject, aNumber, aRandomItemFrom, aRequestId, aString, } from '@wix/motion-runtime-test-context';
import dedent from 'dedent-js';
import { getReasonPhrase } from 'http-status-codes';
import { set, times, upperCase } from 'lodash';
import { transformError } from '../../..';
describe('transformError', function () {
    var description = aString();
    var argumentNames = times(3, function () { return aString(); });
    var stableArgumentNames = ["zzz".concat(aString()), "yyy".concat(aString())];
    var message = aString();
    describe('system errors', function () {
        describe('server errors', function () {
            var httpStatus = aRandomItemFrom([500, 503]);
            var expectedErrorCodes = {
                500: 'INTERNAL_SERVER_ERROR',
                503: 'SERVICE_UNAVAILABLE',
            };
            var requestId = aRequestId();
            /* eslint-disable max-len */
            test.each(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n        details       | description\n        ", "  | ", "\n        ", " | ", "\n      "], ["\n        details       | description\n        ", "  | ", "\n        ", " | ", "\n      "])), undefined, 'does not exist', anObject(), "an object without 'validationError', 'applicationError', and a status code exists on the request")(
            /* eslint-enable max-len */
            'transforms the response object message property to a JS error when the details property $description', function (_a) {
                var details = _a.details;
                var ambassadorHTTPError = {
                    httpStatus: httpStatus,
                    response: { details: details, message: message },
                    requestId: requestId,
                };
                expect(transformError(ambassadorHTTPError)).toMatchObject({
                    constructor: Error,
                    message: "System error occurred, request-id: ".concat(requestId),
                    requestId: requestId,
                    code: expectedErrorCodes[httpStatus],
                });
            });
        });
        describe('network errors (request-id does not exist, httpStatus is -1', function () {
            test('omits the request-id from the message', function () {
                // Based on this: https://github.com/wix-private/ambassador/blob/master/src/runtime/http.ts#L253
                var ambassadorHTTPError = { httpStatus: -1 };
                expect(transformError(ambassadorHTTPError)).toMatchObject({
                    constructor: Error,
                    message: 'System error occurred',
                    code: 'UNKNOWN',
                });
            });
        });
    });
    describe('validation errors', function () {
        test('transforms response.details.validationError.fieldViolations property to a JS error message', function () {
            var transformation = { a: { b: { c: '$[1]', '*': '$[0]' } } };
            var fieldPath = 'a.b.c';
            var ambassadorHTTPError = {
                httpStatus: 400,
                response: {
                    message: message,
                    errorCode: aNumber(),
                    details: {
                        validationError: {
                            fieldViolations: [{ field: fieldPath, description: description }],
                        },
                    },
                },
            };
            var expectedMessage = dedent(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n        message: 'INVALID_ARGUMENT: \"", "\" ", "'\n        details:\n          validationError:\n            fieldViolations:\n              - field: ", "\n                description: ", ""], ["\n        message: 'INVALID_ARGUMENT: \"", "\" ", "'\n        details:\n          validationError:\n            fieldViolations:\n              - field: ", "\n                description: ", ""])), argumentNames[1], description, argumentNames[1], description);
            expect(transformError(ambassadorHTTPError, transformation, argumentNames)).toMatchObject({
                constructor: Error,
                message: expectedMessage,
                details: {
                    validationError: {
                        fieldViolations: [{ field: argumentNames[1], description: description }],
                    },
                },
            });
        });
        test('handles multiple field violations, sorted by transformed field name', function () {
            var transformation = { a: { b: { c: '$[1]', d: '$[0]' } } };
            var anotherDescription = aString();
            var ambassadorHTTPError = {
                httpStatus: 400,
                response: {
                    message: message,
                    errorCode: aNumber(),
                    details: {
                        validationError: {
                            fieldViolations: [
                                { field: 'a.b.d', description: description },
                                { field: 'a.b.c', description: anotherDescription },
                            ],
                        },
                    },
                },
            };
            /* eslint-disable max-len */
            var expectedMessage = dedent(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n        message: 'INVALID_ARGUMENT: \"", "\" ", ", \"", "\" ", "'\n        details:\n          validationError:\n            fieldViolations:\n              - field: ", "\n                description: ", "\n              - field: ", "\n                description: ", ""], ["\n        message: 'INVALID_ARGUMENT: \"", "\" ", ", \"", "\" ", "'\n        details:\n          validationError:\n            fieldViolations:\n              - field: ", "\n                description: ", "\n              - field: ", "\n                description: ", ""])), stableArgumentNames[1], anotherDescription, stableArgumentNames[0], description, stableArgumentNames[1], anotherDescription, stableArgumentNames[0], description);
            expect(transformError(ambassadorHTTPError, transformation, stableArgumentNames)).toMatchObject({
                constructor: Error,
                message: expectedMessage,
                details: {
                    validationError: {
                        fieldViolations: [
                            {
                                field: stableArgumentNames[1],
                                description: anotherDescription,
                            },
                            { field: stableArgumentNames[0], description: description },
                        ],
                    },
                },
            });
        });
        test('handles complex transformations with nested paths', function () {
            var fieldPath = 'secret.value';
            var ambassadorHTTPError = {
                httpStatus: 400,
                response: {
                    message: message,
                    errorCode: aString(),
                    details: {
                        validationError: {
                            fieldViolations: [{ field: fieldPath, description: description }],
                        },
                    },
                },
            };
            var transformation = {
                secret: {
                    name: '$[0]',
                    value: '$[1].some.arg.field',
                    description: '$[2]',
                },
            };
            var expectedMessage = dedent(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n        message: 'INVALID_ARGUMENT: \"", ".some.arg.field\" ", "'\n        details:\n          validationError:\n            fieldViolations:\n              - field: ", ".some.arg.field\n                description: ", ""], ["\n        message: 'INVALID_ARGUMENT: \"", ".some.arg.field\" ", "'\n        details:\n          validationError:\n            fieldViolations:\n              - field: ", ".some.arg.field\n                description: ", ""])), argumentNames[1], description, argumentNames[1], description);
            expect(transformError(ambassadorHTTPError, transformation, argumentNames)).toMatchObject({
                constructor: Error,
                message: expectedMessage,
                details: {
                    validationError: {
                        fieldViolations: [
                            { field: "".concat(argumentNames[1], ".some.arg.field"), description: description },
                        ],
                    },
                },
            });
        });
        test('handles the #wrap custom function', function () {
            var fieldPathPrefix = 'some.field';
            var ambassadorHTTPError = {
                httpStatus: 400,
                response: {
                    message: message,
                    errorCode: aString(),
                    details: {
                        validationError: {
                            fieldViolations: [
                                { field: "".concat(fieldPathPrefix, ".someValueWrapper"), description: description },
                            ],
                        },
                    },
                },
            };
            var transformation = set({}, fieldPathPrefix, '#wrap($[0].something, someValueWrapper)');
            var expectedMessage = dedent(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n        message: 'INVALID_ARGUMENT: \"", ".something\" ", "'\n        details:\n          validationError:\n            fieldViolations:\n              - field: ", ".something\n                description: ", ""], ["\n        message: 'INVALID_ARGUMENT: \"", ".something\" ", "'\n        details:\n          validationError:\n            fieldViolations:\n              - field: ", ".something\n                description: ", ""])), argumentNames[0], description, argumentNames[0], description);
            expect(transformError(ambassadorHTTPError, transformation, argumentNames)).toMatchObject({
                constructor: Error,
                message: expectedMessage,
                details: {
                    validationError: {
                        fieldViolations: [
                            { field: "".concat(argumentNames[0], ".something"), description: description },
                        ],
                    },
                },
            });
        });
        test('handles nested spread operators', function () {
            var ambassadorHTTPError = {
                response: {
                    message: aString(),
                    details: {
                        validationError: {
                            fieldViolations: [
                                {
                                    field: 'plan.maxPurchasesPerBuyer',
                                    description: description,
                                },
                                {
                                    field: 'plan.someField',
                                    description: description,
                                },
                            ],
                        },
                    },
                },
            };
            var transformation = {
                plan: {
                    '*': '$[0]',
                    someField: '$[1]',
                },
            };
            var expectedMessage = dedent(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n        message: 'INVALID_ARGUMENT: \"", "\" ", ", \"", ".maxPurchasesPerBuyer\" ", "'\n        details:\n          validationError:\n            fieldViolations:\n              - field: ", "\n                description: ", "\n              - field: ", ".maxPurchasesPerBuyer\n                description: ", ""], ["\n        message: 'INVALID_ARGUMENT: \"", "\" ", ", \"", ".maxPurchasesPerBuyer\" ", "'\n        details:\n          validationError:\n            fieldViolations:\n              - field: ", "\n                description: ", "\n              - field: ", ".maxPurchasesPerBuyer\n                description: ", ""])), stableArgumentNames[1], description, stableArgumentNames[0], description, stableArgumentNames[1], description, stableArgumentNames[0], description);
            expect(transformError(ambassadorHTTPError, transformation, stableArgumentNames)).toMatchObject({
                constructor: Error,
                message: expectedMessage,
                details: {
                    validationError: {
                        fieldViolations: [
                            { field: stableArgumentNames[1], description: description },
                            {
                                field: "".concat(stableArgumentNames[0], ".maxPurchasesPerBuyer"),
                                description: description,
                            },
                        ],
                    },
                },
            });
        });
    });
    describe('application errors', function () {
        // According to https://bo.wix.com/wix-docs/rnd/platformization-guidelines/errors#platformization-guidelines_errors_4xx-errors
        var aRandomApplicationErrorHttpStatusCode = function () {
            return aRandomItemFrom([400, 401, 403, 404, 408, 409, 428, 429, 499]);
        };
        var code = aString();
        describe('when applicationError property exists', function () {
            test('returns the application error description and code', function () {
                var _a;
                var httpStatus = aRandomApplicationErrorHttpStatusCode();
                var _b = times(4, function () { return aString(); }), key1 = _b[0], key2 = _b[1], value1 = _b[2], value2 = _b[3];
                var data = (_a = {}, _a[key1] = value1, _a[key2] = value2, _a);
                var ambassadorHTTPError = {
                    httpStatus: httpStatus,
                    response: {
                        message: message,
                        details: {
                            applicationError: {
                                description: description,
                                code: code,
                                data: data,
                            },
                        },
                    },
                };
                var expectedMessage = dedent(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n          message: '", ": ", "'\n          details:\n            applicationError:\n              description: ", "\n              code: ", "\n              data:\n                ", ": ", "\n                ", ": ", ""], ["\n          message: '", ": ", "'\n          details:\n            applicationError:\n              description: ", "\n              code: ", "\n              data:\n                ", ": ", "\n                ", ": ", ""])), message, description, description, code, key1, value1, key2, value2);
                expect(transformError(ambassadorHTTPError)).toMatchObject({
                    constructor: Error,
                    message: expectedMessage,
                    details: {
                        applicationError: {
                            description: description,
                            code: code,
                            data: data,
                        },
                    },
                });
            });
        });
        describe('when applicationError is missing, http-status is a client-error status-code', function () {
            var httpStatus = aRandomApplicationErrorHttpStatusCode();
            var statusText = getReasonPhrase(httpStatus);
            var expectedCode = statusText.split(' ').map(upperCase).join('_');
            describe('when no message exists in the response', function () {
                test('returns a description based on the status-code text only', function () {
                    var ambassadorHTTPError = { httpStatus: httpStatus };
                    var expectedMessage = dedent(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n            message: ", "\n            details:\n              applicationError:\n                description: ", "\n                code: ", "\n                data: {}"], ["\n            message: ", "\n            details:\n              applicationError:\n                description: ", "\n                code: ", "\n                data: {}"])), statusText, statusText, expectedCode);
                    expect(transformError(ambassadorHTTPError)).toMatchObject({
                        constructor: Error,
                        message: expectedMessage,
                        details: {
                            applicationError: {
                                description: statusText,
                                code: expectedCode,
                                data: {},
                            },
                        },
                    });
                });
            });
            describe('when a message exists', function () {
                test('returns the given http status and a default application error description and message', function () {
                    var ambassadorHTTPError = { httpStatus: httpStatus, response: { message: message } };
                    var expectedMessage = dedent(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n            message: ", "\n            details:\n              applicationError:\n                description: ", "\n                code: ", "\n                data: {}"], ["\n            message: ", "\n            details:\n              applicationError:\n                description: ", "\n                code: ", "\n                data: {}"])), message, statusText, expectedCode);
                    expect(transformError(ambassadorHTTPError)).toMatchObject({
                        constructor: Error,
                        message: expectedMessage,
                        details: {
                            applicationError: {
                                description: statusText,
                                code: expectedCode,
                                data: {},
                            },
                        },
                    });
                });
            });
        });
    });
});
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9;
//# sourceMappingURL=transformError.spec.js.map