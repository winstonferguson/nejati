import { __makeTemplateObject } from "tslib";
import { aBoolean, aNumber, aString } from '@wix/motion-runtime-test-context';
import { times } from 'lodash';
import { omitUndefinedValues } from '../..';
describe('omitUndefinedValues', function () {
    var valueToKeep = aString();
    var _a = times(4, function () { return aString(); }), propertyToRemove1 = _a[0], propertyToRemove2 = _a[1], propertyToKeep1 = _a[2], propertyToKeep2 = _a[3];
    test('removes keys with undefined values', function () {
        var _a, _b;
        var result = omitUndefinedValues((_a = {},
            _a[propertyToRemove1] = undefined,
            _a[propertyToKeep1] = valueToKeep,
            _a));
        expect(result).toStrictEqual((_b = {}, _b[propertyToKeep1] = valueToKeep, _b));
    });
    test('removes objects with all undefined keys', function () {
        var _a, _b, _c;
        var result = omitUndefinedValues((_a = {},
            _a[propertyToRemove1] = (_b = {},
                _b[propertyToRemove1] = undefined,
                _b[propertyToRemove2] = undefined,
                _b),
            _a[propertyToKeep1] = valueToKeep,
            _a));
        expect(result).toStrictEqual((_c = {}, _c[propertyToKeep1] = valueToKeep, _c));
    });
    test('removes nested objects recursively', function () {
        var _a, _b, _c, _d, _e, _f;
        expect(omitUndefinedValues((_a = {},
            _a[propertyToKeep1] = (_b = {},
                _b[propertyToRemove1] = (_c = {},
                    _c[propertyToRemove1] = (_d = {}, _d[propertyToRemove1] = undefined, _d),
                    _c[propertyToRemove2] = undefined,
                    _c),
                _b[propertyToKeep1] = valueToKeep,
                _b),
            _a))).toStrictEqual((_e = {}, _e[propertyToKeep1] = (_f = {}, _f[propertyToKeep1] = valueToKeep, _f), _e));
    });
    test('does not remove empty object with no keys', function () {
        var _a, _b, _c, _d, _e, _f, _g;
        expect(omitUndefinedValues((_a = {},
            _a[propertyToKeep1] = (_b = {},
                _b[propertyToKeep1] = (_c = {},
                    _c[propertyToRemove1] = (_d = {}, _d[propertyToRemove1] = undefined, _d),
                    _c[propertyToKeep1] = {},
                    _c),
                _b[propertyToKeep2] = valueToKeep,
                _b),
            _a))).toStrictEqual((_e = {},
            _e[propertyToKeep1] = (_f = {},
                _f[propertyToKeep1] = (_g = {},
                    _g[propertyToKeep1] = {},
                    _g),
                _f[propertyToKeep2] = valueToKeep,
                _f),
            _e));
    });
    test.each(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    value         | description\n    ", "       | ", "\n    ", "  | ", "\n    ", " | ", "\n    ", "         | ", "\n  "], ["\n    value         | description\n    ", "       | ", "\n    ", "  | ", "\n    ", " | ", "\n    ", "         | ", "\n  "])), null, 'null', aNumber(), 'a number', aBoolean(), 'a boolean', [], 'an empty array')('does not remove $description', function (_a) {
        var _b, _c, _d, _e, _f, _g, _h;
        var value = _a.value;
        expect(omitUndefinedValues((_b = {},
            _b[propertyToKeep1] = (_c = {},
                _c[propertyToKeep1] = (_d = {},
                    _d[propertyToRemove1] = (_e = {}, _e[propertyToRemove1] = undefined, _e),
                    _d[propertyToKeep1] = value,
                    _d),
                _c),
            _b))).toStrictEqual((_f = {},
            _f[propertyToKeep1] = (_g = {},
                _g[propertyToKeep1] = (_h = {},
                    _h[propertyToKeep1] = value,
                    _h),
                _g),
            _f));
    });
});
var templateObject_1;
//# sourceMappingURL=omitUndefinedValues.spec.js.map