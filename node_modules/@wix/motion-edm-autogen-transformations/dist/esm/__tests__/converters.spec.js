import { __assign, __makeTemplateObject } from "tslib";
import { anObject, aString } from '@wix/motion-runtime-test-context';
import { fromCorvidEntity, toCorvidEntity } from '..';
describe('corvid entities transformers', function () {
    var otherPayloadFields = anObject();
    describe('common rules for both ways', function () {
        describe.each(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      transformer         | name\n      ", " | ", "\n      ", "   | ", "\n    "], ["\n      transformer         | name\n      ", " | ", "\n      ", "   | ", "\n    "])), fromCorvidEntity, 'fromCorvidEntity', toCorvidEntity, 'toCorvidEntity')('$name', function (_a) {
            var _b;
            var transformer = _a.transformer;
            test.each(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n        description                    | payload\n        ", " | ", "\n        ", "       | ", "\n        ", "                   | ", "\n      "], ["\n        description                    | payload\n        ", " | ", "\n        ", "       | ", "\n        ", "                   | ", "\n      "])), 'has no property to rename', anObject(), 'has a null property', (_b = {}, _b[aString()] = null, _b), 'is null', null)('does not modify the payload when it $description', function (_a) {
                var payload = _a.payload;
                expect(transformer(payload)).toStrictEqual(payload);
            });
        });
    });
    describe('specific renames from corvid entity', function () {
        describe.each(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n      key               | renamedKey\n      ", "          | ", "\n      ", " | ", "\n      ", " | ", "\n    "], ["\n      key               | renamedKey\n      ", "          | ", "\n      ", " | ", "\n      ", " | ", "\n    "])), '_id', 'id', '_createdDate', 'createdDate', '_updatedDate', 'updatedDate')('$key', function (_a) {
            var key = _a.key, renamedKey = _a.renamedKey;
            describe.each(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n        description   | value\n        ", " | ", "\n        ", "     | ", "\n      "], ["\n        description   | value\n        ", " | ", "\n        ", "     | ", "\n      "])), 'a string', aString(), 'null', null)("with ".concat(key, " exists and is $description"), function (_a) {
                var value = _a.value;
                test("adds an ".concat(renamedKey, " property with the same value as the ").concat(key, " property"), function () {
                    var _a, _b;
                    var requestPayload = __assign(__assign({}, otherPayloadFields), (_a = {}, _a[key] = value, _a));
                    expect(fromCorvidEntity(requestPayload)).toStrictEqual(__assign(__assign({}, otherPayloadFields), (_b = {}, _b[renamedKey] = value, _b)));
                });
                test("recursively adds ".concat(renamedKey, " to nested objects and arrays"), function () {
                    var _a, _b;
                    var objectWithUnderscoreId = __assign(__assign({}, otherPayloadFields), (_a = {}, _a[key] = value, _a));
                    var requestPayload = {
                        someArray: [otherPayloadFields, objectWithUnderscoreId],
                    };
                    expect(fromCorvidEntity(requestPayload)).toStrictEqual({
                        someArray: [
                            otherPayloadFields,
                            __assign(__assign({}, otherPayloadFields), (_b = {}, _b[renamedKey] = value, _b)),
                        ],
                    });
                });
            });
        });
    });
    describe('specific renames to corvid entity', function () {
        describe.each(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n      key              | renamedKey\n      ", "          | ", "\n      ", " | ", "\n      ", " | ", "\n    "], ["\n      key              | renamedKey\n      ", "          | ", "\n      ", " | ", "\n      ", " | ", "\n    "])), 'id', '_id', 'createdDate', '_createdDate', 'updatedDate', '_updatedDate')('$key', function (_a) {
            var key = _a.key, renamedKey = _a.renamedKey;
            describe("when ".concat(key, " exists in the response payload"), function () {
                test.each(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n          description   | value\n          ", " | ", "\n          ", "     | ", "\n        "], ["\n          description   | value\n          ", " | ", "\n          ", "     | ", "\n        "])), 'a string', aString(), 'null', null)('recursively adds it to nested objects and arrays when it is $description', function (_a) {
                    var _b, _c;
                    var value = _a.value;
                    var someUnaffectedObject = anObject();
                    var objectWithUnderscoreId = __assign(__assign({}, otherPayloadFields), (_b = {}, _b[key] = value, _b));
                    var responsePayload = {
                        someArray: [someUnaffectedObject, objectWithUnderscoreId],
                    };
                    expect(toCorvidEntity(responsePayload)).toStrictEqual({
                        someArray: [
                            someUnaffectedObject,
                            __assign(__assign({}, otherPayloadFields), (_c = {}, _c[renamedKey] = value, _c)),
                        ],
                    });
                });
            });
        });
    });
});
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=converters.spec.js.map