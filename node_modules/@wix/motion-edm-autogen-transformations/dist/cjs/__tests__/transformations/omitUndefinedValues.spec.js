"use strict";

var _motionRuntimeTestContext = require("@wix/motion-runtime-test-context");
var _lodash = require("lodash");
var _ = require("../..");
describe('omitUndefinedValues', () => {
  const valueToKeep = (0, _motionRuntimeTestContext.aString)();
  const _times = (0, _lodash.times)(4, () => (0, _motionRuntimeTestContext.aString)()),
    propertyToRemove1 = _times[0],
    propertyToRemove2 = _times[1],
    propertyToKeep1 = _times[2],
    propertyToKeep2 = _times[3];
  test('removes keys with undefined values', () => {
    const result = (0, _.omitUndefinedValues)({
      [propertyToRemove1]: undefined,
      [propertyToKeep1]: valueToKeep
    });
    expect(result).toStrictEqual({
      [propertyToKeep1]: valueToKeep
    });
  });
  test('removes objects with all undefined keys', () => {
    const result = (0, _.omitUndefinedValues)({
      [propertyToRemove1]: {
        [propertyToRemove1]: undefined,
        [propertyToRemove2]: undefined
      },
      [propertyToKeep1]: valueToKeep
    });
    expect(result).toStrictEqual({
      [propertyToKeep1]: valueToKeep
    });
  });
  test('removes nested objects recursively', () => {
    expect((0, _.omitUndefinedValues)({
      [propertyToKeep1]: {
        [propertyToRemove1]: {
          [propertyToRemove1]: {
            [propertyToRemove1]: undefined
          },
          [propertyToRemove2]: undefined
        },
        [propertyToKeep1]: valueToKeep
      }
    })).toStrictEqual({
      [propertyToKeep1]: {
        [propertyToKeep1]: valueToKeep
      }
    });
  });
  test('does not remove empty object with no keys', () => {
    expect((0, _.omitUndefinedValues)({
      [propertyToKeep1]: {
        [propertyToKeep1]: {
          [propertyToRemove1]: {
            [propertyToRemove1]: undefined
          },
          [propertyToKeep1]: {}
        },
        [propertyToKeep2]: valueToKeep
      }
    })).toStrictEqual({
      [propertyToKeep1]: {
        [propertyToKeep1]: {
          [propertyToKeep1]: {}
        },
        [propertyToKeep2]: valueToKeep
      }
    });
  });
  test.each`
    value         | description
    ${null}       | ${'null'}
    ${(0, _motionRuntimeTestContext.aNumber)()}  | ${'a number'}
    ${(0, _motionRuntimeTestContext.aBoolean)()} | ${'a boolean'}
    ${[]}         | ${'an empty array'}
  `('does not remove $description', ({
    value
  }) => {
    expect((0, _.omitUndefinedValues)({
      [propertyToKeep1]: {
        [propertyToKeep1]: {
          [propertyToRemove1]: {
            [propertyToRemove1]: undefined
          },
          [propertyToKeep1]: value
        }
      }
    })).toStrictEqual({
      [propertyToKeep1]: {
        [propertyToKeep1]: {
          [propertyToKeep1]: value
        }
      }
    });
  });
});
//# sourceMappingURL=omitUndefinedValues.spec.js.map