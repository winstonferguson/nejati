"use strict";

var _motionEdmAutogenTransformationsCore = require("@wix/motion-edm-autogen-transformations-core");
var _motionRuntimeTestContext = require("@wix/motion-runtime-test-context");
var _ = require("../../..");
const JS_SINGLE_ARG_UNCHANGED = _motionEdmAutogenTransformationsCore.transformations.JS_SINGLE_ARG_UNCHANGED;
describe('transforming JS function-arguments to a request JSON', () => {
  describe('the passthrough transformation', () => {
    test('returns the single object passed as argument', () => {
      const object = (0, _motionRuntimeTestContext.anObject)();
      const functionArguments = [object];
      const requestPayloadObject = (0, _.transformToRequestMessage)(functionArguments, JS_SINGLE_ARG_UNCHANGED);
      expect(requestPayloadObject).toStrictEqual(object);
    });
    test('transforms an empty argument-list to an empty request object', () => {
      const functionArguments = [];
      const requestPayloadObject = (0, _.transformToRequestMessage)(functionArguments, JS_SINGLE_ARG_UNCHANGED);
      expect(requestPayloadObject).toStrictEqual({});
    });
  });
  describe('arguments-to-object transformation', () => {
    const stringArg = (0, _motionRuntimeTestContext.aString)();
    const numericArg = (0, _motionRuntimeTestContext.aNumber)();
    const objectArg = (0, _motionRuntimeTestContext.anObject)();
    const objectKey = (0, _motionRuntimeTestContext.aRandomItemFrom)(Object.keys(objectArg));
    const objectValue = objectArg[objectKey];
    const firstArrayItem = (0, _motionRuntimeTestContext.aString)();
    const lastArrayItemKey = (0, _motionRuntimeTestContext.aString)();
    const lastArrayItemValue = (0, _motionRuntimeTestContext.aString)();
    const lastArrayItem = {
      [lastArrayItemKey]: lastArrayItemValue
    };
    const arrayArg = [firstArrayItem, lastArrayItem];

    /* eslint-disable max-len */
    test.each`
      description                         | functionArguments          | transformation                                     | expectedPayload
      ${'primitive arguments'}            | ${[stringArg, numericArg]} | ${{
      a: '$[0]',
      b: '$[1]'
    }}                        | ${{
      a: stringArg,
      b: numericArg
    }}
      ${'object argument'}                | ${[stringArg, objectArg]}  | ${{
      a: '$[0]',
      b: '$[1]'
    }}                        | ${{
      a: stringArg,
      b: objectArg
    }}
      ${'object argument - nested field'} | ${[stringArg, objectArg]}  | ${{
      a: '$[0]',
      b: `$[1].${objectKey}`
    }}           | ${{
      a: stringArg,
      b: objectValue
    }}
      ${'array argument'}                 | ${[stringArg, arrayArg]}   | ${{
      a: '$[0]',
      b: `$[1][0]`
    }}                     | ${{
      a: stringArg,
      b: firstArrayItem
    }}
      ${'array argument - nested field'}  | ${[stringArg, arrayArg]}   | ${{
      a: '$[0]',
      b: `$[1][1].${lastArrayItemKey}`
    }} | ${{
      a: stringArg,
      b: lastArrayItemValue
    }}
    `('$description', ({
      functionArguments,
      transformation,
      expectedPayload
    }) => {
      /* eslint-enable max-len */
      const transformedPayload = (0, _.transformToRequestMessage)(functionArguments, transformation);
      expect(transformedPayload).toStrictEqual(expectedPayload);
    });
  });
});
//# sourceMappingURL=transform-request-message.spec.js.map