"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _motionRuntimeTestContext = require("@wix/motion-runtime-test-context");
var _dedentJs = _interopRequireDefault(require("dedent-js"));
var _httpStatusCodes = require("http-status-codes");
var _lodash = require("lodash");
var _ = require("../../..");
describe('transformError', () => {
  const description = (0, _motionRuntimeTestContext.aString)();
  const argumentNames = (0, _lodash.times)(3, () => (0, _motionRuntimeTestContext.aString)());
  const stableArgumentNames = [`zzz${(0, _motionRuntimeTestContext.aString)()}`, `yyy${(0, _motionRuntimeTestContext.aString)()}`];
  const message = (0, _motionRuntimeTestContext.aString)();
  describe('system errors', () => {
    describe('server errors', () => {
      const httpStatus = (0, _motionRuntimeTestContext.aRandomItemFrom)([500, 503]);
      const expectedErrorCodes = {
        500: 'INTERNAL_SERVER_ERROR',
        503: 'SERVICE_UNAVAILABLE'
      };
      const requestId = (0, _motionRuntimeTestContext.aRequestId)();

      /* eslint-disable max-len */
      test.each`
        details       | description
        ${undefined}  | ${'does not exist'}
        ${(0, _motionRuntimeTestContext.anObject)()} | ${"an object without 'validationError', 'applicationError', and a status code exists on the request"}
      `( /* eslint-enable max-len */
      'transforms the response object message property to a JS error when the details property $description', ({
        details
      }) => {
        const ambassadorHTTPError = {
          httpStatus,
          response: {
            details,
            message
          },
          requestId
        };
        expect((0, _.transformError)(ambassadorHTTPError)).toMatchObject({
          constructor: Error,
          message: `System error occurred, request-id: ${requestId}`,
          requestId,
          code: expectedErrorCodes[httpStatus]
        });
      });
    });
    describe('network errors (request-id does not exist, httpStatus is -1', () => {
      test('omits the request-id from the message', () => {
        // Based on this: https://github.com/wix-private/ambassador/blob/master/src/runtime/http.ts#L253
        const ambassadorHTTPError = {
          httpStatus: -1
        };
        expect((0, _.transformError)(ambassadorHTTPError)).toMatchObject({
          constructor: Error,
          message: 'System error occurred',
          code: 'UNKNOWN'
        });
      });
    });
  });
  describe('validation errors', () => {
    test('transforms response.details.validationError.fieldViolations property to a JS error message', () => {
      const transformation = {
        a: {
          b: {
            c: '$[1]',
            '*': '$[0]'
          }
        }
      };
      const fieldPath = 'a.b.c';
      const ambassadorHTTPError = {
        httpStatus: 400,
        response: {
          message,
          errorCode: (0, _motionRuntimeTestContext.aNumber)(),
          details: {
            validationError: {
              fieldViolations: [{
                field: fieldPath,
                description
              }]
            }
          }
        }
      };
      const expectedMessage = (0, _dedentJs.default)`
        message: 'INVALID_ARGUMENT: "${argumentNames[1]}" ${description}'
        details:
          validationError:
            fieldViolations:
              - field: ${argumentNames[1]}
                description: ${description}`;
      expect((0, _.transformError)(ambassadorHTTPError, transformation, argumentNames)).toMatchObject({
        constructor: Error,
        message: expectedMessage,
        details: {
          validationError: {
            fieldViolations: [{
              field: argumentNames[1],
              description
            }]
          }
        }
      });
    });
    test('handles multiple field violations, sorted by transformed field name', () => {
      const transformation = {
        a: {
          b: {
            c: '$[1]',
            d: '$[0]'
          }
        }
      };
      const anotherDescription = (0, _motionRuntimeTestContext.aString)();
      const ambassadorHTTPError = {
        httpStatus: 400,
        response: {
          message,
          errorCode: (0, _motionRuntimeTestContext.aNumber)(),
          details: {
            validationError: {
              fieldViolations: [{
                field: 'a.b.d',
                description
              }, {
                field: 'a.b.c',
                description: anotherDescription
              }]
            }
          }
        }
      };

      /* eslint-disable max-len */
      const expectedMessage = (0, _dedentJs.default)`
        message: 'INVALID_ARGUMENT: "${stableArgumentNames[1]}" ${anotherDescription}, "${stableArgumentNames[0]}" ${description}'
        details:
          validationError:
            fieldViolations:
              - field: ${stableArgumentNames[1]}
                description: ${anotherDescription}
              - field: ${stableArgumentNames[0]}
                description: ${description}`;
      expect((0, _.transformError)(ambassadorHTTPError, transformation, stableArgumentNames)).toMatchObject({
        constructor: Error,
        message: expectedMessage,
        details: {
          validationError: {
            fieldViolations: [{
              field: stableArgumentNames[1],
              description: anotherDescription
            }, {
              field: stableArgumentNames[0],
              description
            }]
          }
        }
      });
    });
    test('handles complex transformations with nested paths', () => {
      const fieldPath = 'secret.value';
      const ambassadorHTTPError = {
        httpStatus: 400,
        response: {
          message,
          errorCode: (0, _motionRuntimeTestContext.aString)(),
          details: {
            validationError: {
              fieldViolations: [{
                field: fieldPath,
                description
              }]
            }
          }
        }
      };
      const transformation = {
        secret: {
          name: '$[0]',
          value: '$[1].some.arg.field',
          description: '$[2]'
        }
      };
      const expectedMessage = (0, _dedentJs.default)`
        message: 'INVALID_ARGUMENT: "${argumentNames[1]}.some.arg.field" ${description}'
        details:
          validationError:
            fieldViolations:
              - field: ${argumentNames[1]}.some.arg.field
                description: ${description}`;
      expect((0, _.transformError)(ambassadorHTTPError, transformation, argumentNames)).toMatchObject({
        constructor: Error,
        message: expectedMessage,
        details: {
          validationError: {
            fieldViolations: [{
              field: `${argumentNames[1]}.some.arg.field`,
              description
            }]
          }
        }
      });
    });
    test('handles the #wrap custom function', () => {
      const fieldPathPrefix = 'some.field';
      const ambassadorHTTPError = {
        httpStatus: 400,
        response: {
          message,
          errorCode: (0, _motionRuntimeTestContext.aString)(),
          details: {
            validationError: {
              fieldViolations: [{
                field: `${fieldPathPrefix}.someValueWrapper`,
                description
              }]
            }
          }
        }
      };
      const transformation = (0, _lodash.set)({}, fieldPathPrefix, '#wrap($[0].something, someValueWrapper)');
      const expectedMessage = (0, _dedentJs.default)`
        message: 'INVALID_ARGUMENT: "${argumentNames[0]}.something" ${description}'
        details:
          validationError:
            fieldViolations:
              - field: ${argumentNames[0]}.something
                description: ${description}`;
      expect((0, _.transformError)(ambassadorHTTPError, transformation, argumentNames)).toMatchObject({
        constructor: Error,
        message: expectedMessage,
        details: {
          validationError: {
            fieldViolations: [{
              field: `${argumentNames[0]}.something`,
              description
            }]
          }
        }
      });
    });
    test('handles nested spread operators', () => {
      const ambassadorHTTPError = {
        response: {
          message: (0, _motionRuntimeTestContext.aString)(),
          details: {
            validationError: {
              fieldViolations: [{
                field: 'plan.maxPurchasesPerBuyer',
                description
              }, {
                field: 'plan.someField',
                description
              }]
            }
          }
        }
      };
      const transformation = {
        plan: {
          '*': '$[0]',
          someField: '$[1]'
        }
      };
      const expectedMessage = (0, _dedentJs.default)`
        message: 'INVALID_ARGUMENT: "${stableArgumentNames[1]}" ${description}, "${stableArgumentNames[0]}.maxPurchasesPerBuyer" ${description}'
        details:
          validationError:
            fieldViolations:
              - field: ${stableArgumentNames[1]}
                description: ${description}
              - field: ${stableArgumentNames[0]}.maxPurchasesPerBuyer
                description: ${description}`;
      expect((0, _.transformError)(ambassadorHTTPError, transformation, stableArgumentNames)).toMatchObject({
        constructor: Error,
        message: expectedMessage,
        details: {
          validationError: {
            fieldViolations: [{
              field: stableArgumentNames[1],
              description
            }, {
              field: `${stableArgumentNames[0]}.maxPurchasesPerBuyer`,
              description
            }]
          }
        }
      });
    });
  });
  describe('application errors', () => {
    // According to https://bo.wix.com/wix-docs/rnd/platformization-guidelines/errors#platformization-guidelines_errors_4xx-errors
    const aRandomApplicationErrorHttpStatusCode = () => (0, _motionRuntimeTestContext.aRandomItemFrom)([400, 401, 403, 404, 408, 409, 428, 429, 499]);
    const code = (0, _motionRuntimeTestContext.aString)();
    describe('when applicationError property exists', () => {
      test('returns the application error description and code', () => {
        const httpStatus = aRandomApplicationErrorHttpStatusCode();
        const _times = (0, _lodash.times)(4, () => (0, _motionRuntimeTestContext.aString)()),
          key1 = _times[0],
          key2 = _times[1],
          value1 = _times[2],
          value2 = _times[3];
        const data = {
          [key1]: value1,
          [key2]: value2
        };
        const ambassadorHTTPError = {
          httpStatus,
          response: {
            message,
            details: {
              applicationError: {
                description,
                code,
                data
              }
            }
          }
        };
        const expectedMessage = (0, _dedentJs.default)`
          message: '${message}: ${description}'
          details:
            applicationError:
              description: ${description}
              code: ${code}
              data:
                ${key1}: ${value1}
                ${key2}: ${value2}`;
        expect((0, _.transformError)(ambassadorHTTPError)).toMatchObject({
          constructor: Error,
          message: expectedMessage,
          details: {
            applicationError: {
              description,
              code,
              data
            }
          }
        });
      });
    });
    describe('when applicationError is missing, http-status is a client-error status-code', () => {
      const httpStatus = aRandomApplicationErrorHttpStatusCode();
      const statusText = (0, _httpStatusCodes.getReasonPhrase)(httpStatus);
      const expectedCode = statusText.split(' ').map(_lodash.upperCase).join('_');
      describe('when no message exists in the response', () => {
        test('returns a description based on the status-code text only', () => {
          const ambassadorHTTPError = {
            httpStatus
          };
          const expectedMessage = (0, _dedentJs.default)`
            message: ${statusText}
            details:
              applicationError:
                description: ${statusText}
                code: ${expectedCode}
                data: {}`;
          expect((0, _.transformError)(ambassadorHTTPError)).toMatchObject({
            constructor: Error,
            message: expectedMessage,
            details: {
              applicationError: {
                description: statusText,
                code: expectedCode,
                data: {}
              }
            }
          });
        });
      });
      describe('when a message exists', () => {
        test('returns the given http status and a default application error description and message', () => {
          const ambassadorHTTPError = {
            httpStatus,
            response: {
              message
            }
          };
          const expectedMessage = (0, _dedentJs.default)`
            message: ${message}
            details:
              applicationError:
                description: ${statusText}
                code: ${expectedCode}
                data: {}`;
          expect((0, _.transformError)(ambassadorHTTPError)).toMatchObject({
            constructor: Error,
            message: expectedMessage,
            details: {
              applicationError: {
                description: statusText,
                code: expectedCode,
                data: {}
              }
            }
          });
        });
      });
    });
  });
});
//# sourceMappingURL=transformError.spec.js.map