"use strict";

var _motionRuntimeTestContext = require("@wix/motion-runtime-test-context");
var _ = require("..");
describe('corvid entities transformers', () => {
  const otherPayloadFields = (0, _motionRuntimeTestContext.anObject)();
  describe('common rules for both ways', () => {
    describe.each`
      transformer         | name
      ${_.fromCorvidEntity} | ${'fromCorvidEntity'}
      ${_.toCorvidEntity}   | ${'toCorvidEntity'}
    `('$name', ({
      transformer
    }) => {
      test.each`
        description                    | payload
        ${'has no property to rename'} | ${(0, _motionRuntimeTestContext.anObject)()}
        ${'has a null property'}       | ${{
        [(0, _motionRuntimeTestContext.aString)()]: null
      }}
        ${'is null'}                   | ${null}
      `('does not modify the payload when it $description', ({
        payload
      }) => {
        expect(transformer(payload)).toStrictEqual(payload);
      });
    });
  });
  describe('specific renames from corvid entity', () => {
    describe.each`
      key               | renamedKey
      ${'_id'}          | ${'id'}
      ${'_createdDate'} | ${'createdDate'}
      ${'_updatedDate'} | ${'updatedDate'}
    `('$key', ({
      key,
      renamedKey
    }) => {
      describe.each`
        description   | value
        ${'a string'} | ${(0, _motionRuntimeTestContext.aString)()}
        ${'null'}     | ${null}
      `(`with ${key} exists and is $description`, ({
        value
      }) => {
        test(`adds an ${renamedKey} property with the same value as the ${key} property`, () => {
          const requestPayload = {
            ...otherPayloadFields,
            [key]: value
          };
          expect((0, _.fromCorvidEntity)(requestPayload)).toStrictEqual({
            ...otherPayloadFields,
            [renamedKey]: value
          });
        });
        test(`recursively adds ${renamedKey} to nested objects and arrays`, () => {
          const objectWithUnderscoreId = {
            ...otherPayloadFields,
            [key]: value
          };
          const requestPayload = {
            someArray: [otherPayloadFields, objectWithUnderscoreId]
          };
          expect((0, _.fromCorvidEntity)(requestPayload)).toStrictEqual({
            someArray: [otherPayloadFields, {
              ...otherPayloadFields,
              [renamedKey]: value
            }]
          });
        });
      });
    });
  });
  describe('specific renames to corvid entity', () => {
    describe.each`
      key              | renamedKey
      ${'id'}          | ${'_id'}
      ${'createdDate'} | ${'_createdDate'}
      ${'updatedDate'} | ${'_updatedDate'}
    `('$key', ({
      key,
      renamedKey
    }) => {
      describe(`when ${key} exists in the response payload`, () => {
        test.each`
          description   | value
          ${'a string'} | ${(0, _motionRuntimeTestContext.aString)()}
          ${'null'}     | ${null}
        `('recursively adds it to nested objects and arrays when it is $description', ({
          value
        }) => {
          const someUnaffectedObject = (0, _motionRuntimeTestContext.anObject)();
          const objectWithUnderscoreId = {
            ...otherPayloadFields,
            [key]: value
          };
          const responsePayload = {
            someArray: [someUnaffectedObject, objectWithUnderscoreId]
          };
          expect((0, _.toCorvidEntity)(responsePayload)).toStrictEqual({
            someArray: [someUnaffectedObject, {
              ...otherPayloadFields,
              [renamedKey]: value
            }]
          });
        });
      });
    });
  });
});
//# sourceMappingURL=converters.spec.js.map