"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.transformError = void 0;
var _constantCase = require("constant-case");
var _httpStatusCodes = require("http-status-codes");
var _jsYaml = _interopRequireDefault(require("js-yaml"));
var _lodash = _interopRequireDefault(require("lodash"));
var _violationsWithRenamedFields = require("./violationsWithRenamedFields");
const get = _lodash.default.get,
  has = _lodash.default.has,
  forOwn = _lodash.default.forOwn,
  isEqual = _lodash.default.isEqual;
const UNKNOWN_STATUS_CODE_TEST = 'Unknown';
const MAX_YAML_LINE_WIDTH = 1000;
const CANCELLED_STATUS_CODE = 499;
const CANCELLED_STATUS_CODE_STRING = CANCELLED_STATUS_CODE.toString();
const CANCELLED_STATUS_TEXT = 'Client Closed Request';
const toYamlString = object => _jsYaml.default.dump(object, {
  lineWidth: MAX_YAML_LINE_WIDTH
}).replace(/\n$/, '');
const ambassadorSafeStatusText = _maybeHttpStatus => {
  if (_maybeHttpStatus === CANCELLED_STATUS_CODE || _maybeHttpStatus === CANCELLED_STATUS_CODE_STRING) {
    return CANCELLED_STATUS_TEXT;
  }
  try {
    return (0, _httpStatusCodes.getReasonPhrase)(_maybeHttpStatus);
  } catch (error) {
    return UNKNOWN_STATUS_CODE_TEST;
  }
};
const buildError = ({
  message,
  extraProperties = {}
}) => {
  const error = new Error(message);
  forOwn(extraProperties, (value, key) => {
    if (value !== undefined) {
      error[key] = value;
    }
  });
  return error;
};
const isClientError = code => code >= 400 && code < 500;
const isValidationError = ambassadorHTTPError => has(ambassadorHTTPError, 'response.details.validationError');
const isApplicationError = ambassadorHTTPError => has(ambassadorHTTPError, 'response.details.applicationError') || isClientError(ambassadorHTTPError.httpStatus);
const buildValidationError = (ambassadorHTTPError, transformation, argumentNames) => {
  const fieldViolations = ambassadorHTTPError.response.details.validationError.fieldViolations;
  const transformedFieldViolations = (0, _lodash.default)((0, _violationsWithRenamedFields.violationsWithRenamedFields)({
    transformation,
    fieldViolations,
    argumentNames
  })).sortBy('field').value();
  const message = `INVALID_ARGUMENT: ${transformedFieldViolations.map(({
    field,
    description
  }) => `"${field}" ${description}`).join(', ')}`;
  const details = {
    validationError: {
      fieldViolations: transformedFieldViolations
    }
  };
  return buildError({
    message: toYamlString({
      message,
      details
    }),
    extraProperties: {
      details
    }
  });
};
const buildApplicationError = ambassadorHTTPError => {
  const statusText = ambassadorSafeStatusText(ambassadorHTTPError.httpStatus);
  const hasEmptyDetails = isEqual(get(ambassadorHTTPError, 'response.details', {}), {});
  if (hasEmptyDetails) {
    const details = {
      applicationError: {
        description: statusText,
        code: (0, _constantCase.constantCase)(statusText),
        data: {}
      }
    };
    return buildError({
      message: toYamlString({
        message: get(ambassadorHTTPError, 'response.message', statusText),
        details
      }),
      extraProperties: {
        details
      }
    });
  }
  const message = get(ambassadorHTTPError, 'response.message', statusText);
  const description = get(ambassadorHTTPError, 'response.details.applicationError.description', statusText);
  const code = get(ambassadorHTTPError, 'response.details.applicationError.code', (0, _constantCase.constantCase)(statusText));
  const data = get(ambassadorHTTPError, 'response.details.applicationError.data', {});
  const combinedMessage = message === description ? message : `${message}: ${description}`;
  const details = {
    applicationError: {
      description,
      code,
      data
    }
  };
  return buildError({
    message: toYamlString({
      message: combinedMessage,
      details
    }),
    extraProperties: {
      details
    }
  });
};
const buildSystemError = ambassadorHTTPError => {
  const code = (0, _constantCase.constantCase)(ambassadorSafeStatusText(ambassadorHTTPError.httpStatus));
  const message = ambassadorHTTPError.requestId ? `System error occurred, request-id: ${ambassadorHTTPError.requestId}` : 'System error occurred';
  return buildError({
    message,
    extraProperties: {
      requestId: ambassadorHTTPError.requestId,
      code
    }
  });
};

// See https://github.com/wix-private/ambassador/blob/master/src/runtime/http.ts#L10
const transformError = (ambassadorHTTPError, transformation = undefined, argumentNames = undefined) => {
  switch (true) {
    case isValidationError(ambassadorHTTPError):
      return buildValidationError(ambassadorHTTPError, transformation, argumentNames);
    case isApplicationError(ambassadorHTTPError):
      return buildApplicationError(ambassadorHTTPError);
    default:
      return buildSystemError(ambassadorHTTPError);
  }
};
exports.transformError = transformError;
//# sourceMappingURL=index.js.map