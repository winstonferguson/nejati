"use strict";

exports.__esModule = true;
exports.validation = exports.transformations = exports.preset = exports.namingHints = exports.corvidEntities = void 0;
var _corvidEntity = require("./lib/corvid-entity");
var _getArgumentCardinality = require("./lib/getArgumentCardinality");
exports.getArgumentCardinality = _getArgumentCardinality.getArgumentCardinality;
var _helpers = require("./lib/helpers");
exports.extractIndexAndPath = _helpers.extractIndexAndPath;
exports.getArgumentIndex = _helpers.getArgumentIndex;
exports.isArrayIndexString = _helpers.isArrayIndexString;
exports.isIdentityResponseTransformation = _helpers.isIdentityResponseTransformation;
exports.isJsonPathExpression = _helpers.isJsonPathExpression;
exports.isMapArrayItemsTransformation = _helpers.isMapArrayItemsTransformation;
exports.isOmitTransformation = _helpers.isOmitTransformation;
exports.isRootObjectIdentifier = _helpers.isRootObjectIdentifier;
exports.isSimpleTransformation = _helpers.isSimpleTransformation;
exports.isSpreadOperator = _helpers.isSpreadOperator;
exports.parseOmitTransformation = _helpers.parseOmitTransformation;
exports.stripJsonPathRootPrefix = _helpers.stripJsonPathRootPrefix;
var _common = require("./lib/transformations/common");
var _customFunctions = require("./lib/transformations/custom-functions");
exports.isFunctionCallExpression = _customFunctions.isFunctionCallExpression;
exports.parseCustomFunctionCall = _customFunctions.parseCustomFunctionCall;
exports.runCustomFunctionCallExpression = _customFunctions.runCustomFunctionCallExpression;
var _create = require("./lib/transformations/preset/create");
var _delete = require("./lib/transformations/preset/delete");
var _get = require("./lib/transformations/preset/get");
var _list = require("./lib/transformations/preset/list");
var _query = require("./lib/transformations/preset/query");
var _update = require("./lib/transformations/preset/update");
var _reduceTransformation = require("./lib/transformations/reduceTransformation");
exports.reduceTransformation = _reduceTransformation.reduceTransformation;
var _validateRequestTransformation = require("./lib/transformations/validations/validateRequestTransformation");
var _validateResponseTransformation = require("./lib/transformations/validations/validateResponseTransformation");
const JS_SINGLE_ARG_UNCHANGED = _common.transformations.JS_SINGLE_ARG_UNCHANGED,
  RESPONSE_OBJECT_UNCHANGED = _common.transformations.RESPONSE_OBJECT_UNCHANGED,
  ARRAY_ITEMS_PATH_PROPERTY_NAME = _common.transformations.ARRAY_ITEMS_PATH_PROPERTY_NAME,
  ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME = _common.transformations.ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME,
  OMIT_SOURCE_PROPERTY_NAME = _common.transformations.OMIT_SOURCE_PROPERTY_NAME,
  FIELDS_TO_OMIT_PROPERTY_NAME = _common.transformations.FIELDS_TO_OMIT_PROPERTY_NAME;
const transformations = {
  JS_SINGLE_ARG_UNCHANGED,
  RESPONSE_OBJECT_UNCHANGED,
  ARRAY_ITEMS_PATH_PROPERTY_NAME,
  ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME,
  OMIT_SOURCE_PROPERTY_NAME,
  FIELDS_TO_OMIT_PROPERTY_NAME
};
exports.transformations = transformations;
const transformationBuilder = (buildRequestTransformation, buildResponseTransformation) => ({
  buildRequestTransformation,
  buildResponseTransformation
});
const preset = {
  create: transformationBuilder(_create.buildRequestTransformation, _create.buildResponseTransformation),
  update: transformationBuilder(_update.buildRequestTransformation, _update.buildResponseTransformation),
  delete: transformationBuilder(_delete.buildRequestTransformation, _delete.buildResponseTransformation),
  get: transformationBuilder(_get.buildRequestTransformation, _get.buildResponseTransformation),
  list: transformationBuilder(_list.buildRequestTransformation, _list.buildResponseTransformation),
  query: {
    ...transformationBuilder(_query.buildRequestTransformation, _query.buildResponseTransformation),
    ITEMS_RESULT_PROPERTY_NAME: _query.ITEMS_RESULT_PROPERTY_NAME,
    PAGING_METADATA_RESULT_PROPERTY_NAME: _query.PAGING_METADATA_RESULT_PROPERTY_NAME
  }
};
exports.preset = preset;
const namingHints = {
  OPTIONS: 'OPTIONS'
};
exports.namingHints = namingHints;
const validation = {
  validateRequestTransformation: _validateRequestTransformation.validateRequestTransformation,
  validateResponseTransformation: _validateResponseTransformation.validateResponseTransformation
};
exports.validation = validation;
const corvidEntities = {
  toCorvidName: _corvidEntity.toCorvidName,
  fromCorvidName: _corvidEntity.fromCorvidName
};
exports.corvidEntities = corvidEntities;
//# sourceMappingURL=index.js.map