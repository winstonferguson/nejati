"use strict";

exports.__esModule = true;
exports.stripJsonPathRootPrefix = exports.parseOmitTransformation = exports.parseMapArrayItemsTransformation = exports.isSpreadOperator = exports.isSimpleTransformation = exports.isRootObjectIdentifier = exports.isOmitTransformation = exports.isMapArrayItemsTransformation = exports.isJsonPathExpression = exports.isInvalidJsonValue = exports.isInvalidJsonPath = exports.isIdentityResponseTransformation = exports.isConstantExpression = exports.isArrayIndexString = exports.hasValidArgumentIndex = exports.getArgumentIndex = exports.extractIndexAndPath = void 0;
var _jsonpathPlus = require("jsonpath-plus");
var _lodash = require("lodash");
var _common = require("./transformations/common");
var _constants = require("./transformations/constants");
const RESPONSE_OBJECT_UNCHANGED = _common.transformations.RESPONSE_OBJECT_UNCHANGED,
  ARRAY_ITEMS_PATH_PROPERTY_NAME = _common.transformations.ARRAY_ITEMS_PATH_PROPERTY_NAME,
  ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME = _common.transformations.ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME,
  OMIT_SOURCE_PROPERTY_NAME = _common.transformations.OMIT_SOURCE_PROPERTY_NAME,
  FIELDS_TO_OMIT_PROPERTY_NAME = _common.transformations.FIELDS_TO_OMIT_PROPERTY_NAME,
  SPREAD_OPERATOR = _common.transformations.SPREAD_OPERATOR,
  CONSTANT_VALUE_PROPERTY_NAME = _common.transformations.CONSTANT_VALUE_PROPERTY_NAME;
const isInvalidJsonPath = path => (0, _lodash.isError)((0, _lodash.attempt)(() => (0, _jsonpathPlus.JSONPath)({
  path,
  json: {}
})));
exports.isInvalidJsonPath = isInvalidJsonPath;
const isInvalidJsonValue = value => (0, _lodash.isError)((0, _lodash.attempt)(() => JSON.parse(value)));
exports.isInvalidJsonValue = isInvalidJsonValue;
const isSimpleTransformation = transformation => typeof transformation === 'string';
exports.isSimpleTransformation = isSimpleTransformation;
const isArrayIndexString = str => !!/\d+/.test(str);
exports.isArrayIndexString = isArrayIndexString;
const isSpreadOperator = key => key === SPREAD_OPERATOR;
exports.isSpreadOperator = isSpreadOperator;
const isIdentityResponseTransformation = transformationPath => transformationPath === RESPONSE_OBJECT_UNCHANGED;
exports.isIdentityResponseTransformation = isIdentityResponseTransformation;
const getArgumentIndex = s => {
  const match = s.match(/\$\[(?<argIndex>\d+)\]/);
  return match && match.groups && Number(match.groups.argIndex);
};
exports.getArgumentIndex = getArgumentIndex;
const hasValidArgumentIndex = path => getArgumentIndex(path) !== null;
exports.hasValidArgumentIndex = hasValidArgumentIndex;
const isRootObjectIdentifier = s => s === _constants.JSON_PATH_ROOT;
exports.isRootObjectIdentifier = isRootObjectIdentifier;
const isJsonPathExpression = exp => exp && exp.startsWith(_constants.JSON_PATH_ROOT);
exports.isJsonPathExpression = isJsonPathExpression;
const stripJsonPathRootPrefix = jsonPath => jsonPath.replace(`${_constants.JSON_PATH_ROOT}.`, '');
exports.stripJsonPathRootPrefix = stripJsonPathRootPrefix;
const extractIndexAndPath = simpleTransformation => {
  const _simpleTransformation = simpleTransformation.split('.'),
    maybeIndexExpression = _simpleTransformation[0],
    rest = _simpleTransformation.slice(1);
  const index = getArgumentIndex(maybeIndexExpression);
  return {
    index,
    nestedPath: index !== null && rest.length > 0 ? rest.join('.') : null
  };
};
exports.extractIndexAndPath = extractIndexAndPath;
const isMapArrayItemsTransformation = transformationValue => (0, _lodash.has)(transformationValue, ARRAY_ITEMS_PATH_PROPERTY_NAME) && (0, _lodash.has)(transformationValue, ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME);
exports.isMapArrayItemsTransformation = isMapArrayItemsTransformation;
const parseMapArrayItemsTransformation = transformationValue => ({
  sourceArrayExpression: transformationValue[ARRAY_ITEMS_PATH_PROPERTY_NAME],
  itemTransformation: transformationValue[ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME]
});
exports.parseMapArrayItemsTransformation = parseMapArrayItemsTransformation;
const isOmitTransformation = transformationValue => (0, _lodash.has)(transformationValue, OMIT_SOURCE_PROPERTY_NAME) && (0, _lodash.has)(transformationValue, FIELDS_TO_OMIT_PROPERTY_NAME);
exports.isOmitTransformation = isOmitTransformation;
const parseOmitTransformation = transformationValue => ({
  sourceExpression: transformationValue[OMIT_SOURCE_PROPERTY_NAME],
  fieldsToOmit: transformationValue[FIELDS_TO_OMIT_PROPERTY_NAME]
});
exports.parseOmitTransformation = parseOmitTransformation;
const isConstantExpression = value => (0, _lodash.has)(value, CONSTANT_VALUE_PROPERTY_NAME);
exports.isConstantExpression = isConstantExpression;
//# sourceMappingURL=helpers.js.map