{"version":3,"names":["_motionEdmAutogenCommon","require","_lodash","_common","OMIT_SOURCE_PROPERTY_NAME","transformations","FIELDS_TO_OMIT_PROPERTY_NAME","validationError","description","value","parentPath","invalidValue","exports","validateOmitTransformation","source","fieldsToOmit","validateSource","validationErrors","currentPath","omitSourcePropertyPath","join","push","map","sourceValidationError","fieldsToOmitPropertyPath","isArray","every","isString","some","omitPathSegment","segmentCount"],"sources":["../../../../../src/lib/transformations/validations/common.ts"],"sourcesContent":["import { segmentCount } from '@wix/motion-edm-autogen-common';\nimport { every, isArray, isString, some } from 'lodash';\n\nimport { transformations } from '../common';\n\nconst { OMIT_SOURCE_PROPERTY_NAME, FIELDS_TO_OMIT_PROPERTY_NAME } =\n  transformations;\n\nconst validationError = (description, value, parentPath: any = null) => ({\n  invalidValue: value,\n  description,\n  parentPath,\n});\n\nconst validateOmitTransformation = ({\n  source,\n  fieldsToOmit,\n  validateSource,\n  parentPath = null,\n}) => {\n  const validationErrors: any[] = [];\n  const currentPath = parentPath ? [parentPath] : [];\n  const omitSourcePropertyPath = [\n    ...currentPath,\n    OMIT_SOURCE_PROPERTY_NAME,\n  ].join('.');\n\n  validationErrors.push(\n    ...validateSource(source).validationErrors.map((sourceValidationError) => ({\n      ...sourceValidationError,\n      parentPath: omitSourcePropertyPath,\n    })),\n  );\n\n  const fieldsToOmitPropertyPath = [\n    ...currentPath,\n    FIELDS_TO_OMIT_PROPERTY_NAME,\n  ].join('.');\n\n  if (!isArray(fieldsToOmit) || !every(fieldsToOmit, isString)) {\n    validationErrors.push(\n      validationError(\n        'must be an array of strings',\n        fieldsToOmit,\n        fieldsToOmitPropertyPath,\n      ),\n    );\n\n    return validationErrors;\n  }\n\n  if (\n    some(fieldsToOmit, (omitPathSegment) => segmentCount(omitPathSegment) > 1)\n  ) {\n    validationErrors.push(\n      validationError(\n        'must contain non-nested paths only',\n        fieldsToOmit,\n        fieldsToOmitPropertyPath,\n      ),\n    );\n  }\n\n  return validationErrors;\n};\n\nexport { validateOmitTransformation, validationError };\n"],"mappings":";;;;AAAA,IAAAA,uBAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAEA,IAAAE,OAAA,GAAAF,OAAA;AAEA,MAAQG,yBAAyB,GAC/BC,uBAAe,CADTD,yBAAyB;EAAEE,4BAA4B,GAC7DD,uBAAe,CADkBC,4BAA4B;AAG/D,MAAMC,eAAe,GAAGA,CAACC,WAAW,EAAEC,KAAK,EAAEC,UAAe,GAAG,IAAI,MAAM;EACvEC,YAAY,EAAEF,KAAK;EACnBD,WAAW;EACXE;AACF,CAAC,CAAC;AAACE,OAAA,CAAAL,eAAA,GAAAA,eAAA;AAEH,MAAMM,0BAA0B,GAAGA,CAAC;EAClCC,MAAM;EACNC,YAAY;EACZC,cAAc;EACdN,UAAU,GAAG;AACf,CAAC,KAAK;EACJ,MAAMO,gBAAuB,GAAG,EAAE;EAClC,MAAMC,WAAW,GAAGR,UAAU,GAAG,CAACA,UAAU,CAAC,GAAG,EAAE;EAClD,MAAMS,sBAAsB,GAAG,CAC7B,GAAGD,WAAW,EACdd,yBAAyB,CAC1B,CAACgB,IAAI,CAAC,GAAG,CAAC;EAEXH,gBAAgB,CAACI,IAAI,CACnB,GAAGL,cAAc,CAACF,MAAM,CAAC,CAACG,gBAAgB,CAACK,GAAG,CAAEC,qBAAqB,KAAM;IACzE,GAAGA,qBAAqB;IACxBb,UAAU,EAAES;EACd,CAAC,CAAC,CACJ,CAAC;EAED,MAAMK,wBAAwB,GAAG,CAC/B,GAAGN,WAAW,EACdZ,4BAA4B,CAC7B,CAACc,IAAI,CAAC,GAAG,CAAC;EAEX,IAAI,CAAC,IAAAK,eAAO,EAACV,YAAY,CAAC,IAAI,CAAC,IAAAW,aAAK,EAACX,YAAY,EAAEY,gBAAQ,CAAC,EAAE;IAC5DV,gBAAgB,CAACI,IAAI,CACnBd,eAAe,CACb,6BAA6B,EAC7BQ,YAAY,EACZS,wBACF,CACF,CAAC;IAED,OAAOP,gBAAgB;EACzB;EAEA,IACE,IAAAW,YAAI,EAACb,YAAY,EAAGc,eAAe,IAAK,IAAAC,oCAAY,EAACD,eAAe,CAAC,GAAG,CAAC,CAAC,EAC1E;IACAZ,gBAAgB,CAACI,IAAI,CACnBd,eAAe,CACb,oCAAoC,EACpCQ,YAAY,EACZS,wBACF,CACF,CAAC;EACH;EAEA,OAAOP,gBAAgB;AACzB,CAAC;AAACL,OAAA,CAAAC,0BAAA,GAAAA,0BAAA"}