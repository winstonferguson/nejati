"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.reduceTransformation = void 0;
var _deepForEach = _interopRequireDefault(require("deep-for-each"));
var _lodash = require("lodash");
var _helpers = require("../helpers");
var _common = require("./common");
var _constants = require("./constants");
var _customFunctions = require("./custom-functions");
const ARRAY_ITEMS_PATH_PROPERTY_NAME = _common.transformations.ARRAY_ITEMS_PATH_PROPERTY_NAME,
  ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME = _common.transformations.ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME,
  OMIT_SOURCE_PROPERTY_NAME = _common.transformations.OMIT_SOURCE_PROPERTY_NAME,
  FIELDS_TO_OMIT_PROPERTY_NAME = _common.transformations.FIELDS_TO_OMIT_PROPERTY_NAME,
  CONSTANT_VALUE_PROPERTY_NAME = _common.transformations.CONSTANT_VALUE_PROPERTY_NAME;
const TOP_LEVEL_SIMPLE_TRANSFORMATION = _constants.visitorTypes.TOP_LEVEL_SIMPLE_TRANSFORMATION,
  TOP_LEVEL_CUSTOM_FUNCTION = _constants.visitorTypes.TOP_LEVEL_CUSTOM_FUNCTION,
  TOP_LEVEL_SPREAD = _constants.visitorTypes.TOP_LEVEL_SPREAD,
  NESTED_SPREAD = _constants.visitorTypes.NESTED_SPREAD,
  NESTED_UNSUPPORTED_TRANSFORMATION = _constants.visitorTypes.NESTED_UNSUPPORTED_TRANSFORMATION,
  TOP_LEVEL_UNSUPPORTED_TRANSFORMATION = _constants.visitorTypes.TOP_LEVEL_UNSUPPORTED_TRANSFORMATION,
  CUSTOM_FUNCTION = _constants.visitorTypes.CUSTOM_FUNCTION,
  NESTED_SIMPLE_TRANSFORMATION = _constants.visitorTypes.NESTED_SIMPLE_TRANSFORMATION,
  MAP_ARRAY_ITEMS = _constants.visitorTypes.MAP_ARRAY_ITEMS,
  TOP_LEVEL_MAP_ARRAY_ITEMS = _constants.visitorTypes.TOP_LEVEL_MAP_ARRAY_ITEMS,
  TOP_LEVEL_OMIT_TRANSFORMATION = _constants.visitorTypes.TOP_LEVEL_OMIT_TRANSFORMATION,
  NESTED_OMIT_TRANSFORMATION = _constants.visitorTypes.NESTED_OMIT_TRANSFORMATION,
  NESTED_CONSTANT_VALUE = _constants.visitorTypes.NESTED_CONSTANT_VALUE;
const safeResolveDefaultExport = module => {
  const isEsModule = module && module.__esModule && module.default;
  return isEsModule ? module.default : module;
};
const deepForEach = safeResolveDefaultExport(_deepForEach.default);
const withoutSpreadOperatorKeys = obj => Object.keys(obj).filter(k => !(0, _helpers.isSpreadOperator)(k));
const safeInvokeVisitor = (visitors, name, ...args) => {
  const visitor = (0, _lodash.get)(visitors, name);
  return visitor && visitor(...args);
};
const reduceComplexTransformation = (transformation, {
  visitors,
  accumulator
}) => {
  const terminalPaths = [];
  const addTerminals = (path, leaves = []) => leaves.length > 0 ? leaves.forEach(leaf => terminalPaths.push([path, leaf].join('.'))) : terminalPaths.push(path);
  deepForEach(transformation, (value, key, _, path) => {
    if ((0, _lodash.some)(terminalPaths, tp => path.startsWith(tp))) {
      return;
    }
    if ((0, _helpers.isSpreadOperator)(key)) {
      addTerminals(path);
      const spreadOperatorParentPath = path.replace(/\.?\*/, '');
      const values = !(0, _lodash.isArray)(value) ? [value] : value;
      values.forEach(item => {
        if (spreadOperatorParentPath === '') {
          const siblingKeys = withoutSpreadOperatorKeys(transformation);
          safeInvokeVisitor(visitors, TOP_LEVEL_SPREAD, accumulator, item, siblingKeys);
        } else {
          const siblingKeys = withoutSpreadOperatorKeys((0, _lodash.get)(transformation, spreadOperatorParentPath));
          safeInvokeVisitor(visitors, NESTED_SPREAD, accumulator, spreadOperatorParentPath, item, siblingKeys);
        }
      });
      return;
    }
    if ((0, _helpers.isOmitTransformation)(value)) {
      addTerminals(path, [OMIT_SOURCE_PROPERTY_NAME, FIELDS_TO_OMIT_PROPERTY_NAME]);
      const _parseOmitTransformat = (0, _helpers.parseOmitTransformation)(value),
        sourceExpression = _parseOmitTransformat.sourceExpression,
        fieldsToOmit = _parseOmitTransformat.fieldsToOmit;
      safeInvokeVisitor(visitors, NESTED_OMIT_TRANSFORMATION, accumulator, path, sourceExpression, fieldsToOmit);
      return;
    }
    if ((0, _helpers.isMapArrayItemsTransformation)(value)) {
      addTerminals(path, [ARRAY_ITEMS_PATH_PROPERTY_NAME, ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME]);
      const _parseMapArrayItemsTr = (0, _helpers.parseMapArrayItemsTransformation)(value),
        sourceArrayExpression = _parseMapArrayItemsTr.sourceArrayExpression,
        itemTransformation = _parseMapArrayItemsTr.itemTransformation;
      safeInvokeVisitor(visitors, MAP_ARRAY_ITEMS, accumulator, path, sourceArrayExpression, itemTransformation);
      return;
    }
    if ((0, _customFunctions.isFunctionCallExpression)(value)) {
      const _parseCustomFunctionC = (0, _customFunctions.parseCustomFunctionCall)(value),
        functionName = _parseCustomFunctionC.functionName,
        argumentExpressions = _parseCustomFunctionC.argumentExpressions;
      safeInvokeVisitor(visitors, CUSTOM_FUNCTION, accumulator, path, functionName, argumentExpressions, value);
      return;
    }
    if ((0, _helpers.isConstantExpression)(value)) {
      addTerminals(path, [CONSTANT_VALUE_PROPERTY_NAME]);
      safeInvokeVisitor(visitors, NESTED_CONSTANT_VALUE, {
        accumulator,
        path,
        value: value[CONSTANT_VALUE_PROPERTY_NAME]
      });
      return;
    }
    if ((0, _lodash.isString)(value)) {
      if ((0, _helpers.isJsonPathExpression)(value)) {
        safeInvokeVisitor(visitors, NESTED_SIMPLE_TRANSFORMATION, accumulator, path, value);
      } else {
        safeInvokeVisitor(visitors, NESTED_UNSUPPORTED_TRANSFORMATION, accumulator, path, value);
      }
    }
  });
  return accumulator;
};
const reduceTransformation = (transformation, {
  visitors,
  accumulator
}) => {
  if ((0, _helpers.isSimpleTransformation)(transformation)) {
    switch (true) {
      case (0, _helpers.isJsonPathExpression)(transformation):
        return safeInvokeVisitor(visitors, TOP_LEVEL_SIMPLE_TRANSFORMATION, transformation);
      case (0, _customFunctions.isFunctionCallExpression)(transformation):
        {
          const _parseCustomFunctionC2 = (0, _customFunctions.parseCustomFunctionCall)(transformation),
            functionName = _parseCustomFunctionC2.functionName,
            argumentExpressions = _parseCustomFunctionC2.argumentExpressions;
          return safeInvokeVisitor(visitors, TOP_LEVEL_CUSTOM_FUNCTION, functionName, argumentExpressions, transformation);
        }
      default:
        return safeInvokeVisitor(visitors, TOP_LEVEL_UNSUPPORTED_TRANSFORMATION, transformation);
    }
  }
  if ((0, _helpers.isOmitTransformation)(transformation)) {
    const _parseOmitTransformat2 = (0, _helpers.parseOmitTransformation)(transformation),
      sourceExpression = _parseOmitTransformat2.sourceExpression,
      fieldsToOmit = _parseOmitTransformat2.fieldsToOmit;
    return safeInvokeVisitor(visitors, TOP_LEVEL_OMIT_TRANSFORMATION, sourceExpression, fieldsToOmit);
  }
  if ((0, _helpers.isMapArrayItemsTransformation)(transformation)) {
    const _parseMapArrayItemsTr2 = (0, _helpers.parseMapArrayItemsTransformation)(transformation),
      sourceArrayExpression = _parseMapArrayItemsTr2.sourceArrayExpression,
      itemTransformation = _parseMapArrayItemsTr2.itemTransformation;
    return safeInvokeVisitor(visitors, TOP_LEVEL_MAP_ARRAY_ITEMS, sourceArrayExpression, itemTransformation);
  }
  return reduceComplexTransformation(transformation, {
    visitors,
    accumulator
  });
};
exports.reduceTransformation = reduceTransformation;
//# sourceMappingURL=reduceTransformation.js.map