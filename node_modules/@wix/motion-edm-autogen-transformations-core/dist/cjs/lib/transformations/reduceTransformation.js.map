{"version":3,"names":["_deepForEach","_interopRequireDefault","require","_lodash","_helpers","_common","_constants","_customFunctions","ARRAY_ITEMS_PATH_PROPERTY_NAME","transformations","ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME","OMIT_SOURCE_PROPERTY_NAME","FIELDS_TO_OMIT_PROPERTY_NAME","CONSTANT_VALUE_PROPERTY_NAME","TOP_LEVEL_SIMPLE_TRANSFORMATION","visitorTypes","TOP_LEVEL_CUSTOM_FUNCTION","TOP_LEVEL_SPREAD","NESTED_SPREAD","NESTED_UNSUPPORTED_TRANSFORMATION","TOP_LEVEL_UNSUPPORTED_TRANSFORMATION","CUSTOM_FUNCTION","NESTED_SIMPLE_TRANSFORMATION","MAP_ARRAY_ITEMS","TOP_LEVEL_MAP_ARRAY_ITEMS","TOP_LEVEL_OMIT_TRANSFORMATION","NESTED_OMIT_TRANSFORMATION","NESTED_CONSTANT_VALUE","safeResolveDefaultExport","module","isEsModule","__esModule","default","deepForEach","deepForEachModule","withoutSpreadOperatorKeys","obj","Object","keys","filter","k","isSpreadOperator","safeInvokeVisitor","visitors","name","args","visitor","get","reduceComplexTransformation","transformation","accumulator","terminalPaths","addTerminals","path","leaves","length","forEach","leaf","push","join","value","key","_","some","tp","startsWith","spreadOperatorParentPath","replace","values","isArray","item","siblingKeys","isOmitTransformation","_parseOmitTransformat","parseOmitTransformation","sourceExpression","fieldsToOmit","isMapArrayItemsTransformation","_parseMapArrayItemsTr","parseMapArrayItemsTransformation","sourceArrayExpression","itemTransformation","isFunctionCallExpression","_parseCustomFunctionC","parseCustomFunctionCall","functionName","argumentExpressions","isConstantExpression","isString","isJsonPathExpression","reduceTransformation","isSimpleTransformation","_parseCustomFunctionC2","_parseOmitTransformat2","_parseMapArrayItemsTr2","exports"],"sources":["../../../../src/lib/transformations/reduceTransformation.ts"],"sourcesContent":["import deepForEachModule from 'deep-for-each';\nimport { get, isArray, isString, some } from 'lodash';\n\nimport {\n  isConstantExpression,\n  isJsonPathExpression,\n  isMapArrayItemsTransformation,\n  isOmitTransformation,\n  isSimpleTransformation,\n  isSpreadOperator,\n  parseMapArrayItemsTransformation,\n  parseOmitTransformation,\n} from '../helpers';\nimport { transformations } from './common';\nimport { visitorTypes } from './constants';\nimport {\n  isFunctionCallExpression,\n  parseCustomFunctionCall,\n} from './custom-functions';\n\nconst {\n  ARRAY_ITEMS_PATH_PROPERTY_NAME,\n  ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME,\n  OMIT_SOURCE_PROPERTY_NAME,\n  FIELDS_TO_OMIT_PROPERTY_NAME,\n  CONSTANT_VALUE_PROPERTY_NAME,\n} = transformations;\n\nconst {\n  TOP_LEVEL_SIMPLE_TRANSFORMATION,\n  TOP_LEVEL_CUSTOM_FUNCTION,\n  TOP_LEVEL_SPREAD,\n  NESTED_SPREAD,\n  NESTED_UNSUPPORTED_TRANSFORMATION,\n  TOP_LEVEL_UNSUPPORTED_TRANSFORMATION,\n  CUSTOM_FUNCTION,\n  NESTED_SIMPLE_TRANSFORMATION,\n  MAP_ARRAY_ITEMS,\n  TOP_LEVEL_MAP_ARRAY_ITEMS,\n  TOP_LEVEL_OMIT_TRANSFORMATION,\n  NESTED_OMIT_TRANSFORMATION,\n  NESTED_CONSTANT_VALUE,\n} = visitorTypes;\n\nconst safeResolveDefaultExport = (module) => {\n  const isEsModule = module && module.__esModule && module.default;\n\n  return isEsModule ? module.default : module;\n};\n\nconst deepForEach = safeResolveDefaultExport(deepForEachModule);\n\nconst withoutSpreadOperatorKeys = (obj) =>\n  Object.keys(obj).filter((k) => !isSpreadOperator(k));\n\nconst safeInvokeVisitor = (visitors, name, ...args) => {\n  const visitor = get(visitors, name);\n\n  return visitor && visitor(...args);\n};\n\nconst reduceComplexTransformation = (\n  transformation,\n  { visitors, accumulator },\n) => {\n  const terminalPaths: any[] = [];\n  const addTerminals = (path, leaves: any[] = []) =>\n    leaves.length > 0\n      ? leaves.forEach((leaf) => terminalPaths.push([path, leaf].join('.')))\n      : terminalPaths.push(path);\n\n  deepForEach(transformation, (value, key, _, path) => {\n    if (some(terminalPaths, (tp) => path.startsWith(tp))) {\n      return;\n    }\n\n    if (isSpreadOperator(key)) {\n      addTerminals(path);\n\n      const spreadOperatorParentPath = path.replace(/\\.?\\*/, '');\n\n      const values = !isArray(value) ? [value] : value;\n\n      values.forEach((item) => {\n        if (spreadOperatorParentPath === '') {\n          const siblingKeys = withoutSpreadOperatorKeys(transformation);\n          safeInvokeVisitor(\n            visitors,\n            TOP_LEVEL_SPREAD,\n            accumulator,\n            item,\n            siblingKeys,\n          );\n        } else {\n          const siblingKeys = withoutSpreadOperatorKeys(\n            get(transformation, spreadOperatorParentPath),\n          );\n          safeInvokeVisitor(\n            visitors,\n            NESTED_SPREAD,\n            accumulator,\n            spreadOperatorParentPath,\n            item,\n            siblingKeys,\n          );\n        }\n      });\n\n      return;\n    }\n\n    if (isOmitTransformation(value)) {\n      addTerminals(path, [\n        OMIT_SOURCE_PROPERTY_NAME,\n        FIELDS_TO_OMIT_PROPERTY_NAME,\n      ]);\n      const { sourceExpression, fieldsToOmit } = parseOmitTransformation(value);\n\n      safeInvokeVisitor(\n        visitors,\n        NESTED_OMIT_TRANSFORMATION,\n        accumulator,\n        path,\n        sourceExpression,\n        fieldsToOmit,\n      );\n\n      return;\n    }\n\n    if (isMapArrayItemsTransformation(value)) {\n      addTerminals(path, [\n        ARRAY_ITEMS_PATH_PROPERTY_NAME,\n        ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME,\n      ]);\n\n      const { sourceArrayExpression, itemTransformation } =\n        parseMapArrayItemsTransformation(value);\n\n      safeInvokeVisitor(\n        visitors,\n        MAP_ARRAY_ITEMS,\n        accumulator,\n        path,\n        sourceArrayExpression,\n        itemTransformation,\n      );\n\n      return;\n    }\n\n    if (isFunctionCallExpression(value)) {\n      const { functionName, argumentExpressions } =\n        parseCustomFunctionCall(value);\n\n      safeInvokeVisitor(\n        visitors,\n        CUSTOM_FUNCTION,\n        accumulator,\n        path,\n        functionName,\n        argumentExpressions,\n        value,\n      );\n\n      return;\n    }\n\n    if (isConstantExpression(value)) {\n      addTerminals(path, [CONSTANT_VALUE_PROPERTY_NAME]);\n\n      safeInvokeVisitor(visitors, NESTED_CONSTANT_VALUE, {\n        accumulator,\n        path,\n        value: value[CONSTANT_VALUE_PROPERTY_NAME],\n      });\n\n      return;\n    }\n\n    if (isString(value)) {\n      if (isJsonPathExpression(value)) {\n        safeInvokeVisitor(\n          visitors,\n          NESTED_SIMPLE_TRANSFORMATION,\n          accumulator,\n          path,\n          value,\n        );\n      } else {\n        safeInvokeVisitor(\n          visitors,\n          NESTED_UNSUPPORTED_TRANSFORMATION,\n          accumulator,\n          path,\n          value,\n        );\n      }\n    }\n  });\n\n  return accumulator;\n};\n\nconst reduceTransformation = (\n  transformation,\n  { visitors, accumulator }: { visitors: any; accumulator?: any },\n) => {\n  if (isSimpleTransformation(transformation)) {\n    switch (true) {\n      case isJsonPathExpression(transformation):\n        return safeInvokeVisitor(\n          visitors,\n          TOP_LEVEL_SIMPLE_TRANSFORMATION,\n          transformation,\n        );\n\n      case isFunctionCallExpression(transformation): {\n        const { functionName, argumentExpressions } =\n          parseCustomFunctionCall(transformation);\n\n        return safeInvokeVisitor(\n          visitors,\n          TOP_LEVEL_CUSTOM_FUNCTION,\n          functionName,\n          argumentExpressions,\n          transformation,\n        );\n      }\n\n      default:\n        return safeInvokeVisitor(\n          visitors,\n          TOP_LEVEL_UNSUPPORTED_TRANSFORMATION,\n          transformation,\n        );\n    }\n  }\n\n  if (isOmitTransformation(transformation)) {\n    const { sourceExpression, fieldsToOmit } =\n      parseOmitTransformation(transformation);\n\n    return safeInvokeVisitor(\n      visitors,\n      TOP_LEVEL_OMIT_TRANSFORMATION,\n      sourceExpression,\n      fieldsToOmit,\n    );\n  }\n\n  if (isMapArrayItemsTransformation(transformation)) {\n    const { sourceArrayExpression, itemTransformation } =\n      parseMapArrayItemsTransformation(transformation);\n\n    return safeInvokeVisitor(\n      visitors,\n      TOP_LEVEL_MAP_ARRAY_ITEMS,\n      sourceArrayExpression,\n      itemTransformation,\n    );\n  }\n\n  return reduceComplexTransformation(transformation, { visitors, accumulator });\n};\n\nexport { reduceTransformation };\n"],"mappings":"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"}