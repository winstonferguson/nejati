"use strict";

var _motionRuntimeTestContext = require("@wix/motion-runtime-test-context");
var _lodash = require("lodash");
var _ = require("../../..");
const _preset$query = _.preset.query,
  buildRequestTransformation = _preset$query.buildRequestTransformation,
  buildResponseTransformation = _preset$query.buildResponseTransformation;
describe('query-method transformations', () => {
  describe('buildRequestTransformation', () => {
    // eslint-disable-next-line max-len
    test('sets the query object as a property named via requestQueryObjectPropertyName, and spreads the 2nd argument', () => {
      const requestQueryObjectPropertyName = (0, _motionRuntimeTestContext.aString)();
      const transformationString = buildRequestTransformation({
        requestQueryObjectPropertyName
      });
      expect(transformationString).toStrictEqual({
        [requestQueryObjectPropertyName]: '$[0]',
        '*': '$[1]'
      });
    });

    // eslint-disable-next-line max-len
    test("sets the given query tree under the 'query' property as a default, with the second argument spread into the payload", () => {
      const transformationString = buildRequestTransformation();
      expect(transformationString).toStrictEqual({
        query: '$[0]',
        '*': '$[1]'
      });
    });
  });
  describe('buildResponseTransformation', () => {
    const _times = (0, _lodash.times)(2, () => (0, _motionRuntimeTestContext.aString)()),
      responseMessageResultPath = _times[0],
      responseMessagePagingMetadataPath = _times[1];
    test('unwraps the value of the provided property-path', () => {
      const transformationObject = buildResponseTransformation({
        responseMessageResultPath,
        responseMessagePagingMetadataPath
      });
      expect(transformationObject).toStrictEqual({
        items: `$.${responseMessageResultPath}`,
        pagingMetadata: `$.${responseMessagePagingMetadataPath}`
      });
    });
    test('adds an item-transformation when provided', () => {
      const itemTransformation = `$.some.path.${(0, _motionRuntimeTestContext.aString)()}`;
      const transformationObject = buildResponseTransformation({
        responseMessageResultPath,
        responseMessagePagingMetadataPath,
        itemTransformation
      });
      expect(transformationObject).toStrictEqual({
        items: {
          '@path': `$.${responseMessageResultPath}`,
          '@itemTransformation': itemTransformation
        },
        pagingMetadata: `$.${responseMessagePagingMetadataPath}`
      });
    });
  });
});
//# sourceMappingURL=query-transformation.spec.js.map