"use strict";

var _motionRuntimeTestContext = require("@wix/motion-runtime-test-context");
var _lodash = require("lodash");
var _ = require("../../..");
const RESPONSE_OBJECT_UNCHANGED = _.transformations.RESPONSE_OBJECT_UNCHANGED;
const _preset$delete = _.preset.delete,
  buildRequestTransformation = _preset$delete.buildRequestTransformation,
  buildResponseTransformation = _preset$delete.buildResponseTransformation;
describe('delete-method transformations', () => {
  describe('buildRequestTransformation', () => {
    const requestMessageIdentifierPath = (0, _motionRuntimeTestContext.aString)();
    test('creates a transformation that maps the first argument into requestMessageIdentifierPath', () => {
      const transformationObject = buildRequestTransformation({
        requestMessageIdentifierPath
      });
      expect(transformationObject).toStrictEqual({
        [requestMessageIdentifierPath]: '$[0]'
      });
    });
    test(`creates a transformation that maps the 2nd argument into requestMessageOptionsPath when provided`, () => {
      const requestMessageOptionsPath = (0, _motionRuntimeTestContext.aString)();
      const transformationObject = buildRequestTransformation({
        requestMessageIdentifierPath,
        requestMessageOptionsPath
      });
      expect(transformationObject).toStrictEqual({
        [requestMessageIdentifierPath]: '$[0]',
        [requestMessageOptionsPath]: '$[1]'
      });
    });
    test('supports shared paths for requestMessageIdentifierPath and requestMessageOptionsPath', () => {
      const sharedPath = (0, _motionRuntimeTestContext.aString)();
      const identifierPathSegment = (0, _motionRuntimeTestContext.aString)();
      const transformationObject = buildRequestTransformation({
        requestMessageIdentifierPath: `${sharedPath}.${identifierPathSegment}`,
        requestMessageOptionsPath: sharedPath
      });
      expect(transformationObject).toStrictEqual({
        [sharedPath]: {
          [identifierPathSegment]: '$[0]',
          '*': '$[1]'
        }
      });
    });
    test('supports nested paths', () => {
      // @ts-expect-error
      const idPathSegments = (0, _lodash.times)(2, _motionRuntimeTestContext.aString);
      // @ts-expect-error
      const optionsPathSegments = (0, _lodash.times)(2, _motionRuntimeTestContext.aString);
      const transformationObject = buildRequestTransformation({
        requestMessageIdentifierPath: idPathSegments.join('.'),
        requestMessageOptionsPath: optionsPathSegments.join('.')
      });
      expect(transformationObject).toStrictEqual({
        [idPathSegments[0]]: {
          [idPathSegments[1]]: '$[0]'
        },
        [optionsPathSegments[0]]: {
          [optionsPathSegments[1]]: '$[1]'
        }
      });
    });
  });
  describe('buildResponseTransformation', () => {
    test('returns the identity transformation', () => {
      const trasformationString = buildResponseTransformation();
      expect(trasformationString).toStrictEqual(RESPONSE_OBJECT_UNCHANGED);
    });
  });
});
//# sourceMappingURL=delete-transformation.spec.js.map