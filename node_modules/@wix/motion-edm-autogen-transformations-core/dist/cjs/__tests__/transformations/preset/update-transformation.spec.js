"use strict";

var _motionRuntimeTestContext = require("@wix/motion-runtime-test-context");
var _lodash = require("lodash");
var _ = require("../../..");
const _preset$update = _.preset.update,
  buildRequestTransformation = _preset$update.buildRequestTransformation,
  buildResponseTransformation = _preset$update.buildResponseTransformation;
describe('update-method transformations', () => {
  describe('buildRequestTransformation', () => {
    const requestMessageOptionsPath = (0, _motionRuntimeTestContext.aString)();
    const requestMessageEntityPath = (0, _motionRuntimeTestContext.aString)();
    const requestMessageEntityIdentifierField = (0, _motionRuntimeTestContext.aString)();
    test('creates a transformation mapping args into requestMessageIdentifierPath and requestMessageEntityPath', () => {
      const transformedObject = buildRequestTransformation({
        requestMessageEntityIdentifierField,
        requestMessageEntityPath
      });
      expect(transformedObject).toStrictEqual({
        [requestMessageEntityPath]: {
          [requestMessageEntityIdentifierField]: '$[0]',
          '*': '$[1]'
        }
      });
    });
    test(`creates a transformation that maps the 3rd argument into requestMessageOptionsPath when provided`, () => {
      const transformedObject = buildRequestTransformation({
        requestMessageEntityIdentifierField,
        requestMessageEntityPath,
        requestMessageOptionsPath
      });
      expect(transformedObject).toStrictEqual({
        [requestMessageEntityPath]: {
          [requestMessageEntityIdentifierField]: '$[0]',
          '*': '$[1]'
        },
        [requestMessageOptionsPath]: '$[2]'
      });
    });
    test('supports nested paths for requestMessageEntityPath and requestMessageOptionsPath', () => {
      // @ts-expect-error
      const requestMessageEntityPathSegments = (0, _lodash.times)(2, _motionRuntimeTestContext.aString);
      // @ts-expect-error
      const optionsPathSegments = (0, _lodash.times)(2, _motionRuntimeTestContext.aString);
      const transformationObject = buildRequestTransformation({
        requestMessageEntityIdentifierField,
        requestMessageEntityPath: requestMessageEntityPathSegments.join('.'),
        requestMessageOptionsPath: optionsPathSegments.join('.')
      });
      expect(transformationObject).toStrictEqual({
        [requestMessageEntityPathSegments[0]]: {
          [requestMessageEntityPathSegments[1]]: {
            [requestMessageEntityIdentifierField]: '$[0]',
            '*': '$[1]'
          }
        },
        [optionsPathSegments[0]]: {
          [optionsPathSegments[1]]: '$[2]'
        }
      });
    });
    test('supports shared paths for requestMessageEntityPath and requestMessageOptionsPath', () => {
      const sharedPath = (0, _motionRuntimeTestContext.aString)();
      const transformationObject = buildRequestTransformation({
        requestMessageEntityIdentifierField,
        requestMessageEntityPath: sharedPath,
        requestMessageOptionsPath: sharedPath
      });
      expect(transformationObject).toStrictEqual({
        [sharedPath]: {
          [requestMessageEntityIdentifierField]: '$[0]',
          '*': ['$[1]', '$[2]']
        }
      });
    });
  });
  describe('buildResponseTransformation', () => {
    test('unwraps the value of the provided property-path', () => {
      const responseMessageResultPath = (0, _motionRuntimeTestContext.aString)();
      const transformationString = buildResponseTransformation({
        responseMessageResultPath
      });
      expect(transformationString).toStrictEqual(`$.${responseMessageResultPath}`);
    });
  });
});
//# sourceMappingURL=update-transformation.spec.js.map