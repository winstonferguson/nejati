"use strict";

var _motionRuntimeTestContext = require("@wix/motion-runtime-test-context");
var _ = require("..");
var _corvidEntity = require("../lib/corvid-entity");
const toCorvidName = _.corvidEntities.toCorvidName,
  fromCorvidName = _.corvidEntities.fromCorvidName;
describe('corvid entities transformers', () => {
  describe('toCorvidName', () => {
    test.each`
      name             | expected
      ${'id'}          | ${'_id'}
      ${'createdDate'} | ${'_createdDate'}
      ${'updatedDate'} | ${'_updatedDate'}
    `('adjusts $name to $expected', ({
      name,
      expected
    }) => {
      expect(toCorvidName(name)).toStrictEqual(expected);
    });
    test('returns the given name when it should not be changed', () => {
      const name = (0, _motionRuntimeTestContext.aString)();
      expect(toCorvidName(name)).toStrictEqual(name);
    });
  });
  describe('fromCorvidName', () => {
    test.each`
      name              | expected
      ${'_id'}          | ${'id'}
      ${'_createdDate'} | ${'createdDate'}
      ${'_updatedDate'} | ${'updatedDate'}
    `('adjusts $name to $expected', ({
      name,
      expected
    }) => {
      expect(fromCorvidName(name)).toStrictEqual(expected);
    });
    test('returns the given name when it should not be changed', () => {
      const name = (0, _motionRuntimeTestContext.aString)();
      expect(fromCorvidName(name)).toStrictEqual(name);
    });
  });
  describe('internal methods', () => {
    const nonReservedName = (0, _motionRuntimeTestContext.aString)();
    describe('isReservedCorvidFieldName', () => {
      test('returns true if the provided name is a reserved Corvid field-name', () => {
        const reservedCorvidName = (0, _motionRuntimeTestContext.aRandomItemFrom)(['_id', '_createdDate', '_updatedDate']);
        expect((0, _corvidEntity.isReservedCorvidFieldName)(reservedCorvidName)).toBeTruthy();
      });
      test('returns false if the provided name is not a reserved common field-name', () => {
        expect((0, _corvidEntity.isReservedCorvidFieldName)(nonReservedName)).toBeFalsy();
      });
    });
    describe('isReservedCommonFieldName', () => {
      test('returns true if the provided name is a reserved common field-name', () => {
        const commonReservedName = (0, _motionRuntimeTestContext.aRandomItemFrom)(['id', 'createdDate', 'updatedDate']);
        expect((0, _corvidEntity.isReservedCommonFieldName)(commonReservedName)).toBeTruthy();
      });
      test('returns false if the provided name is not a reserved common field-name', () => {
        expect((0, _corvidEntity.isReservedCommonFieldName)(nonReservedName)).toBeFalsy();
      });
    });
  });
});
//# sourceMappingURL=corvid-entity.spec.js.map