"use strict";

var _motionRuntimeTestContext = require("@wix/motion-runtime-test-context");
var _ = require("..");
describe('getArgumentCardinality', () => {
  describe('simple transformation', () => {
    const simpleTransformation = `$[${(0, _motionRuntimeTestContext.aNumber)({
      min: 0,
      max: 9
    })}].${(0, _motionRuntimeTestContext.aString)()}`;
    expect((0, _.getArgumentCardinality)(simpleTransformation)).toStrictEqual(1);
  });
  describe('complex transformations', () => {
    const nonArgumentMapping = (0, _motionRuntimeTestContext.anObject)();
    const argumentMapping = {
      [(0, _motionRuntimeTestContext.aString)()]: '$[0].abc',
      [(0, _motionRuntimeTestContext.aString)()]: '$[1].id',
      [(0, _motionRuntimeTestContext.aString)()]: '$[2].a',
      [(0, _motionRuntimeTestContext.aString)()]: '$[3].a.b.c',
      ...nonArgumentMapping
    };
    const argumentMappingArray = ['$[0].a', '$[1].b', 'a.b.c'];
    test('counts the number of arguments referenced in a given transformation object', () => {
      const complexMappingTransformation = {
        ...nonArgumentMapping,
        ...argumentMapping
      };
      expect((0, _.getArgumentCardinality)(complexMappingTransformation)).toStrictEqual(4);
    });
    test('counts the number of arguments referenced in a transformation object with arrays', () => {
      const complexMappingTransformation = {
        ...nonArgumentMapping,
        [(0, _motionRuntimeTestContext.aString)()]: argumentMappingArray
      };
      expect((0, _.getArgumentCardinality)(complexMappingTransformation)).toStrictEqual(2);
    });
    test('counts only unique occurrences', () => {
      const complexMappingTransformation = {
        ...nonArgumentMapping,
        ...argumentMapping,
        [(0, _motionRuntimeTestContext.aString)()]: argumentMappingArray
      };
      expect((0, _.getArgumentCardinality)(complexMappingTransformation)).toStrictEqual(4);
    });
    test('does not fail on special transformation cases', () => {
      const specialTransformation = {
        [(0, _motionRuntimeTestContext.aString)()]: {
          '@constant': true
        },
        [(0, _motionRuntimeTestContext.aString)()]: {
          '@constant': null
        },
        [(0, _motionRuntimeTestContext.aString)()]: '$[0].a.b.c.'
      };
      expect((0, _.getArgumentCardinality)(specialTransformation)).toStrictEqual(1);
    });
  });
});
//# sourceMappingURL=getArgumentCardinality.spec.js.map