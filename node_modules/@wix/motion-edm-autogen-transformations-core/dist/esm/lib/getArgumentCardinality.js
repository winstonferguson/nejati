import { isArray, isPlainObject } from 'lodash';
var extractArgumentFromString = function (str, seen) {
    if (seen === void 0) { seen = new Set(); }
    // We expect a single argument in a valid string-transformation at most, e.g. $[1].someField
    var matches = str.match(/(\$\[\d+\])/);
    if (matches) {
        seen.add(matches.pop());
    }
    return seen;
};
var extractArgumensFromObject = function (object, seen) {
    if (seen === void 0) { seen = new Set(); }
    return Object.keys(object).reduce(function (acc, key) {
        var value = object[key];
        if (isPlainObject(value) || isArray(value)) {
            extractArgumensFromObject(value, seen);
        }
        else if (typeof value === 'string') {
            extractArgumentFromString(value, seen);
        }
        return acc;
    }, seen);
};
var getArgumentCardinality = function (transformation) {
    return typeof transformation === 'string'
        ? extractArgumentFromString(transformation).size
        : extractArgumensFromObject(transformation).size;
};
export { getArgumentCardinality };
//# sourceMappingURL=getArgumentCardinality.js.map