import { JSONPath } from 'jsonpath-plus';
import { attempt, has, isError } from 'lodash';
import { transformations } from './transformations/common';
import { JSON_PATH_ROOT } from './transformations/constants';
var RESPONSE_OBJECT_UNCHANGED = transformations.RESPONSE_OBJECT_UNCHANGED, ARRAY_ITEMS_PATH_PROPERTY_NAME = transformations.ARRAY_ITEMS_PATH_PROPERTY_NAME, ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME = transformations.ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME, OMIT_SOURCE_PROPERTY_NAME = transformations.OMIT_SOURCE_PROPERTY_NAME, FIELDS_TO_OMIT_PROPERTY_NAME = transformations.FIELDS_TO_OMIT_PROPERTY_NAME, SPREAD_OPERATOR = transformations.SPREAD_OPERATOR, CONSTANT_VALUE_PROPERTY_NAME = transformations.CONSTANT_VALUE_PROPERTY_NAME;
var isInvalidJsonPath = function (path) {
    return isError(attempt(function () { return JSONPath({ path: path, json: {} }); }));
};
var isInvalidJsonValue = function (value) { return isError(attempt(function () { return JSON.parse(value); })); };
var isSimpleTransformation = function (transformation) {
    return typeof transformation === 'string';
};
var isArrayIndexString = function (str) { return !!/\d+/.test(str); };
var isSpreadOperator = function (key) { return key === SPREAD_OPERATOR; };
var isIdentityResponseTransformation = function (transformationPath) {
    return transformationPath === RESPONSE_OBJECT_UNCHANGED;
};
var getArgumentIndex = function (s) {
    var match = s.match(/\$\[(?<argIndex>\d+)\]/);
    return match && match.groups && Number(match.groups.argIndex);
};
var hasValidArgumentIndex = function (path) { return getArgumentIndex(path) !== null; };
var isRootObjectIdentifier = function (s) { return s === JSON_PATH_ROOT; };
var isJsonPathExpression = function (exp) { return exp && exp.startsWith(JSON_PATH_ROOT); };
var stripJsonPathRootPrefix = function (jsonPath) {
    return jsonPath.replace("".concat(JSON_PATH_ROOT, "."), '');
};
var extractIndexAndPath = function (simpleTransformation) {
    var _a = simpleTransformation.split('.'), maybeIndexExpression = _a[0], rest = _a.slice(1);
    var index = getArgumentIndex(maybeIndexExpression);
    return {
        index: index,
        nestedPath: index !== null && rest.length > 0 ? rest.join('.') : null,
    };
};
var isMapArrayItemsTransformation = function (transformationValue) {
    return has(transformationValue, ARRAY_ITEMS_PATH_PROPERTY_NAME) &&
        has(transformationValue, ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME);
};
var parseMapArrayItemsTransformation = function (transformationValue) { return ({
    sourceArrayExpression: transformationValue[ARRAY_ITEMS_PATH_PROPERTY_NAME],
    itemTransformation: transformationValue[ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME],
}); };
var isOmitTransformation = function (transformationValue) {
    return has(transformationValue, OMIT_SOURCE_PROPERTY_NAME) &&
        has(transformationValue, FIELDS_TO_OMIT_PROPERTY_NAME);
};
var parseOmitTransformation = function (transformationValue) { return ({
    sourceExpression: transformationValue[OMIT_SOURCE_PROPERTY_NAME],
    fieldsToOmit: transformationValue[FIELDS_TO_OMIT_PROPERTY_NAME],
}); };
var isConstantExpression = function (value) {
    return has(value, CONSTANT_VALUE_PROPERTY_NAME);
};
export { extractIndexAndPath, getArgumentIndex, hasValidArgumentIndex, isArrayIndexString, isConstantExpression, isIdentityResponseTransformation, isInvalidJsonPath, isInvalidJsonValue, isJsonPathExpression, isMapArrayItemsTransformation, isOmitTransformation, isRootObjectIdentifier, isSimpleTransformation, isSpreadOperator, parseMapArrayItemsTransformation, parseOmitTransformation, stripJsonPathRootPrefix, };
//# sourceMappingURL=helpers.js.map