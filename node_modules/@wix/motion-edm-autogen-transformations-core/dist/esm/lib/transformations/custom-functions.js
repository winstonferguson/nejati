import { get, isString, trim } from 'lodash';
// eslint-disable-next-line max-len
var FUNCTION_CALL_EXPRESSION_REGEX = /^#(?<functionName>[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)\((?<argumentExpressions>[\S ]*)\)$/;
var parseCustomFunctionCall = function (functionCallExpression) {
    var match = functionCallExpression.match(FUNCTION_CALL_EXPRESSION_REGEX);
    var argumentExpressions = get(match, 'groups.argumentExpressions', null);
    return {
        functionName: get(match, 'groups.functionName', null),
        argumentExpressions: argumentExpressions === null
            ? argumentExpressions
            : argumentExpressions
                .split(',')
                .filter(function (s) { return s; })
                .map(trim),
    };
};
var isFunctionCallExpression = function (expression) {
    return isString(expression) && expression.startsWith('#');
};
var runCustomFunctionCallExpression = function (_a) {
    var customFunctions = _a.customFunctions, functionName = _a.functionName, _b = _a.argumentValues, argumentValues = _b === void 0 ? [] : _b, transformationParentPath = _a.transformationParentPath;
    var customFunction = get(customFunctions, functionName);
    if (!customFunction) {
        throw new Error("unrecognized custom function \"".concat(functionName, "\""));
    }
    try {
        return customFunction.apply(void 0, argumentValues);
    }
    catch (error) {
        throw new Error("Transforming ".concat(transformationParentPath, " failed, #").concat(functionName, " threw: \"").concat(error.message, "\" for arguments: ").concat(JSON.stringify(argumentValues)));
    }
};
export { isFunctionCallExpression, parseCustomFunctionCall, runCustomFunctionCallExpression, };
//# sourceMappingURL=custom-functions.js.map