import deepForEachModule from 'deep-for-each';
import { get, isArray, isString, some } from 'lodash';
import { isConstantExpression, isJsonPathExpression, isMapArrayItemsTransformation, isOmitTransformation, isSimpleTransformation, isSpreadOperator, parseMapArrayItemsTransformation, parseOmitTransformation, } from '../helpers';
import { transformations } from './common';
import { visitorTypes } from './constants';
import { isFunctionCallExpression, parseCustomFunctionCall, } from './custom-functions';
var ARRAY_ITEMS_PATH_PROPERTY_NAME = transformations.ARRAY_ITEMS_PATH_PROPERTY_NAME, ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME = transformations.ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME, OMIT_SOURCE_PROPERTY_NAME = transformations.OMIT_SOURCE_PROPERTY_NAME, FIELDS_TO_OMIT_PROPERTY_NAME = transformations.FIELDS_TO_OMIT_PROPERTY_NAME, CONSTANT_VALUE_PROPERTY_NAME = transformations.CONSTANT_VALUE_PROPERTY_NAME;
var TOP_LEVEL_SIMPLE_TRANSFORMATION = visitorTypes.TOP_LEVEL_SIMPLE_TRANSFORMATION, TOP_LEVEL_CUSTOM_FUNCTION = visitorTypes.TOP_LEVEL_CUSTOM_FUNCTION, TOP_LEVEL_SPREAD = visitorTypes.TOP_LEVEL_SPREAD, NESTED_SPREAD = visitorTypes.NESTED_SPREAD, NESTED_UNSUPPORTED_TRANSFORMATION = visitorTypes.NESTED_UNSUPPORTED_TRANSFORMATION, TOP_LEVEL_UNSUPPORTED_TRANSFORMATION = visitorTypes.TOP_LEVEL_UNSUPPORTED_TRANSFORMATION, CUSTOM_FUNCTION = visitorTypes.CUSTOM_FUNCTION, NESTED_SIMPLE_TRANSFORMATION = visitorTypes.NESTED_SIMPLE_TRANSFORMATION, MAP_ARRAY_ITEMS = visitorTypes.MAP_ARRAY_ITEMS, TOP_LEVEL_MAP_ARRAY_ITEMS = visitorTypes.TOP_LEVEL_MAP_ARRAY_ITEMS, TOP_LEVEL_OMIT_TRANSFORMATION = visitorTypes.TOP_LEVEL_OMIT_TRANSFORMATION, NESTED_OMIT_TRANSFORMATION = visitorTypes.NESTED_OMIT_TRANSFORMATION, NESTED_CONSTANT_VALUE = visitorTypes.NESTED_CONSTANT_VALUE;
var safeResolveDefaultExport = function (module) {
    var isEsModule = module && module.__esModule && module.default;
    return isEsModule ? module.default : module;
};
var deepForEach = safeResolveDefaultExport(deepForEachModule);
var withoutSpreadOperatorKeys = function (obj) {
    return Object.keys(obj).filter(function (k) { return !isSpreadOperator(k); });
};
var safeInvokeVisitor = function (visitors, name) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    var visitor = get(visitors, name);
    return visitor && visitor.apply(void 0, args);
};
var reduceComplexTransformation = function (transformation, _a) {
    var visitors = _a.visitors, accumulator = _a.accumulator;
    var terminalPaths = [];
    var addTerminals = function (path, leaves) {
        if (leaves === void 0) { leaves = []; }
        return leaves.length > 0
            ? leaves.forEach(function (leaf) { return terminalPaths.push([path, leaf].join('.')); })
            : terminalPaths.push(path);
    };
    deepForEach(transformation, function (value, key, _, path) {
        if (some(terminalPaths, function (tp) { return path.startsWith(tp); })) {
            return;
        }
        if (isSpreadOperator(key)) {
            addTerminals(path);
            var spreadOperatorParentPath_1 = path.replace(/\.?\*/, '');
            var values = !isArray(value) ? [value] : value;
            values.forEach(function (item) {
                if (spreadOperatorParentPath_1 === '') {
                    var siblingKeys = withoutSpreadOperatorKeys(transformation);
                    safeInvokeVisitor(visitors, TOP_LEVEL_SPREAD, accumulator, item, siblingKeys);
                }
                else {
                    var siblingKeys = withoutSpreadOperatorKeys(get(transformation, spreadOperatorParentPath_1));
                    safeInvokeVisitor(visitors, NESTED_SPREAD, accumulator, spreadOperatorParentPath_1, item, siblingKeys);
                }
            });
            return;
        }
        if (isOmitTransformation(value)) {
            addTerminals(path, [
                OMIT_SOURCE_PROPERTY_NAME,
                FIELDS_TO_OMIT_PROPERTY_NAME,
            ]);
            var _a = parseOmitTransformation(value), sourceExpression = _a.sourceExpression, fieldsToOmit = _a.fieldsToOmit;
            safeInvokeVisitor(visitors, NESTED_OMIT_TRANSFORMATION, accumulator, path, sourceExpression, fieldsToOmit);
            return;
        }
        if (isMapArrayItemsTransformation(value)) {
            addTerminals(path, [
                ARRAY_ITEMS_PATH_PROPERTY_NAME,
                ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME,
            ]);
            var _b = parseMapArrayItemsTransformation(value), sourceArrayExpression = _b.sourceArrayExpression, itemTransformation = _b.itemTransformation;
            safeInvokeVisitor(visitors, MAP_ARRAY_ITEMS, accumulator, path, sourceArrayExpression, itemTransformation);
            return;
        }
        if (isFunctionCallExpression(value)) {
            var _c = parseCustomFunctionCall(value), functionName = _c.functionName, argumentExpressions = _c.argumentExpressions;
            safeInvokeVisitor(visitors, CUSTOM_FUNCTION, accumulator, path, functionName, argumentExpressions, value);
            return;
        }
        if (isConstantExpression(value)) {
            addTerminals(path, [CONSTANT_VALUE_PROPERTY_NAME]);
            safeInvokeVisitor(visitors, NESTED_CONSTANT_VALUE, {
                accumulator: accumulator,
                path: path,
                value: value[CONSTANT_VALUE_PROPERTY_NAME],
            });
            return;
        }
        if (isString(value)) {
            if (isJsonPathExpression(value)) {
                safeInvokeVisitor(visitors, NESTED_SIMPLE_TRANSFORMATION, accumulator, path, value);
            }
            else {
                safeInvokeVisitor(visitors, NESTED_UNSUPPORTED_TRANSFORMATION, accumulator, path, value);
            }
        }
    });
    return accumulator;
};
var reduceTransformation = function (transformation, _a) {
    var visitors = _a.visitors, accumulator = _a.accumulator;
    if (isSimpleTransformation(transformation)) {
        switch (true) {
            case isJsonPathExpression(transformation):
                return safeInvokeVisitor(visitors, TOP_LEVEL_SIMPLE_TRANSFORMATION, transformation);
            case isFunctionCallExpression(transformation): {
                var _b = parseCustomFunctionCall(transformation), functionName = _b.functionName, argumentExpressions = _b.argumentExpressions;
                return safeInvokeVisitor(visitors, TOP_LEVEL_CUSTOM_FUNCTION, functionName, argumentExpressions, transformation);
            }
            default:
                return safeInvokeVisitor(visitors, TOP_LEVEL_UNSUPPORTED_TRANSFORMATION, transformation);
        }
    }
    if (isOmitTransformation(transformation)) {
        var _c = parseOmitTransformation(transformation), sourceExpression = _c.sourceExpression, fieldsToOmit = _c.fieldsToOmit;
        return safeInvokeVisitor(visitors, TOP_LEVEL_OMIT_TRANSFORMATION, sourceExpression, fieldsToOmit);
    }
    if (isMapArrayItemsTransformation(transformation)) {
        var _d = parseMapArrayItemsTransformation(transformation), sourceArrayExpression = _d.sourceArrayExpression, itemTransformation = _d.itemTransformation;
        return safeInvokeVisitor(visitors, TOP_LEVEL_MAP_ARRAY_ITEMS, sourceArrayExpression, itemTransformation);
    }
    return reduceComplexTransformation(transformation, { visitors: visitors, accumulator: accumulator });
};
export { reduceTransformation };
//# sourceMappingURL=reduceTransformation.js.map