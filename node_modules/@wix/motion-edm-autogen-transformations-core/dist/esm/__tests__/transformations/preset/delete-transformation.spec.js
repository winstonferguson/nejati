import { aString } from '@wix/motion-runtime-test-context';
import { times } from 'lodash';
import { preset, transformations } from '../../..';
var RESPONSE_OBJECT_UNCHANGED = transformations.RESPONSE_OBJECT_UNCHANGED;
var _a = preset.delete, buildRequestTransformation = _a.buildRequestTransformation, buildResponseTransformation = _a.buildResponseTransformation;
describe('delete-method transformations', function () {
    describe('buildRequestTransformation', function () {
        var requestMessageIdentifierPath = aString();
        test('creates a transformation that maps the first argument into requestMessageIdentifierPath', function () {
            var _a;
            var transformationObject = buildRequestTransformation({
                requestMessageIdentifierPath: requestMessageIdentifierPath,
            });
            expect(transformationObject).toStrictEqual((_a = {},
                _a[requestMessageIdentifierPath] = '$[0]',
                _a));
        });
        test("creates a transformation that maps the 2nd argument into requestMessageOptionsPath when provided", function () {
            var _a;
            var requestMessageOptionsPath = aString();
            var transformationObject = buildRequestTransformation({
                requestMessageIdentifierPath: requestMessageIdentifierPath,
                requestMessageOptionsPath: requestMessageOptionsPath,
            });
            expect(transformationObject).toStrictEqual((_a = {},
                _a[requestMessageIdentifierPath] = '$[0]',
                _a[requestMessageOptionsPath] = '$[1]',
                _a));
        });
        test('supports shared paths for requestMessageIdentifierPath and requestMessageOptionsPath', function () {
            var _a, _b;
            var sharedPath = aString();
            var identifierPathSegment = aString();
            var transformationObject = buildRequestTransformation({
                requestMessageIdentifierPath: "".concat(sharedPath, ".").concat(identifierPathSegment),
                requestMessageOptionsPath: sharedPath,
            });
            expect(transformationObject).toStrictEqual((_a = {},
                _a[sharedPath] = (_b = {}, _b[identifierPathSegment] = '$[0]', _b['*'] = '$[1]', _b),
                _a));
        });
        test('supports nested paths', function () {
            var _a, _b, _c;
            // @ts-expect-error
            var idPathSegments = times(2, aString);
            // @ts-expect-error
            var optionsPathSegments = times(2, aString);
            var transformationObject = buildRequestTransformation({
                requestMessageIdentifierPath: idPathSegments.join('.'),
                requestMessageOptionsPath: optionsPathSegments.join('.'),
            });
            expect(transformationObject).toStrictEqual((_a = {},
                _a[idPathSegments[0]] = (_b = {}, _b[idPathSegments[1]] = '$[0]', _b),
                _a[optionsPathSegments[0]] = (_c = {}, _c[optionsPathSegments[1]] = '$[1]', _c),
                _a));
        });
    });
    describe('buildResponseTransformation', function () {
        test('returns the identity transformation', function () {
            var trasformationString = buildResponseTransformation();
            expect(trasformationString).toStrictEqual(RESPONSE_OBJECT_UNCHANGED);
        });
    });
});
//# sourceMappingURL=delete-transformation.spec.js.map