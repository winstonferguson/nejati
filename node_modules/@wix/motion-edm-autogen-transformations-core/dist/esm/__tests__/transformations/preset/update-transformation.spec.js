import { aString } from '@wix/motion-runtime-test-context';
import { times } from 'lodash';
import { preset } from '../../..';
var _a = preset.update, buildRequestTransformation = _a.buildRequestTransformation, buildResponseTransformation = _a.buildResponseTransformation;
describe('update-method transformations', function () {
    describe('buildRequestTransformation', function () {
        var requestMessageOptionsPath = aString();
        var requestMessageEntityPath = aString();
        var requestMessageEntityIdentifierField = aString();
        test('creates a transformation mapping args into requestMessageIdentifierPath and requestMessageEntityPath', function () {
            var _a, _b;
            var transformedObject = buildRequestTransformation({
                requestMessageEntityIdentifierField: requestMessageEntityIdentifierField,
                requestMessageEntityPath: requestMessageEntityPath,
            });
            expect(transformedObject).toStrictEqual((_a = {},
                _a[requestMessageEntityPath] = (_b = {},
                    _b[requestMessageEntityIdentifierField] = '$[0]',
                    _b['*'] = '$[1]',
                    _b),
                _a));
        });
        test("creates a transformation that maps the 3rd argument into requestMessageOptionsPath when provided", function () {
            var _a, _b;
            var transformedObject = buildRequestTransformation({
                requestMessageEntityIdentifierField: requestMessageEntityIdentifierField,
                requestMessageEntityPath: requestMessageEntityPath,
                requestMessageOptionsPath: requestMessageOptionsPath,
            });
            expect(transformedObject).toStrictEqual((_a = {},
                _a[requestMessageEntityPath] = (_b = {},
                    _b[requestMessageEntityIdentifierField] = '$[0]',
                    _b['*'] = '$[1]',
                    _b),
                _a[requestMessageOptionsPath] = '$[2]',
                _a));
        });
        test('supports nested paths for requestMessageEntityPath and requestMessageOptionsPath', function () {
            var _a, _b, _c, _d;
            // @ts-expect-error
            var requestMessageEntityPathSegments = times(2, aString);
            // @ts-expect-error
            var optionsPathSegments = times(2, aString);
            var transformationObject = buildRequestTransformation({
                requestMessageEntityIdentifierField: requestMessageEntityIdentifierField,
                requestMessageEntityPath: requestMessageEntityPathSegments.join('.'),
                requestMessageOptionsPath: optionsPathSegments.join('.'),
            });
            expect(transformationObject).toStrictEqual((_a = {},
                _a[requestMessageEntityPathSegments[0]] = (_b = {},
                    _b[requestMessageEntityPathSegments[1]] = (_c = {},
                        _c[requestMessageEntityIdentifierField] = '$[0]',
                        _c['*'] = '$[1]',
                        _c),
                    _b),
                _a[optionsPathSegments[0]] = (_d = {}, _d[optionsPathSegments[1]] = '$[2]', _d),
                _a));
        });
        test('supports shared paths for requestMessageEntityPath and requestMessageOptionsPath', function () {
            var _a, _b;
            var sharedPath = aString();
            var transformationObject = buildRequestTransformation({
                requestMessageEntityIdentifierField: requestMessageEntityIdentifierField,
                requestMessageEntityPath: sharedPath,
                requestMessageOptionsPath: sharedPath,
            });
            expect(transformationObject).toStrictEqual((_a = {},
                _a[sharedPath] = (_b = {},
                    _b[requestMessageEntityIdentifierField] = '$[0]',
                    _b['*'] = ['$[1]', '$[2]'],
                    _b),
                _a));
        });
    });
    describe('buildResponseTransformation', function () {
        test('unwraps the value of the provided property-path', function () {
            var responseMessageResultPath = aString();
            var transformationString = buildResponseTransformation({
                responseMessageResultPath: responseMessageResultPath,
            });
            expect(transformationString).toStrictEqual("$.".concat(responseMessageResultPath));
        });
    });
});
//# sourceMappingURL=update-transformation.spec.js.map