import { aString } from '@wix/motion-runtime-test-context';
import { times } from 'lodash';
import { preset } from '../../..';
var _a = preset.query, buildRequestTransformation = _a.buildRequestTransformation, buildResponseTransformation = _a.buildResponseTransformation;
describe('query-method transformations', function () {
    describe('buildRequestTransformation', function () {
        // eslint-disable-next-line max-len
        test('sets the query object as a property named via requestQueryObjectPropertyName, and spreads the 2nd argument', function () {
            var _a;
            var requestQueryObjectPropertyName = aString();
            var transformationString = buildRequestTransformation({
                requestQueryObjectPropertyName: requestQueryObjectPropertyName,
            });
            expect(transformationString).toStrictEqual((_a = {},
                _a[requestQueryObjectPropertyName] = '$[0]',
                _a['*'] = '$[1]',
                _a));
        });
        // eslint-disable-next-line max-len
        test("sets the given query tree under the 'query' property as a default, with the second argument spread into the payload", function () {
            var transformationString = buildRequestTransformation();
            expect(transformationString).toStrictEqual({
                query: '$[0]',
                '*': '$[1]',
            });
        });
    });
    describe('buildResponseTransformation', function () {
        var _a = times(2, function () { return aString(); }), responseMessageResultPath = _a[0], responseMessagePagingMetadataPath = _a[1];
        test('unwraps the value of the provided property-path', function () {
            var transformationObject = buildResponseTransformation({
                responseMessageResultPath: responseMessageResultPath,
                responseMessagePagingMetadataPath: responseMessagePagingMetadataPath,
            });
            expect(transformationObject).toStrictEqual({
                items: "$.".concat(responseMessageResultPath),
                pagingMetadata: "$.".concat(responseMessagePagingMetadataPath),
            });
        });
        test('adds an item-transformation when provided', function () {
            var itemTransformation = "$.some.path.".concat(aString());
            var transformationObject = buildResponseTransformation({
                responseMessageResultPath: responseMessageResultPath,
                responseMessagePagingMetadataPath: responseMessagePagingMetadataPath,
                itemTransformation: itemTransformation,
            });
            expect(transformationObject).toStrictEqual({
                items: {
                    '@path': "$.".concat(responseMessageResultPath),
                    '@itemTransformation': itemTransformation,
                },
                pagingMetadata: "$.".concat(responseMessagePagingMetadataPath),
            });
        });
    });
});
//# sourceMappingURL=query-transformation.spec.js.map