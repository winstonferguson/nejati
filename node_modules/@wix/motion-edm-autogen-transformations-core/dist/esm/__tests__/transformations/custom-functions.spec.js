import { __makeTemplateObject } from "tslib";
import { aString } from '@wix/motion-runtime-test-context';
import { set, times } from 'lodash';
import { isFunctionCallExpression, parseCustomFunctionCall } from '../..';
import { runCustomFunctionCallExpression } from '../../lib/transformations/custom-functions';
describe('parseCustomFunctionCall', function () {
    /* eslint-disable max-len */
    test.each(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    argumentCount                            | argumentExpressions                      | expectedArgumentExpressions\n    ", "                   | ", "                      | ", "\n    ", "                  | ", "           | ", "\n    ", " | ", " | ", "\n    ", "                        | ", "                                    | ", "\n  "], ["\n    argumentCount                            | argumentExpressions                      | expectedArgumentExpressions\n    ", "                   | ", "                      | ", "\n    ", "                  | ", "           | ", "\n    ", " | ", " | ", "\n    ", "                        | ", "                                    | ", "\n  "])), 'a single argument', '$[0].some.path', ['$[0].some.path'], 'multiple arguments', '$[0].some.path,someString', ['$[0].some.path', 'someString'], 'multiple arguments with whitespaces', '$[0].some.path,   someString , $[1]', ['$[0].some.path', 'someString', '$[1]'], 'no arguments', '', [])(
    /* eslint-enable max-len */
    'parses a custom-function call applied with $argumentCount', function (_a) {
        var argumentExpressions = _a.argumentExpressions, expectedArgumentExpressions = _a.expectedArgumentExpressions;
        var functionName = aString();
        var functionExpression = "#".concat(functionName, "(").concat(argumentExpressions, ")");
        expect(parseCustomFunctionCall(functionExpression)).toStrictEqual({
            functionName: functionName,
            argumentExpressions: expectedArgumentExpressions,
        });
    });
});
describe('isFunctionCallExpression', function () {
    test.each(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    description                                      | expression                 | expectedResult\n    ", "     | ", " | ", "\n    ", " | ", "   | ", "\n    ", "                          | ", "               | ", "\n  "], ["\n    description                                      | expression                 | expectedResult\n    ", "     | ", " | ", "\n    ", " | ", "   | ", "\n    ", "                          | ", "               | ", "\n  "])), 'a #-prefixed with a valid function name', '#someInvalidName$#@#>', true, 'a non-# prefixed with a valid function name', 'someFunctions($[1])', false, 'a non-string value', [1, 2, 3], false)('returns $expectedResult when $description function call expression is provided', function (_a) {
        var expression = _a.expression, expectedResult = _a.expectedResult;
        expect(isFunctionCallExpression(expression)).toStrictEqual(expectedResult);
    });
});
describe('runCustomFunctionCallExpression', function () {
    var value = aString();
    var transformationParentPath = aString();
    var joinWithDots = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return args.join('|');
    };
    describe.each(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    argumentCount | argumentValues    | expectedResult\n    ", "   | ", "        | ", "\n    ", "    | ", " | ", "\n    ", "       | ", "             | ", "\n  "], ["\n    argumentCount | argumentValues    | expectedResult\n    ", "   | ", "        | ", "\n    ", "    | ", " | ", "\n    ", "       | ", "             | ", "\n  "])), 'single', [value], value, 'multi', [value, value], "".concat(value, "|").concat(value), 'no', [], '')('$argumentCount-argument expression', function (_a) {
        var argumentValues = _a.argumentValues, expectedResult = _a.expectedResult;
        describe.each(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n        functionName                | description\n        ", "           | ", "\n        ", " | ", "\n      "], ["\n        functionName                | description\n        ", "           | ", "\n        ", " | ", "\n      "])), 'someFunction', 'an unscoped', 'someScope.someFunction', 'a scoped')('$description custom function', function (_a) {
            var functionName = _a.functionName;
            var customFunctions = set({}, functionName, joinWithDots);
            test('runs it and returns its result', function () {
                var result = runCustomFunctionCallExpression({
                    functionName: functionName,
                    customFunctions: customFunctions,
                    argumentValues: argumentValues,
                    transformationParentPath: transformationParentPath,
                });
                expect(result).toStrictEqual(expectedResult);
            });
        });
    });
    describe('error handling', function () {
        var argumentValues = times(2, function () { return aString(); });
        test('throws when the function is not recognized', function () {
            var customFunctions = {};
            expect(function () {
                return runCustomFunctionCallExpression({
                    functionName: 'someNonexistentFunction',
                    customFunctions: customFunctions,
                    argumentValues: argumentValues,
                    transformationParentPath: transformationParentPath,
                });
            }).toThrow("unrecognized custom function \"someNonexistentFunction\"");
        });
        test('throws an error when the function call throws an error', function () {
            var _a;
            var functionName = aString();
            var customFunctions = (_a = {},
                _a[functionName] = function () {
                    throw new Error('Something went wrong in the custom function');
                },
                _a);
            var t = function () {
                return runCustomFunctionCallExpression({
                    functionName: functionName,
                    customFunctions: customFunctions,
                    argumentValues: argumentValues,
                    transformationParentPath: transformationParentPath,
                });
            };
            expect(t).toThrow(Error);
            expect(t).toThrow(new RegExp("Transforming ".concat(transformationParentPath, " failed, #").concat(functionName, " threw: \"Something went wrong in the custom function\" for arguments: .+")));
        });
    });
});
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=custom-functions.spec.js.map