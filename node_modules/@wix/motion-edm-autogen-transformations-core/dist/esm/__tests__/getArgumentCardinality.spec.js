import { __assign } from "tslib";
import { anObject, aNumber, aString } from '@wix/motion-runtime-test-context';
import { getArgumentCardinality } from '..';
describe('getArgumentCardinality', function () {
    describe('simple transformation', function () {
        var simpleTransformation = "$[".concat(aNumber({
            min: 0,
            max: 9,
        }), "].").concat(aString());
        expect(getArgumentCardinality(simpleTransformation)).toStrictEqual(1);
    });
    describe('complex transformations', function () {
        var _a;
        var nonArgumentMapping = anObject();
        var argumentMapping = __assign((_a = {}, _a[aString()] = '$[0].abc', _a[aString()] = '$[1].id', _a[aString()] = '$[2].a', _a[aString()] = '$[3].a.b.c', _a), nonArgumentMapping);
        var argumentMappingArray = ['$[0].a', '$[1].b', 'a.b.c'];
        test('counts the number of arguments referenced in a given transformation object', function () {
            var complexMappingTransformation = __assign(__assign({}, nonArgumentMapping), argumentMapping);
            expect(getArgumentCardinality(complexMappingTransformation)).toStrictEqual(4);
        });
        test('counts the number of arguments referenced in a transformation object with arrays', function () {
            var _a;
            var complexMappingTransformation = __assign(__assign({}, nonArgumentMapping), (_a = {}, _a[aString()] = argumentMappingArray, _a));
            expect(getArgumentCardinality(complexMappingTransformation)).toStrictEqual(2);
        });
        test('counts only unique occurrences', function () {
            var _a;
            var complexMappingTransformation = __assign(__assign(__assign({}, nonArgumentMapping), argumentMapping), (_a = {}, _a[aString()] = argumentMappingArray, _a));
            expect(getArgumentCardinality(complexMappingTransformation)).toStrictEqual(4);
        });
        test('does not fail on special transformation cases', function () {
            var _a;
            var specialTransformation = (_a = {},
                _a[aString()] = { '@constant': true },
                _a[aString()] = { '@constant': null },
                _a[aString()] = '$[0].a.b.c.',
                _a);
            expect(getArgumentCardinality(specialTransformation)).toStrictEqual(1);
        });
    });
});
//# sourceMappingURL=getArgumentCardinality.spec.js.map