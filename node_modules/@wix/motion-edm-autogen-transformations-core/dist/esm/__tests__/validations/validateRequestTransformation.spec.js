import { __makeTemplateObject } from "tslib";
import { aNumber, aString } from '@wix/motion-runtime-test-context';
import { times } from 'lodash';
import { validation } from '../..';
var validateRequestTransformation = validation.validateRequestTransformation;
describe('validateRequestTransformation', function () {
    describe('valid transformations', function () {
        var validResults = { isValid: true, validationErrors: [] };
        test('returns valid transformation response for a valid simple transformation', function () {
            var validTransformation = '$[0].a.b.c';
            expect(validateRequestTransformation(validTransformation)).toStrictEqual(validResults);
        });
        test('returns valid transformation response for a valid complex transformation', function () {
            var validTransformation = { a: '$[0].a.b.c' };
            expect(validateRequestTransformation(validTransformation)).toStrictEqual(validResults);
        });
    });
    describe('invalid transformations', function () {
        var validationErrorWith = function (_a) {
            var parentPath = _a.parentPath, invalidValue = _a.invalidValue, description = _a.description;
            return ({
                isValid: false,
                validationErrors: expect.arrayContaining([
                    expect.objectContaining({
                        parentPath: parentPath,
                        invalidValue: invalidValue,
                        description: description,
                    }),
                ]),
            });
        };
        describe('invalid complex-transformation keys', function () {
            test.each(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n        description                      | transformationKey  | expectedValidationMessage\n        ", " | ", "          | ", "\n        ", " | ", " | ", "\n      "], ["\n        description                      | transformationKey  | expectedValidationMessage\n        ", " | ", "          | ", "\n        ", " | ", " | ", "\n      "])), 'refers to an argument index', '$[0]', "must start with '$.'", 'refers to a custom function', '#someFunction', 'cannot be a custom function call')('returns a validation error when a transformation value segment $description', function (_a) {
                var _b;
                var transformationKey = _a.transformationKey, expectedValidationMessage = _a.expectedValidationMessage;
                var transformation = {
                    d: { e: { f: (_b = {}, _b[transformationKey] = '$[0].a.b.c', _b) } },
                    '*': '$[1]',
                };
                expect(validateRequestTransformation(transformation)).toStrictEqual(validationErrorWith({
                    parentPath: 'd.e.f',
                    invalidValue: transformationKey,
                    description: expectedValidationMessage,
                }));
            });
        });
        describe('invalid transformations values', function () {
            describe('omit transformation', function () {
                var parentKey = aString();
                describe('invalid source', function () {
                    var _a;
                    var invalidSourceValue = '$[x].a.b.c';
                    var invalidSourceTransformation = {
                        '@source': invalidSourceValue,
                        '@omit': times(2, function () { return aString(); }),
                    };
                    test.each(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n            description    | invalidTransformation                           | expectedParentPath\n            ", " | ", "                  | ", "\n            ", "    | ", " | ", "\n          "], ["\n            description    | invalidTransformation                           | expectedParentPath\n            ", " | ", "                  | ", "\n            ", "    | ", " | ", "\n          "])), 'top level', invalidSourceTransformation, '@source', 'nested', (_a = {}, _a[parentKey] = invalidSourceTransformation, _a), "".concat(parentKey, ".@source"))('returns a validation error when the @source value is invalid', function (_a) {
                        var invalidTransformation = _a.invalidTransformation, expectedParentPath = _a.expectedParentPath;
                        expect(validateRequestTransformation(invalidTransformation)).toStrictEqual(validationErrorWith({
                            parentPath: expectedParentPath,
                            invalidValue: invalidSourceValue,
                            description: 'must start with $[N] where N is an index',
                        }));
                    });
                });
                describe('invalid @omit', function () {
                    var _a, _b, _c;
                    var transformationWithOmitValue = function (value) { return ({
                        '@source': '$[0].a.b.c',
                        '@omit': value,
                    }); };
                    var nonArray = aString();
                    var nonStringArray = times(2, function () { return aNumber(); });
                    var arrayWithInvalidPaths = ['a.b.c', aString()];
                    describe.each(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n            description    | invalidTransformation                                     | expectedParentPath\n            ", " | ", "                  | ", "\n            ", "    | ", " | ", "\n          "], ["\n            description    | invalidTransformation                                     | expectedParentPath\n            ", " | ", "                  | ", "\n            ", "    | ", " | ", "\n          "])), 'top level', transformationWithOmitValue(nonArray), '@omit', 'nested', (_a = {}, _a[parentKey] = transformationWithOmitValue(nonArray), _a), "".concat(parentKey, ".@omit"))('@omit is not an array', function (_a) {
                        var invalidTransformation = _a.invalidTransformation, expectedParentPath = _a.expectedParentPath;
                        test('returns a validation error', function () {
                            expect(validateRequestTransformation(invalidTransformation)).toStrictEqual(validationErrorWith({
                                parentPath: expectedParentPath,
                                invalidValue: nonArray,
                                description: 'must be an array of strings',
                            }));
                        });
                    });
                    describe.each(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n            description    | invalidTransformation                                           | expectedParentPath\n            ", " | ", "                  | ", "\n            ", "    | ", " | ", "\n          "], ["\n            description    | invalidTransformation                                           | expectedParentPath\n            ", " | ", "                  | ", "\n            ", "    | ", " | ", "\n          "])), 'top level', transformationWithOmitValue(nonStringArray), '@omit', 'nested', (_b = {}, _b[parentKey] = transformationWithOmitValue(nonStringArray), _b), "".concat(parentKey, ".@omit"))('@omit is an array of non-strings', function (_a) {
                        var invalidTransformation = _a.invalidTransformation, expectedParentPath = _a.expectedParentPath;
                        test('return a validation error', function () {
                            expect(validateRequestTransformation(invalidTransformation)).toStrictEqual(validationErrorWith({
                                parentPath: expectedParentPath,
                                invalidValue: nonStringArray,
                                description: 'must be an array of strings',
                            }));
                        });
                    });
                    /* eslint-disable max-len */
                    describe.each(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n            description    | invalidTransformation                                                  | expectedParentPath\n            ", " | ", "                  | ", "\n            ", "    | ", " | ", "\n          "], ["\n            description    | invalidTransformation                                                  | expectedParentPath\n            ", " | ", "                  | ", "\n            ", "    | ", " | ", "\n          "])), 'top level', transformationWithOmitValue(arrayWithInvalidPaths), '@omit', 'nested', (_c = {}, _c[parentKey] = transformationWithOmitValue(arrayWithInvalidPaths), _c), "".concat(parentKey, ".@omit"))('@omit is an array with invalid string paths', function (_a) {
                        var description = _a.description, invalidTransformation = _a.invalidTransformation, expectedParentPath = _a.expectedParentPath;
                        /* eslint-enable max-len */
                        test("returns a validation error for invalid ".concat(description, " transformation"), function () {
                            expect(validateRequestTransformation(invalidTransformation)).toStrictEqual(validationErrorWith({
                                parentPath: expectedParentPath,
                                invalidValue: arrayWithInvalidPaths,
                                description: 'must contain non-nested paths only',
                            }));
                        });
                    });
                });
            });
            describe('custom function expressions', function () {
                test('returns a validation error when an invalid custom function-name is used', function () {
                    var invalidCustomFunctionCallExpression = '#1a';
                    var transformation = {
                        a: { b: { c: invalidCustomFunctionCallExpression } },
                    };
                    expect(validateRequestTransformation(transformation)).toStrictEqual(validationErrorWith({
                        parentPath: 'a.b.c',
                        invalidValue: invalidCustomFunctionCallExpression,
                        description: 'contains an invalid custom function expression',
                    }));
                });
                test('returns a validation error when a custom function argument is invalid for request transformation', function () {
                    var invalidCustomFunctionExpression = '#someFunction($.id)';
                    var transformation = {
                        a: { b: { c: invalidCustomFunctionExpression } },
                    };
                    expect(validateRequestTransformation(transformation)).toStrictEqual(validationErrorWith({
                        parentPath: 'a.b.c',
                        invalidValue: '$.id',
                        description: 'must start with $[N] where N is an index',
                    }));
                });
                describe('#constant function', function () {
                    test('returns a validation error when passed value is not a valid json value', function () {
                        var invalidCustomFunctionExpression = '#constant(not-json)';
                        var transformation = {
                            a: { b: { c: invalidCustomFunctionExpression } },
                        };
                        expect(validateRequestTransformation(transformation)).toStrictEqual(validationErrorWith({
                            parentPath: 'a.b.c',
                            invalidValue: 'not-json',
                            description: 'must be a valid json value',
                        }));
                    });
                    test('allows passing non json-path arguments to the #constant function', function () {
                        var transformation = { a: { b: { c: '#constant("abc")' } } };
                        expect(validateRequestTransformation(transformation)).toStrictEqual({
                            isValid: true,
                            validationErrors: [],
                        });
                    });
                });
            });
            /* eslint-disable max-len */
            describe.each(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n        description                                                  | transformationValue | expectedValidationMessage\n        ", "     | ", "     | ", "\n        ", "                                | ", "              | ", "\n        ", " | ", "      | ", "\n        ", "                                 | ", "     | ", "\n      "], ["\n        description                                                  | transformationValue | expectedValidationMessage\n        ", "     | ", "     | ", "\n        ", "                                | ", "              | ", "\n        ", " | ", "      | ", "\n        ", "                                 | ", "     | ", "\n      "])), 'does not start with $[N] where N is a numeric index', '$[x].a.b.c', 'must start with $[N] where N is an index', 'is not a valid json-path', '@', 'must start with $[N] where N is an index', 'has several arguments referred to in the transformation', '$[0].$[1]', 'must have a single argument-index as the first path segment', 'refers to * in the path', '$[0].a.b.*', 'cannot refer to the * operator')(
            /* eslint-enable max-len */
            'returns a validation error when a transformation value segment $description', function (_a) {
                var transformationValue = _a.transformationValue, expectedValidationMessage = _a.expectedValidationMessage;
                test('simple transformation', function () {
                    expect(validateRequestTransformation(transformationValue)).toStrictEqual(validationErrorWith({
                        parentPath: null,
                        invalidValue: transformationValue,
                        description: expectedValidationMessage,
                    }));
                });
                test('complex transformation', function () {
                    var transformation = { a: { b: { c: transformationValue } } };
                    expect(validateRequestTransformation(transformation)).toStrictEqual(validationErrorWith({
                        parentPath: 'a.b.c',
                        invalidValue: transformationValue,
                        description: expectedValidationMessage,
                    }));
                });
            });
            describe('special fields', function () {
                describe.each(['id', 'createdDate', 'updatedDate'])('%s', function (specialField) {
                    var transformationValue = "$[0].a.b.".concat(specialField);
                    // eslint-disable-next-line max-len
                    var expectedValidationMessage = "cannot refer to ".concat(specialField, " field, consider using _").concat(specialField, " instead");
                    test('simple transformation', function () {
                        expect(validateRequestTransformation(transformationValue)).toStrictEqual(validationErrorWith({
                            parentPath: null,
                            invalidValue: transformationValue,
                            description: expectedValidationMessage,
                        }));
                    });
                    test('complex transformation', function () {
                        var transformation = { a: { b: { c: transformationValue } } };
                        expect(validateRequestTransformation(transformation)).toStrictEqual(validationErrorWith({
                            parentPath: 'a.b.c',
                            invalidValue: transformationValue,
                            description: expectedValidationMessage,
                        }));
                    });
                });
            });
        });
    });
});
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=validateRequestTransformation.spec.js.map