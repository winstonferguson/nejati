import { __makeTemplateObject } from "tslib";
import { aComplexMappingTransformation, aRandomJsonPath, aRandomResponseTransformationJsonPath, aSimpleMappingTransformation, } from '@wix/motion-edm-autogen-test-context';
import { aNumber, aString } from '@wix/motion-runtime-test-context';
import { times } from 'lodash';
import { extractIndexAndPath, getArgumentIndex, isInvalidJsonValue, isJsonPathExpression, isSimpleTransformation, stripJsonPathRootPrefix, } from '../lib/helpers';
describe('helper functions', function () {
    var index = aNumber({ min: 0, max: 1 });
    // @ts-expect-error
    var nestedPath = times(3, aString()).join('.');
    var simpleTransformation = "$[".concat(index, "]");
    var simpleTransformationWithNestedPath = "$[".concat(index, "].").concat(nestedPath);
    describe('isSimpleTransformation', function () {
        test.each(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      transformation                                    | expectedValue | transformationType\n      ", "   | ", "       | ", "\n      ", " | ", "      | ", "\n    "], ["\n      transformation                                    | expectedValue | transformationType\n      ", "   | ", "       | ", "\n      ", " | ", "      | ", "\n    "])), aSimpleMappingTransformation().simpleMapping, true, 'simple', aComplexMappingTransformation().complexMapping, false, 'complex')('returns $expectedValue for $transformationType transformation', function (_a) {
            var transformation = _a.transformation, expectedValue = _a.expectedValue;
            expect(isSimpleTransformation(transformation)).toStrictEqual(expectedValue);
        });
    });
    describe('extractIndexAndPath', function () {
        test('extracts the index and nested-path of the argument from a simple tranformation', function () {
            expect(extractIndexAndPath(simpleTransformationWithNestedPath)).toStrictEqual({ index: index, nestedPath: nestedPath });
        });
        test('sets the nestedPath to null when one could not be found', function () {
            expect(extractIndexAndPath(simpleTransformation)).toStrictEqual({
                index: index,
                nestedPath: null,
            });
        });
    });
    describe('getArgumentIndex', function () {
        test('extracts the index of an argument within a jsonpath', function () {
            expect(getArgumentIndex(simpleTransformation)).toStrictEqual(index);
        });
        test('return null when no index was found', function () {
            expect(getArgumentIndex(aString())).toBeNull();
        });
    });
    describe('isJsonPathExpression', function () {
        test.each(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n      description                | expression           | expectedResult\n      ", "         | ", " | ", "\n      ", " | ", "         | ", "\n    "], ["\n      description                | expression           | expectedResult\n      ", "         | ", " | ", "\n      ", " | ", "         | ", "\n    "])), 'starts with $', aRandomJsonPath(), true, 'does not start with $', aString(), false)('return $expectedResult when the expression $description', function (_a) {
            var expression = _a.expression, expectedResult = _a.expectedResult;
            expect(isJsonPathExpression(expression)).toStrictEqual(expectedResult);
        });
    });
    describe('stripJsonPathRootPrefix', function () {
        var nonJsonPathString = aString();
        var jsonPath = aRandomResponseTransformationJsonPath();
        test.each(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n      description                | expression           | expectedResult\n      ", "                  | ", "               | ", "\n      ", " | ", " | ", "\n      ", "        | ", "          | ", "\n    "], ["\n      description                | expression           | expectedResult\n      ", "                  | ", "               | ", "\n      ", " | ", " | ", "\n      ", "        | ", "          | ", "\n    "])), 'is $', '$', '$', 'does not start with $', nonJsonPathString, nonJsonPathString, 'starts with $.', jsonPath, jsonPath.slice(2))('return $expectedResult when the expression $description', function (_a) {
            var expression = _a.expression, expectedResult = _a.expectedResult;
            expect(stripJsonPathRootPrefix(expression)).toStrictEqual(expectedResult);
        });
    });
    describe('isInvalidJsonValue', function () {
        test('returns true for an invalid json-value', function () {
            expect(isInvalidJsonValue('x-y-z')).toBeTruthy();
        });
        test('returns false for a valid json-value', function () {
            expect(isInvalidJsonValue('"string"')).toBeFalsy();
        });
    });
});
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=helpers.spec.js.map