import { __assign } from "tslib";
import { fromCorvidName, toCorvidName } from './lib/corvid-entity';
import { getArgumentCardinality } from './lib/getArgumentCardinality';
import { extractIndexAndPath, getArgumentIndex, isArrayIndexString, isIdentityResponseTransformation, isJsonPathExpression, isMapArrayItemsTransformation, isOmitTransformation, isRootObjectIdentifier, isSimpleTransformation, isSpreadOperator, parseOmitTransformation, stripJsonPathRootPrefix, } from './lib/helpers';
import { transformations as allTransformations } from './lib/transformations/common';
var JS_SINGLE_ARG_UNCHANGED = allTransformations.JS_SINGLE_ARG_UNCHANGED, RESPONSE_OBJECT_UNCHANGED = allTransformations.RESPONSE_OBJECT_UNCHANGED, ARRAY_ITEMS_PATH_PROPERTY_NAME = allTransformations.ARRAY_ITEMS_PATH_PROPERTY_NAME, ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME = allTransformations.ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME, OMIT_SOURCE_PROPERTY_NAME = allTransformations.OMIT_SOURCE_PROPERTY_NAME, FIELDS_TO_OMIT_PROPERTY_NAME = allTransformations.FIELDS_TO_OMIT_PROPERTY_NAME;
var transformations = {
    JS_SINGLE_ARG_UNCHANGED: JS_SINGLE_ARG_UNCHANGED,
    RESPONSE_OBJECT_UNCHANGED: RESPONSE_OBJECT_UNCHANGED,
    ARRAY_ITEMS_PATH_PROPERTY_NAME: ARRAY_ITEMS_PATH_PROPERTY_NAME,
    ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME: ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME,
    OMIT_SOURCE_PROPERTY_NAME: OMIT_SOURCE_PROPERTY_NAME,
    FIELDS_TO_OMIT_PROPERTY_NAME: FIELDS_TO_OMIT_PROPERTY_NAME,
};
import { isFunctionCallExpression, parseCustomFunctionCall, runCustomFunctionCallExpression, } from './lib/transformations/custom-functions';
import { buildRequestTransformation as buildCreateRequestTransformation, buildResponseTransformation as buildCreateResponseTransformation, } from './lib/transformations/preset/create';
import { buildRequestTransformation as buildDeleteRequestTransformation, buildResponseTransformation as buildDeleteResponseTransformation, } from './lib/transformations/preset/delete';
import { buildRequestTransformation as buildGetRequestTransformation, buildResponseTransformation as buildGetResponseTransformation, } from './lib/transformations/preset/get';
import { buildRequestTransformation as buildListRequestTransformation, buildResponseTransformation as buildListResponseTransformation, } from './lib/transformations/preset/list';
import { buildRequestTransformation as buildQueryRequestTransformation, buildResponseTransformation as buildQueryResponseTransformation, ITEMS_RESULT_PROPERTY_NAME, PAGING_METADATA_RESULT_PROPERTY_NAME, } from './lib/transformations/preset/query';
import { buildRequestTransformation as buildUpdateRequestTransformation, buildResponseTransformation as buildUpdateResponseTransformation, } from './lib/transformations/preset/update';
import { reduceTransformation } from './lib/transformations/reduceTransformation';
import { validateRequestTransformation } from './lib/transformations/validations/validateRequestTransformation';
import { validateResponseTransformation } from './lib/transformations/validations/validateResponseTransformation';
var transformationBuilder = function (buildRequestTransformation, buildResponseTransformation) { return ({
    buildRequestTransformation: buildRequestTransformation,
    buildResponseTransformation: buildResponseTransformation,
}); };
var preset = {
    create: transformationBuilder(buildCreateRequestTransformation, buildCreateResponseTransformation),
    update: transformationBuilder(buildUpdateRequestTransformation, buildUpdateResponseTransformation),
    delete: transformationBuilder(buildDeleteRequestTransformation, buildDeleteResponseTransformation),
    get: transformationBuilder(buildGetRequestTransformation, buildGetResponseTransformation),
    list: transformationBuilder(buildListRequestTransformation, buildListResponseTransformation),
    query: __assign(__assign({}, transformationBuilder(buildQueryRequestTransformation, buildQueryResponseTransformation)), { ITEMS_RESULT_PROPERTY_NAME: ITEMS_RESULT_PROPERTY_NAME, PAGING_METADATA_RESULT_PROPERTY_NAME: PAGING_METADATA_RESULT_PROPERTY_NAME }),
};
var namingHints = { OPTIONS: 'OPTIONS' };
var validation = {
    validateRequestTransformation: validateRequestTransformation,
    validateResponseTransformation: validateResponseTransformation,
};
var corvidEntities = {
    toCorvidName: toCorvidName,
    fromCorvidName: fromCorvidName,
};
export { corvidEntities, extractIndexAndPath, getArgumentCardinality, getArgumentIndex, isArrayIndexString, isFunctionCallExpression, isIdentityResponseTransformation, isJsonPathExpression, isMapArrayItemsTransformation, isOmitTransformation, isRootObjectIdentifier, isSimpleTransformation, isSpreadOperator, namingHints, parseCustomFunctionCall, parseOmitTransformation, preset, reduceTransformation, runCustomFunctionCallExpression, stripJsonPathRootPrefix, transformations, validation, };
//# sourceMappingURL=index.js.map