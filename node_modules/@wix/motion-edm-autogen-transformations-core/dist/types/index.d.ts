import { getArgumentCardinality } from './lib/getArgumentCardinality';
import { extractIndexAndPath, getArgumentIndex, isArrayIndexString, isIdentityResponseTransformation, isJsonPathExpression, isMapArrayItemsTransformation, isOmitTransformation, isRootObjectIdentifier, isSimpleTransformation, isSpreadOperator, parseOmitTransformation, stripJsonPathRootPrefix } from './lib/helpers';
declare const transformations: {
    JS_SINGLE_ARG_UNCHANGED: string;
    RESPONSE_OBJECT_UNCHANGED: string;
    ARRAY_ITEMS_PATH_PROPERTY_NAME: string;
    ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME: string;
    OMIT_SOURCE_PROPERTY_NAME: string;
    FIELDS_TO_OMIT_PROPERTY_NAME: string;
};
import { isFunctionCallExpression, parseCustomFunctionCall, runCustomFunctionCallExpression } from './lib/transformations/custom-functions';
import { reduceTransformation } from './lib/transformations/reduceTransformation';
import { validateRequestTransformation } from './lib/transformations/validations/validateRequestTransformation';
import { validateResponseTransformation } from './lib/transformations/validations/validateResponseTransformation';
declare const preset: {
    create: {
        buildRequestTransformation: any;
        buildResponseTransformation: any;
    };
    update: {
        buildRequestTransformation: any;
        buildResponseTransformation: any;
    };
    delete: {
        buildRequestTransformation: any;
        buildResponseTransformation: any;
    };
    get: {
        buildRequestTransformation: any;
        buildResponseTransformation: any;
    };
    list: {
        buildRequestTransformation: any;
        buildResponseTransformation: any;
    };
    query: {
        ITEMS_RESULT_PROPERTY_NAME: string;
        PAGING_METADATA_RESULT_PROPERTY_NAME: string;
        buildRequestTransformation: any;
        buildResponseTransformation: any;
    };
};
declare const namingHints: {
    OPTIONS: string;
};
declare const validation: {
    validateRequestTransformation: typeof validateRequestTransformation;
    validateResponseTransformation: typeof validateResponseTransformation;
};
declare const corvidEntities: {
    toCorvidName: (name: any) => any;
    fromCorvidName: (name: any) => any;
};
export { corvidEntities, extractIndexAndPath, getArgumentCardinality, getArgumentIndex, isArrayIndexString, isFunctionCallExpression, isIdentityResponseTransformation, isJsonPathExpression, isMapArrayItemsTransformation, isOmitTransformation, isRootObjectIdentifier, isSimpleTransformation, isSpreadOperator, namingHints, parseCustomFunctionCall, parseOmitTransformation, preset, reduceTransformation, runCustomFunctionCallExpression, stripJsonPathRootPrefix, transformations, validation, };
//# sourceMappingURL=index.d.ts.map