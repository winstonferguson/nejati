{"version":3,"names":["_typeUtils","require","_clone","_interopRequireDefault","FilterValidator","constructor","operatorName","previousInvalidArguments","ctor","_defineProperty2","default","_validations","_invalidArguments","clone","typeIsString","value","addValidation","isString","typeForDisplay","typeIsStringNumberOrDate","isDateStringOrNumber","sameType","first","second","typeIsStringNumberOrDateForAll","values","every","validFieldName","field","isInstanceOfSameClass","obj","arityIsOne","args","length","arityIsTwo","arityIsThree","arityIsAtLeastTwo","predicateFn","messageFn","push","validateAndAggregate","valid","_appendIfInvalid","message","exports","isNumber","isDate"],"sources":["../../src/filter-validator.ts"],"sourcesContent":["import { typeForDisplay, isDate, isString, isNumber } from './type-utils'\nimport clone from './clone'\nimport { Validator } from './validator'\n\nexport class FilterValidator implements Validator {\n  private ctor\n  private _invalidArguments: string[]\n  public _validations: Validation[]\n  public operatorName?: string\n\n  constructor(operatorName, previousInvalidArguments, ctor) {\n    this._validations = []\n    this.operatorName = operatorName\n    this.ctor = ctor\n    this._invalidArguments = clone(previousInvalidArguments)\n  }\n\n  typeIsString(value) {\n    return this.addValidation(\n      () => isString(value),\n      () =>\n        `Invalid ${this.operatorName} parameter value [${typeForDisplay(\n          value\n        )}]. ${this.operatorName} parameter must be a String.`\n    )\n  }\n\n  typeIsStringNumberOrDate(value) {\n    return this.addValidation(\n      () => isDateStringOrNumber(value),\n      () =>\n        `Invalid ${this.operatorName} parameter value [${typeForDisplay(\n          value\n        )}]. Valid ${\n          this.operatorName\n        } parameter types are String, Number or Date.`\n    )\n  }\n\n  sameType(first, second) {\n    return this.addValidation(\n      () => typeForDisplay(first) === typeForDisplay(second),\n      () =>\n        `Invalid ${this.operatorName} parameter values [${typeForDisplay(\n          first\n        )}] and [${typeForDisplay(\n          second\n        )}]. Both parameters must be of the same type.`\n    )\n  }\n\n  typeIsStringNumberOrDateForAll(values) {\n    return this.addValidation(\n      () => values.every(isDateStringOrNumber),\n      () =>\n        `Invalid ${this.operatorName} usage. ${this.operatorName} supports only Number, String or Date items.`\n    )\n  }\n\n  validFieldName(field) {\n    return this.addValidation(\n      () => isString(field),\n      () =>\n        `Invalid ${this.operatorName} field value [${typeForDisplay(field)}]. ${\n          this.operatorName\n        } field must be a String.`\n    )\n  }\n\n  isInstanceOfSameClass(obj) {\n    return this.addValidation(\n      () => obj instanceof this.ctor,\n      () =>\n        `Invalid ${this.operatorName} parameter [${typeForDisplay(obj)}]. ${\n          this.operatorName\n        } expects FilterBuilder only.`\n    )\n  }\n\n  arityIsOne(args) {\n    return this.addValidation(\n      () => args.length === 1,\n      () =>\n        `Invalid ${this.operatorName} usage. ${this.operatorName} requires one parameter.`\n    )\n  }\n\n  arityIsTwo(args) {\n    return this.addValidation(\n      () => args.length === 2,\n      () =>\n        `Invalid ${this.operatorName} usage. ${this.operatorName} requires two parameters.`\n    )\n  }\n\n  arityIsThree(args) {\n    return this.addValidation(\n      () => args.length === 3,\n      () =>\n        `Invalid ${this.operatorName} usage. ${this.operatorName} requires three parameters.`\n    )\n  }\n\n  arityIsAtLeastTwo(args) {\n    return this.addValidation(\n      () => args.length >= 2,\n      () =>\n        `Invalid ${this.operatorName} usage. ${this.operatorName} requires at least two parameters.`\n    )\n  }\n\n  addValidation(predicateFn, messageFn) {\n    this._validations.push({\n      predicateFn,\n      messageFn,\n    })\n    return this\n  }\n\n  validateAndAggregate(): [string[], boolean] {\n    const valid = this._validations.every(({ predicateFn, messageFn }) =>\n      this._appendIfInvalid(predicateFn(), messageFn())\n    )\n    return [this._invalidArguments, valid]\n  }\n\n  _appendIfInvalid(valid, message) {\n    if (!valid) {\n      this._invalidArguments.push(message)\n      return false\n    }\n    return true\n  }\n}\n\nfunction isDateStringOrNumber(value) {\n  return isString(value) || isNumber(value) || isDate(value)\n}\n\ninterface Validation {\n  predicateFn: Function\n  messageFn: Function\n}\n"],"mappings":";;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAC,sBAAA,CAAAF,OAAA;AAGO,MAAMG,eAAe,CAAsB;EAMhDC,WAAWA,CAACC,YAAY,EAAEC,wBAAwB,EAAEC,IAAI,EAAE;IAAA,IAAAC,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IACxD,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACL,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACE,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACI,iBAAiB,GAAG,IAAAC,cAAK,EAACN,wBAAwB,CAAC;EAC1D;EAEAO,YAAYA,CAACC,KAAK,EAAE;IAClB,OAAO,IAAI,CAACC,aAAa,CACvB,MAAM,IAAAC,mBAAQ,EAACF,KAAK,CAAC,EACrB,MACG,WAAU,IAAI,CAACT,YAAa,qBAAoB,IAAAY,yBAAc,EAC7DH,KACF,CAAE,MAAK,IAAI,CAACT,YAAa,8BAC7B,CAAC;EACH;EAEAa,wBAAwBA,CAACJ,KAAK,EAAE;IAC9B,OAAO,IAAI,CAACC,aAAa,CACvB,MAAMI,oBAAoB,CAACL,KAAK,CAAC,EACjC,MACG,WAAU,IAAI,CAACT,YAAa,qBAAoB,IAAAY,yBAAc,EAC7DH,KACF,CAAE,YACA,IAAI,CAACT,YACN,8CACL,CAAC;EACH;EAEAe,QAAQA,CAACC,KAAK,EAAEC,MAAM,EAAE;IACtB,OAAO,IAAI,CAACP,aAAa,CACvB,MAAM,IAAAE,yBAAc,EAACI,KAAK,CAAC,KAAK,IAAAJ,yBAAc,EAACK,MAAM,CAAC,EACtD,MACG,WAAU,IAAI,CAACjB,YAAa,sBAAqB,IAAAY,yBAAc,EAC9DI,KACF,CAAE,UAAS,IAAAJ,yBAAc,EACvBK,MACF,CAAE,8CACN,CAAC;EACH;EAEAC,8BAA8BA,CAACC,MAAM,EAAE;IACrC,OAAO,IAAI,CAACT,aAAa,CACvB,MAAMS,MAAM,CAACC,KAAK,CAACN,oBAAoB,CAAC,EACxC,MACG,WAAU,IAAI,CAACd,YAAa,WAAU,IAAI,CAACA,YAAa,8CAC7D,CAAC;EACH;EAEAqB,cAAcA,CAACC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACZ,aAAa,CACvB,MAAM,IAAAC,mBAAQ,EAACW,KAAK,CAAC,EACrB,MACG,WAAU,IAAI,CAACtB,YAAa,iBAAgB,IAAAY,yBAAc,EAACU,KAAK,CAAE,MACjE,IAAI,CAACtB,YACN,0BACL,CAAC;EACH;EAEAuB,qBAAqBA,CAACC,GAAG,EAAE;IACzB,OAAO,IAAI,CAACd,aAAa,CACvB,MAAMc,GAAG,YAAY,IAAI,CAACtB,IAAI,EAC9B,MACG,WAAU,IAAI,CAACF,YAAa,eAAc,IAAAY,yBAAc,EAACY,GAAG,CAAE,MAC7D,IAAI,CAACxB,YACN,8BACL,CAAC;EACH;EAEAyB,UAAUA,CAACC,IAAI,EAAE;IACf,OAAO,IAAI,CAAChB,aAAa,CACvB,MAAMgB,IAAI,CAACC,MAAM,KAAK,CAAC,EACvB,MACG,WAAU,IAAI,CAAC3B,YAAa,WAAU,IAAI,CAACA,YAAa,0BAC7D,CAAC;EACH;EAEA4B,UAAUA,CAACF,IAAI,EAAE;IACf,OAAO,IAAI,CAAChB,aAAa,CACvB,MAAMgB,IAAI,CAACC,MAAM,KAAK,CAAC,EACvB,MACG,WAAU,IAAI,CAAC3B,YAAa,WAAU,IAAI,CAACA,YAAa,2BAC7D,CAAC;EACH;EAEA6B,YAAYA,CAACH,IAAI,EAAE;IACjB,OAAO,IAAI,CAAChB,aAAa,CACvB,MAAMgB,IAAI,CAACC,MAAM,KAAK,CAAC,EACvB,MACG,WAAU,IAAI,CAAC3B,YAAa,WAAU,IAAI,CAACA,YAAa,6BAC7D,CAAC;EACH;EAEA8B,iBAAiBA,CAACJ,IAAI,EAAE;IACtB,OAAO,IAAI,CAAChB,aAAa,CACvB,MAAMgB,IAAI,CAACC,MAAM,IAAI,CAAC,EACtB,MACG,WAAU,IAAI,CAAC3B,YAAa,WAAU,IAAI,CAACA,YAAa,oCAC7D,CAAC;EACH;EAEAU,aAAaA,CAACqB,WAAW,EAAEC,SAAS,EAAE;IACpC,IAAI,CAAC3B,YAAY,CAAC4B,IAAI,CAAC;MACrBF,WAAW;MACXC;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EAEAE,oBAAoBA,CAAA,EAAwB;IAC1C,MAAMC,KAAK,GAAG,IAAI,CAAC9B,YAAY,CAACe,KAAK,CAAC,CAAC;MAAEW,WAAW;MAAEC;IAAU,CAAC,KAC/D,IAAI,CAACI,gBAAgB,CAACL,WAAW,CAAC,CAAC,EAAEC,SAAS,CAAC,CAAC,CAClD,CAAC;IACD,OAAO,CAAC,IAAI,CAAC1B,iBAAiB,EAAE6B,KAAK,CAAC;EACxC;EAEAC,gBAAgBA,CAACD,KAAK,EAAEE,OAAO,EAAE;IAC/B,IAAI,CAACF,KAAK,EAAE;MACV,IAAI,CAAC7B,iBAAiB,CAAC2B,IAAI,CAACI,OAAO,CAAC;MACpC,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb;AACF;AAACC,OAAA,CAAAxC,eAAA,GAAAA,eAAA;AAED,SAASgB,oBAAoBA,CAACL,KAAK,EAAE;EACnC,OAAO,IAAAE,mBAAQ,EAACF,KAAK,CAAC,IAAI,IAAA8B,mBAAQ,EAAC9B,KAAK,CAAC,IAAI,IAAA+B,iBAAM,EAAC/B,KAAK,CAAC;AAC5D"}