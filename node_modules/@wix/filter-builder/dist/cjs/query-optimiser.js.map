{"version":3,"names":["optimisations","optimisedUnaryAnd","optimisedEmptyAnd","optimisedAndsAsObjects","optimisedNestedAnds","optimisedNestedOrs","optimisedQuery","query","_fullyOptimised","fullyOptimised","newQuery","Array","isArray","fullyOptimisedArray","instanceOfIgnoredType","fullyOptimisedObject","optimisedElements","map","somethingChanged","filter","elementChanged","length","newElements","element","_fullEntriesOptimisat","fullEntriesOptimisation","queryAfterOptimisingEntries","changedStage1","_fullObjectOptimisati","fullObjectOptimisation","queryAfterFullOptimisation","changedStage2","changed","updatedQuery","applyFirstOptimisation","_fullyOptimised2","finalQuery","changedEntries","Object","entries","entryOptimisation","entriesAsObject","key","value","_fullyOptimised3","newValue","reduce","acc","node","optimisation","newNode","args","$and","basicObjects","operatorObjects","forEach","arg","isOperator","haveOverlappingFields","combinedBasicObjects","assign","keys","every","name","startsWith","objects","nonUniqueKeys","it","a","b","uniqueKeys","unique","values","dict","v","hasNestedAnds","find","newArgs","result","current","and","$or","hasNestedOrs","or","obj","Date"],"sources":["../../src/query-optimiser.ts"],"sourcesContent":["const optimisations = [\n  optimisedUnaryAnd,\n  optimisedEmptyAnd,\n  optimisedAndsAsObjects,\n  optimisedNestedAnds,\n  optimisedNestedOrs,\n]\n\nexport function optimisedQuery(query) {\n  const [newQuery] = fullyOptimised(query)\n  return newQuery\n}\n\nfunction fullyOptimised(query) {\n  if (Array.isArray(query)) {\n    return fullyOptimisedArray(query)\n  }\n  if (\n    typeof query === 'object' &&\n    query !== null &&\n    !instanceOfIgnoredType(query)\n  ) {\n    return fullyOptimisedObject(query)\n  }\n  return [query, false]\n}\n\nfunction fullyOptimisedArray(query) {\n  const optimisedElements = query.map(fullyOptimised)\n  const somethingChanged =\n    0 < optimisedElements.filter(([, elementChanged]) => elementChanged).length\n  const newElements = optimisedElements.map(([element]) => element)\n  return [newElements, somethingChanged]\n}\n\nfunction fullyOptimisedObject(query) {\n  const [queryAfterOptimisingEntries, changedStage1] =\n    fullEntriesOptimisation(query)\n  const [queryAfterFullOptimisation, changedStage2] = fullObjectOptimisation(\n    queryAfterOptimisingEntries\n  )\n  const changed = changedStage1 || changedStage2\n  return [queryAfterFullOptimisation, changed]\n\n  function fullObjectOptimisation(query) {\n    const updatedQuery = applyFirstOptimisation(query)\n    if (!updatedQuery) {\n      return [query, false]\n    }\n    const [finalQuery] = fullyOptimised(updatedQuery)\n    return [finalQuery, true]\n  }\n\n  function fullEntriesOptimisation(query) {\n    const changedEntries = Object.entries(query)\n      .map(entryOptimisation)\n      .filter(([, , changed]) => changed)\n    const newQuery = { ...query, ...entriesAsObject(changedEntries) }\n    const changed = !!changedEntries.length\n    return [newQuery, changed]\n  }\n\n  function entryOptimisation([key, value]) {\n    const [newValue, changed] = fullyOptimised(value)\n    return [key, newValue, changed]\n  }\n\n  function entriesAsObject(entries) {\n    return entries.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})\n  }\n}\n\nfunction applyFirstOptimisation(node) {\n  for (const optimisation of optimisations) {\n    const newNode = optimisation(node)\n    if (newNode) {\n      return newNode\n    }\n  }\n}\n\nfunction optimisedUnaryAnd(node) {\n  const args = node.$and\n  if (Array.isArray(args) && args.length === 1) {\n    return args[0]\n  }\n}\n\nfunction optimisedEmptyAnd(node) {\n  const args = node.$and\n  if (Array.isArray(args) && args.length === 0) {\n    return {}\n  }\n  return null\n}\n\nfunction optimisedAndsAsObjects(node) {\n  const args = node.$and\n  if (!args) {\n    return\n  }\n\n  let basicObjects: any[] = []\n  let operatorObjects: any[] = []\n\n  args.forEach((arg) => {\n    if (isOperator(arg)) {\n      operatorObjects = [...operatorObjects, arg]\n    } else {\n      basicObjects = [...basicObjects, arg]\n    }\n  })\n\n  if (basicObjects.length <= 1 || haveOverlappingFields(basicObjects)) {\n    return\n  }\n  const combinedBasicObjects = Object.assign({}, ...basicObjects)\n\n  return { $and: [combinedBasicObjects, ...operatorObjects] }\n\n  function isOperator(node) {\n    const keys = Object.keys(node)\n    return keys.every((name) => name.startsWith('$')) && keys.length > 0\n  }\n\n  function haveOverlappingFields(objects) {\n    const nonUniqueKeys = objects\n      .map((it) => Object.keys(it))\n      .reduce((a, b) => [...a, ...b], [])\n    const uniqueKeys = unique(nonUniqueKeys)\n    return uniqueKeys.length !== nonUniqueKeys.length\n  }\n\n  function unique(values) {\n    const dict = {}\n    values.forEach((v) => (dict[v] = true))\n    return Object.keys(dict)\n  }\n}\n\nfunction optimisedNestedAnds(node) {\n  const args = node.$and\n  if (!args) {\n    return\n  }\n\n  const hasNestedAnds = !!args.find((it) => it.$and)\n  if (!hasNestedAnds) {\n    return\n  }\n\n  const newArgs = args.reduce((result, current) => {\n    const and = current.$and\n    if (!and) {\n      return [...result, current]\n    }\n    return [...result, ...and]\n  }, [])\n  return { $and: newArgs }\n}\n\nfunction optimisedNestedOrs(node) {\n  const args = node.$or\n  if (!args) {\n    return\n  }\n\n  const hasNestedOrs = !!args.find((it) => it.$or)\n  if (!hasNestedOrs) {\n    return\n  }\n\n  const newArgs = args.reduce((result, current) => {\n    const or = current.$or\n    if (!or) {\n      return [...result, current]\n    }\n    return [...result, ...or]\n  }, [])\n  return { $or: newArgs }\n}\n\nfunction instanceOfIgnoredType(obj) {\n  return obj instanceof Date\n}\n"],"mappings":"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"}