{"version":3,"names":["_typeUtils","require","_clone","_interopRequireDefault","_filterValidator","_queryOptimiser","filterMixin","Base","constructor","obj","_defineProperty2","default","filterTree","$and","invalidArguments","encoder","eq","args","_binaryAnd","ne","ge","_AndLogicalEquivalence","gt","le","lt","isNotEmpty","field","_this$_filterValidato","arityIsOne","arguments","validFieldName","validateAndAggregate","newInvalidArguments","valid","_copy","isEmpty","_this$_filterValidato2","startsWith","_AndStringOperand","endsWith","contains","hasSome","_AndSetOperand","hasAll","or","orQuery","_this$_filterValidato3","isInstanceOfSameClass","prefix","isEmptyAnd","inAnd","$or","concat","and","andQuery","_this$_filterValidato4","not","notQuery","_this$_filterValidato5","newFilterTree","clone","notClause","$not","resultingFilter","inAndOptimized","between","rangeStart","rangeEnd","_this$_filterValidato6","arityIsThree","sameType","typeIsStringNumberOrDate","getFilterModel","length","Error","join","optimisedQuery","setFilterModel","filterModel","filterOperatorSymbol","operatorName","_Array$prototype$slic","Array","prototype","slice","call","operand","_this$_filterValidato7","arityIsTwo","_makeNewFilter","_Array$prototype$slic2","_this$_filterValidato8","filterOperatorName","_Array$prototype$slic3","_this$_filterValidato9","typeIsString","_Array$prototype$slic4","rawOperands","operands","isArray","_this$_filterValidato10","arityIsAtLeastTwo","typeIsStringNumberOrDateForAll","serializableOperand","undefined","newFilter","_buildFilter","push","result","isEmptyObject","_encode","isFunction","FilterValidator","isConjunctiveFormFilter","Object","keys","reduce","aggr","val","node","_default","exports"],"sources":["../../src/filter-mixin.ts"],"sourcesContent":["import { isArray, isFunction } from './type-utils'\nimport clone from './clone'\nimport { FilterValidator } from './filter-validator'\nimport { Validator } from './validator'\nimport { optimisedQuery } from './query-optimiser'\n\nconst filterMixin = (Base: any = class {}) =>\n  class extends Base {\n    filterTree\n    invalidArguments\n    encoder\n\n    constructor(obj: { filterTree?; invalidArguments?; encoder? } = {}) {\n      super(obj)\n      this.filterTree = obj.filterTree || { $and: [] }\n      this.invalidArguments = obj.invalidArguments || []\n      this.encoder = obj.encoder || {}\n    }\n\n    eq(...args) {\n      return this._binaryAnd('$eq', '.eq', args)\n    }\n\n    ne(...args) {\n      return this._binaryAnd('$ne', '.ne', args)\n    }\n\n    ge(...args) {\n      return this._AndLogicalEquivalence('$gte', '.ge', args)\n    }\n\n    gt(...args) {\n      return this._AndLogicalEquivalence('$gt', '.gt', args)\n    }\n\n    le(...args) {\n      return this._AndLogicalEquivalence('$lte', '.le', args)\n    }\n\n    lt(...args) {\n      return this._AndLogicalEquivalence('$lt', '.lt', args)\n    }\n\n    isNotEmpty(field) {\n      const [newInvalidArguments, valid] = this._filterValidator('.isNotEmpty')\n        .arityIsOne(arguments)\n        .validFieldName(field)\n        .validateAndAggregate()\n\n      if (valid) {\n        return this.ne(field, null)\n      }\n\n      return this._copy(this.filterTree, newInvalidArguments)\n    }\n\n    isEmpty(field) {\n      const [newInvalidArguments, valid] = this._filterValidator('.isEmpty')\n        .arityIsOne(arguments)\n        .validFieldName(field)\n        .validateAndAggregate()\n\n      if (valid) {\n        return this.eq(field, null)\n      }\n\n      return this._copy(this.filterTree, newInvalidArguments)\n    }\n\n    startsWith(...args) {\n      return this._AndStringOperand('$startsWith', '.startsWith', args)\n    }\n\n    endsWith(...args) {\n      return this._AndStringOperand('$endsWith', '.endsWith', args)\n    }\n\n    contains(...args) {\n      return this._AndStringOperand('$contains', '.contains', args)\n    }\n\n    hasSome(...args) {\n      return this._AndSetOperand('$hasSome', '.hasSome', args)\n    }\n\n    hasAll(...args) {\n      return this._AndSetOperand('$hasAll', '.hasAll', args)\n    }\n\n    or(orQuery) {\n      const [newInvalidArguments, valid] = this._filterValidator('.or')\n        .arityIsOne(arguments)\n        .isInstanceOfSameClass(orQuery)\n        .validateAndAggregate()\n\n      if (valid) {\n        const prefix = isEmptyAnd(this.filterTree) ? [] : [this.filterTree]\n        return this._copy(\n          inAnd({ $or: [...prefix, orQuery.filterTree] }),\n          newInvalidArguments.concat(orQuery.invalidArguments)\n        )\n      } else {\n        return this._copy(this.filterTree, newInvalidArguments)\n      }\n    }\n\n    and(andQuery) {\n      const [newInvalidArguments, valid] = this._filterValidator('.and')\n        .arityIsOne(arguments)\n        .isInstanceOfSameClass(andQuery)\n        .validateAndAggregate()\n\n      if (valid) {\n        const prefix = isEmptyAnd(this.filterTree) ? [] : [this.filterTree]\n        return this._copy(\n          inAnd(...prefix, andQuery.filterTree),\n          newInvalidArguments.concat(andQuery.invalidArguments)\n        )\n      } else {\n        return this._copy(this.filterTree, newInvalidArguments)\n      }\n    }\n\n    not(notQuery) {\n      const [newInvalidArguments, valid] = this._filterValidator('.not')\n        .arityIsOne(arguments)\n        .isInstanceOfSameClass(notQuery)\n        .validateAndAggregate()\n\n      if (valid) {\n        const newFilterTree = clone(this.filterTree)\n        const notClause = { $not: [notQuery.filterTree] }\n        const resultingFilter = inAndOptimized(newFilterTree, notClause)\n\n        return this._copy(\n          resultingFilter,\n          newInvalidArguments.concat(notQuery.invalidArguments)\n        )\n      } else {\n        return this._copy(this.filterTree, newInvalidArguments)\n      }\n    }\n\n    between(field, rangeStart, rangeEnd) {\n      const [newInvalidArguments, valid] = this._filterValidator('.between')\n        .arityIsThree(arguments)\n        .sameType(rangeStart, rangeEnd)\n        .typeIsStringNumberOrDate(rangeStart)\n        .typeIsStringNumberOrDate(rangeEnd)\n        .validateAndAggregate()\n\n      if (valid) {\n        return this.ge(field, rangeStart).lt(field, rangeEnd)\n      }\n\n      return this._copy(this.filterTree, newInvalidArguments)\n    }\n\n    getFilterModel() {\n      if (this.invalidArguments.length > 0) {\n        throw new Error(this.invalidArguments.join(' '))\n      }\n      return optimisedQuery(this.filterTree)\n    }\n\n    setFilterModel(filterModel) {\n      return this._copy(filterModel, [])\n    }\n\n    _binaryAnd(filterOperatorSymbol, operatorName, args) {\n      const [field, operand] = Array.prototype.slice.call(args)\n\n      const [newInvalidArguments] = this._filterValidator(operatorName)\n        .arityIsTwo(args)\n        .validFieldName(field)\n        .validateAndAggregate()\n\n      const newFilterTree = this._makeNewFilter(\n        field,\n        filterOperatorSymbol,\n        operand\n      )\n\n      return this._copy(newFilterTree, newInvalidArguments)\n    }\n\n    _AndLogicalEquivalence(filterOperatorSymbol, operatorName, args) {\n      const [field, operand] = Array.prototype.slice.call(args)\n\n      const [newInvalidArguments] = this._filterValidator(operatorName)\n        .arityIsTwo(args)\n        .validFieldName(field)\n        .typeIsStringNumberOrDate(operand)\n        .validateAndAggregate()\n\n      const newFilterTree = this._makeNewFilter(\n        field,\n        filterOperatorSymbol,\n        operand\n      )\n      return this._copy(newFilterTree, newInvalidArguments)\n    }\n\n    _AndStringOperand(filterOperatorName, operatorName, args) {\n      const [field, operand] = Array.prototype.slice.call(args)\n\n      const [newInvalidArguments] = this._filterValidator(operatorName)\n        .arityIsTwo(args)\n        .validFieldName(field)\n        .typeIsString(operand)\n        .validateAndAggregate()\n\n      const newFilterTree = this._makeNewFilter(\n        field,\n        filterOperatorName,\n        operand\n      )\n\n      return this._copy(newFilterTree, newInvalidArguments)\n    }\n\n    _AndSetOperand(filterOperatorName, operatorName, args) {\n      const [field, ...rawOperands] = Array.prototype.slice.call(args)\n      const operands = isArray(rawOperands[0]) ? rawOperands[0] : rawOperands\n\n      const [newInvalidArguments] = this._filterValidator(operatorName)\n        .arityIsAtLeastTwo(args)\n        .validFieldName(field)\n        .typeIsStringNumberOrDateForAll(operands)\n        .validateAndAggregate()\n\n      const newFilterTree = this._makeNewFilter(\n        field,\n        filterOperatorName,\n        operands\n      )\n      return this._copy(newFilterTree, newInvalidArguments)\n    }\n\n    _makeNewFilter(field, filterOperatorName, operand) {\n      const newFilterTree = clone(this.filterTree)\n\n      // filters with 'undefined' value are lost during serialization,\n      // e.g. { val: { $ne: undefined } | translates to { val: {} }\n      // Replacing 'undefined' with 'null' retains the filter.\n      const serializableOperand = operand === undefined ? null : operand\n      const newFilter = this._buildFilter(\n        field,\n        filterOperatorName,\n        serializableOperand\n      )\n\n      if (isArray(newFilterTree.$and)) {\n        newFilterTree.$and.push(newFilter)\n        return newFilterTree\n      } else {\n        const result = isEmptyObject(newFilterTree)\n          ? inAnd(newFilter)\n          : inAnd(newFilterTree, newFilter)\n        return result\n      }\n    }\n\n    _buildFilter(field, filterOperatorName, operand) {\n      if (filterOperatorName !== '$eq') {\n        const newFilter = {}\n        newFilter[field] = {}\n        newFilter[field][filterOperatorName] = this._encode(operand)\n        return newFilter\n      } else {\n        const newFilter = {}\n        newFilter[field] = this._encode(operand)\n        return newFilter\n      }\n    }\n\n    _encode(operand) {\n      if (isFunction(this.encoder)) {\n        return this.encoder(operand)\n      } else {\n        return operand\n      }\n    }\n\n    _copy(filterTree, invalidArguments) {\n      // @ts-ignore-next-line\n      return new this.constructor({ ...this, filterTree, invalidArguments })\n    }\n\n    _filterValidator(filterOperatorName): Validator {\n      return new FilterValidator(\n        filterOperatorName,\n        this.invalidArguments,\n        this.constructor\n      )\n    }\n  }\n\nfunction isConjunctiveFormFilter(filterTree) {\n  return isArray(filterTree.$and)\n}\n\nfunction isEmptyObject(obj) {\n  return Object.keys(obj).length === 0\n}\n\nfunction inAnd(...args) {\n  return {\n    $and: args,\n  }\n}\n\nfunction inAndOptimized(...args) {\n  return {\n    $and: args.reduce(\n      (aggr, val) =>\n        isConjunctiveFormFilter(val)\n          ? aggr.concat(val.$and)\n          : aggr.concat([val]),\n      []\n    ),\n  }\n}\n\nfunction isEmptyAnd(node) {\n  return node && node.$and && node.$and.length === 0\n}\n\nexport default filterMixin\n"],"mappings":"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"}