{"version":3,"names":["_motionEdmAutogenP13n","require","_motionEdmAutogenTransformations","_domain","_converters","_serializer","_utils","_lodash","_converters2","_transformationHandler","exports","RootPath","transformError","_queryTransformation","resolveQueryFieldsTransformationPaths","converters","typeToConverterSet","protobufConverters","veloConverters","extractDomainEventPayload","parsedDomainEvent","_parsedDomainEvent$cr","_parsedDomainEvent$ac","_parsedDomainEvent$up","event","createdEvent","entityAsJson","actionEvent","bodyAsJson","updatedEvent","currentEntityAsJson","Error","serializer","rootSchema","depSchemas","fqdnTransformation","paths","transformation","customTransformation","serialize","schemaSerializer","toAmbassadorRequest","userInputArgs","omitBy","fromCorvidEntity","transformToRequestMessage","builtinCustomFunctions","ConverterType","TO_JSON","isUndefined","fromJSON","json","deserialized","FROM_JSON","fqdnTransformed","transformFqdn","toCorvidEntity","transformResponseMessage","toJSON","veloPayload"],"sources":["../../src/velo-index.ts"],"sourcesContent":["import { builtinCustomFunctions } from '@wix/motion-edm-autogen-p13n';\nimport {\n  fromCorvidEntity,\n  toCorvidEntity,\n  transformResponseMessage,\n  transformToRequestMessage,\n} from '@wix/motion-edm-autogen-transformations';\nimport { ConverterType, Payload } from './serializer/domain';\nimport { protobufConverters } from './serializer/protobuf-converters/converters';\nimport { schemaSerializer } from './serializer/serializer';\nimport { typeToConverterSet } from './serializer/utils';\nimport { isUndefined, omitBy } from 'lodash';\nimport { veloConverters } from './serializer/velo-converters/converters';\nimport {\n  RootPath,\n  transformError,\n  transformFqdn,\n} from './transformation-handler';\nimport { SerializerParams } from './types';\nimport { resolveQueryFieldsTransformationPaths } from './query-transformation';\n\nconst converters = typeToConverterSet([\n  ...protobufConverters,\n  ...veloConverters,\n]);\n\nexport { RootPath, resolveQueryFieldsTransformationPaths, transformError };\n\nexport type {\n  GoogleProtoDuration,\n  Long,\n} from './serializer/protobuf-converters/types';\n\nexport type DomainEventMetadata = {\n  id?: string;\n  entityId?: string;\n  eventTime?: string;\n  triggeredByAnonymizeRequest?: boolean;\n};\n\nexport type DomainEvent = {\n  createdEvent?: { entityAsJson: object };\n  updatedEvent?: { currentEntityAsJson: object };\n  actionEvent?: { bodyAsJson: object };\n  deletedEvent?: {};\n} & DomainEventMetadata;\n\nexport function extractDomainEventPayload(parsedDomainEvent: DomainEvent) {\n  const event =\n    parsedDomainEvent.createdEvent?.entityAsJson ||\n    parsedDomainEvent.actionEvent?.bodyAsJson ||\n    parsedDomainEvent.updatedEvent?.currentEntityAsJson;\n\n  if (event) {\n    return event;\n  }\n\n  throw new Error('Invalid Domain Event structure detected');\n}\n\nexport function serializer({\n  rootSchema,\n  depSchemas,\n  fqdnTransformation = { paths: [], transformation: '$' },\n  customTransformation = '$',\n}: SerializerParams) {\n  const serialize = schemaSerializer(rootSchema, depSchemas, converters);\n\n  return {\n    toAmbassadorRequest(userInputArgs: any[]): Payload {\n      return omitBy(\n        serialize(\n          fromCorvidEntity(\n            transformToRequestMessage(\n              userInputArgs,\n              customTransformation,\n              builtinCustomFunctions,\n            ),\n          ),\n          ConverterType.TO_JSON,\n        ),\n        isUndefined,\n      );\n    },\n\n    fromJSON(json: Payload): Payload {\n      const deserialized = serialize(json, ConverterType.FROM_JSON);\n\n      const fqdnTransformed = transformFqdn(deserialized, fqdnTransformation);\n\n      return toCorvidEntity(\n        transformResponseMessage(\n          fqdnTransformed,\n          customTransformation,\n          builtinCustomFunctions,\n        ),\n      );\n    },\n\n    toJSON(veloPayload: Payload): Payload {\n      const deserialized = serialize(veloPayload, ConverterType.TO_JSON);\n\n      return fromCorvidEntity(\n        transformToRequestMessage(\n          deserialized,\n          customTransformation,\n          builtinCustomFunctions,\n        ),\n      );\n    },\n  };\n}\n"],"mappings":";;;;;AAAA,IAAAA,qBAAA,GAAAC,OAAA;AACA,IAAAC,gCAAA,GAAAD,OAAA;AAMA,IAAAE,OAAA,GAAAF,OAAA;AACA,IAAAG,WAAA,GAAAH,OAAA;AACA,IAAAI,WAAA,GAAAJ,OAAA;AACA,IAAAK,MAAA,GAAAL,OAAA;AACA,IAAAM,OAAA,GAAAN,OAAA;AACA,IAAAO,YAAA,GAAAP,OAAA;AACA,IAAAQ,sBAAA,GAAAR,OAAA;AAIkCS,OAAA,CAAAC,QAAA,GAAAF,sBAAA,CAAAE,QAAA;AAAAD,OAAA,CAAAE,cAAA,GAAAH,sBAAA,CAAAG,cAAA;AAElC,IAAAC,oBAAA,GAAAZ,OAAA;AAA+ES,OAAA,CAAAI,qCAAA,GAAAD,oBAAA,CAAAC,qCAAA;AAE/E,MAAMC,UAAU,GAAG,IAAAC,yBAAkB,EAAC,CACpC,GAAGC,8BAAkB,EACrB,GAAGC,2BAAc,CAClB,CAAC;AAuBK,SAASC,yBAAyBA,CAACC,iBAA8B,EAAE;EAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;EACxE,MAAMC,KAAK,GACT,EAAAH,qBAAA,GAAAD,iBAAiB,CAACK,YAAY,qBAA9BJ,qBAAA,CAAgCK,YAAY,OAAAJ,qBAAA,GAC5CF,iBAAiB,CAACO,WAAW,qBAA7BL,qBAAA,CAA+BM,UAAU,OAAAL,qBAAA,GACzCH,iBAAiB,CAACS,YAAY,qBAA9BN,qBAAA,CAAgCO,mBAAmB;EAErD,IAAIN,KAAK,EAAE;IACT,OAAOA,KAAK;EACd;EAEA,MAAM,IAAIO,KAAK,CAAC,yCAAyC,CAAC;AAC5D;AAEO,SAASC,UAAUA,CAAC;EACzBC,UAAU;EACVC,UAAU;EACVC,kBAAkB,GAAG;IAAEC,KAAK,EAAE,EAAE;IAAEC,cAAc,EAAE;EAAI,CAAC;EACvDC,oBAAoB,GAAG;AACP,CAAC,EAAE;EACnB,MAAMC,SAAS,GAAG,IAAAC,4BAAgB,EAACP,UAAU,EAAEC,UAAU,EAAEnB,UAAU,CAAC;EAEtE,OAAO;IACL0B,mBAAmBA,CAACC,aAAoB,EAAW;MACjD,OAAO,IAAAC,cAAM,EACXJ,SAAS,CACP,IAAAK,iDAAgB,EACd,IAAAC,0DAAyB,EACvBH,aAAa,EACbJ,oBAAoB,EACpBQ,4CACF,CACF,CAAC,EACDC,qBAAa,CAACC,OAChB,CAAC,EACDC,mBACF,CAAC;IACH,CAAC;IAEDC,QAAQA,CAACC,IAAa,EAAW;MAC/B,MAAMC,YAAY,GAAGb,SAAS,CAACY,IAAI,EAAEJ,qBAAa,CAACM,SAAS,CAAC;MAE7D,MAAMC,eAAe,GAAG,IAAAC,oCAAa,EAACH,YAAY,EAAEjB,kBAAkB,CAAC;MAEvE,OAAO,IAAAqB,+CAAc,EACnB,IAAAC,yDAAwB,EACtBH,eAAe,EACfhB,oBAAoB,EACpBQ,4CACF,CACF,CAAC;IACH,CAAC;IAEDY,MAAMA,CAACC,WAAoB,EAAW;MACpC,MAAMP,YAAY,GAAGb,SAAS,CAACoB,WAAW,EAAEZ,qBAAa,CAACC,OAAO,CAAC;MAElE,OAAO,IAAAJ,iDAAgB,EACrB,IAAAC,0DAAyB,EACvBO,YAAY,EACZd,oBAAoB,EACpBQ,4CACF,CACF,CAAC;IACH;EACF,CAAC;AACH"}