"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.image = void 0;
var _querystring = _interopRequireDefault(require("querystring"));
var _domain = require("../domain");
var _convertersUtils = require("./converters-utils");
const WIX_IMAGE = 'image';
const image = {
  types: ['wix.common.Image'],
  [_domain.ConverterType.FROM_JSON]: {
    /**
     * currently wix.common.Image represents the deserialized object, so we're good.
     * in case it contains some serializable stuff (e.g. int64), we'll have to make some
     * modifications in the type.
     */
    transform: val => {
      if (!val) {
        return;
      }
      let fileNameOrAltText = '';
      if (val.filename || val.altText) {
        fileNameOrAltText = `/${(0, _convertersUtils.encodeText)(val.filename || val.altText)}`;
      }
      return val.id ? `wix:image://v1/${val.id}${fileNameOrAltText}${_convertersUtils.URL_HASH_PREFIX}originWidth=${val.width}&originHeight=${val.height}` : val.url;
    }
  },
  [_domain.ConverterType.TO_JSON]: {
    transform: val => {
      if (!val) {
        return;
      }
      const alignedImage = (0, _convertersUtils.alignIfLegacy)(val, WIX_IMAGE);
      const _URL = new URL(alignedImage),
        protocol = _URL.protocol,
        hash = _URL.hash,
        pathname = _URL.pathname;
      const _querystring$parse = _querystring.default.parse(hash.replace(_convertersUtils.URL_HASH_PREFIX, '')),
        height = _querystring$parse.originHeight,
        width = _querystring$parse.originWidth;
      const _pathname$replace$spl = pathname.replace(`${WIX_IMAGE}://v1/`, '').split('/'),
        id = _pathname$replace$spl[0],
        filenameOrAltText = _pathname$replace$spl[1];
      const decodedFilenameOrAltText = (0, _convertersUtils.decodeText)(filenameOrAltText);
      if (protocol === _convertersUtils.WIX_PROTOCOL) {
        const res = {
          id,
          height: Number(height),
          width: Number(width)
        };
        if (!decodedFilenameOrAltText) {
          return res;
        }
        return {
          ...res,
          altText: decodedFilenameOrAltText,
          filename: decodedFilenameOrAltText
        };
      }
      return {
        url: val
      };
    }
  }
};
exports.image = image;
//# sourceMappingURL=image.js.map