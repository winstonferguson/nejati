import { Payload } from './serializer/domain';
import { FqdnTransformation } from './types';
export declare type VeloTransformation = any;
export declare const RootPath: unique symbol;
export declare enum FqdnDirection {
    TO_VELO = 0,
    FROM_VELO = 1
}
export declare function transformFqdn(payload: Payload, fqdnTransformation: FqdnTransformation): any;
interface FqdnTransformationHandlerParams {
    entity: any;
    pathToFqdn: string;
    transformation: VeloTransformation;
    direction?: FqdnDirection;
}
export declare class FqdnTransformationHandler {
    private readonly path;
    private readonly entity;
    private readonly transformation;
    constructor({ entity, pathToFqdn, transformation, }: FqdnTransformationHandlerParams);
    transformEntity(entity?: any, index?: number): any;
    private transformArray;
    private transformMap;
}
export declare function transformError(httpClientError: any, transformation?: VeloTransformation, argumentNames?: string[]): Error;
export {};
