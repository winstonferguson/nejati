import { Payload } from './serializer/domain';
import { RootPath, transformError } from './transformation-handler';
import { SerializerParams } from './types';
import { resolveQueryFieldsTransformationPaths } from './query-transformation';
export { RootPath, resolveQueryFieldsTransformationPaths, transformError };
export type { GoogleProtoDuration, Long, } from './serializer/protobuf-converters/types';
export declare type DomainEventMetadata = {
    id?: string;
    entityId?: string;
    eventTime?: string;
    triggeredByAnonymizeRequest?: boolean;
};
export declare type DomainEvent = {
    createdEvent?: {
        entityAsJson: object;
    };
    updatedEvent?: {
        currentEntityAsJson: object;
    };
    actionEvent?: {
        bodyAsJson: object;
    };
    deletedEvent?: {};
} & DomainEventMetadata;
export declare function extractDomainEventPayload(parsedDomainEvent: DomainEvent): object;
export declare function serializer({ rootSchema, depSchemas, fqdnTransformation, customTransformation, }: SerializerParams): {
    toAmbassadorRequest(userInputArgs: any[]): Payload;
    fromJSON(json: Payload): Payload;
    toJSON(veloPayload: Payload): Payload;
};
