import { cloneDeep, set } from 'lodash';
import { parseLeanSchemaRef } from './serialization';
import { transformError as cloudEdmTransformError, transformResponseMessage, } from '@wix/motion-edm-autogen-transformations';
import { builtinCustomFunctions } from '@wix/motion-edm-autogen-p13n';
export var RootPath = Symbol('RootPath');
export var FqdnDirection;
(function (FqdnDirection) {
    FqdnDirection[FqdnDirection["TO_VELO"] = 0] = "TO_VELO";
    FqdnDirection[FqdnDirection["FROM_VELO"] = 1] = "FROM_VELO";
})(FqdnDirection || (FqdnDirection = {}));
export function transformFqdn(payload, fqdnTransformation) {
    var transformation = fqdnTransformation.transformation;
    return fqdnTransformation.paths.reduce(function (payload, path) {
        var pathToFqdn = typeof path === 'string' ? path : '';
        return new FqdnTransformationHandler({
            entity: payload,
            transformation: transformation,
            pathToFqdn: pathToFqdn,
        }).transformEntity();
    }, payload);
}
var FqdnTransformationHandler = /** @class */ (function () {
    function FqdnTransformationHandler(_a) {
        var entity = _a.entity, pathToFqdn = _a.pathToFqdn, transformation = _a.transformation;
        var _this = this;
        this.transformArray = function (entitiesArray, index) {
            return entitiesArray.map(function (entity) {
                return _this.transformEntity(entity, index);
            });
        };
        this.transformMap = function (entitiesMap, index) {
            return Object.entries(entitiesMap).reduce(function (acc, _a) {
                var key = _a[0], entity = _a[1];
                acc[key] = _this.transformEntity(entity, index);
                return acc;
            }, {});
        };
        this.path = pathToFqdn.split('.');
        this.entity = cloneDeep(entity);
        this.transformation = transformation;
    }
    FqdnTransformationHandler.prototype.transformEntity = function (entity, index) {
        if (entity === void 0) { entity = this.entity; }
        if (index === void 0) { index = 0; }
        var currentPath = this.path[index];
        if (!currentPath) {
            return transformResponseMessage(entity, this.transformation, builtinCustomFunctions);
        }
        var _a = parseLeanSchemaRef(currentPath), schemaName = _a.schemaName, schemaType = _a.schemaType;
        var currentEntity = entity[schemaName];
        if (!currentEntity) {
            return entity;
        }
        var transformedEntity;
        if (schemaType === 'Array') {
            transformedEntity = this.transformArray(currentEntity, index + 1);
        }
        else if (schemaType === 'Map') {
            transformedEntity = this.transformMap(currentEntity, index + 1);
        }
        else {
            transformedEntity = this.transformEntity(currentEntity, index + 1);
        }
        set(entity, schemaName, transformedEntity);
        return entity;
    };
    return FqdnTransformationHandler;
}());
export { FqdnTransformationHandler };
export function transformError(httpClientError, transformation, argumentNames) {
    var _a, _b;
    var expectedErrorStructure = {
        requestId: httpClientError.requestId,
        response: (_a = httpClientError.response) === null || _a === void 0 ? void 0 : _a.data,
        httpStatus: (_b = httpClientError.response) === null || _b === void 0 ? void 0 : _b.status,
    };
    return cloudEdmTransformError(expectedErrorStructure, transformation, argumentNames);
}
//# sourceMappingURL=transformation-handler.js.map