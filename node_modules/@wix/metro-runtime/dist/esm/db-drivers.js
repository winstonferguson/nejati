var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { typeToConverterSet } from './serializer/utils';
import { dbDriversConverters } from './serializer/db-drivers-converters/converters';
import { schemaSerializer } from './serializer/serializer';
import { ConverterType } from './serializer/domain';
import { transformFqdn, RootPath } from './transformation-handler';
import { veloConverters } from './serializer/velo-converters/converters';
import { toPlatformizedQuery } from './query-transformation';
import { fromCorvidEntity, toCorvidEntity, } from '@wix/motion-edm-autogen-transformations';
var converters = typeToConverterSet(__spreadArray(__spreadArray([], dbDriversConverters, true), veloConverters, true));
export { RootPath, toPlatformizedQuery };
export function toAmbassadorRequest(_a, entity) {
    var rootSchema = _a.rootSchema, depSchemas = _a.depSchemas, fqdnTransformation = _a.fqdnTransformation;
    var asRequestStructure = fromCorvidEntity(transformFqdn(entity, fqdnTransformation));
    var request = schemaSerializer(rootSchema, depSchemas, converters)(asRequestStructure, ConverterType.TO_JSON);
    return request;
}
export function toDbDriverEntity(_a, entity) {
    var rootSchema = _a.rootSchema, depSchemas = _a.depSchemas, fqdnTransformation = _a.fqdnTransformation;
    var asDbDriverStructure = schemaSerializer(rootSchema, depSchemas, converters)(entity, ConverterType.FROM_JSON);
    var dbDriverEntity = toCorvidEntity(transformFqdn(asDbDriverStructure, fqdnTransformation));
    return dbDriverEntity;
}
/**
 * @deprecated
 */
export function toVeloEntity(opts, entity) {
    return toDbDriverEntity(opts, entity);
}
//# sourceMappingURL=db-drivers.js.map