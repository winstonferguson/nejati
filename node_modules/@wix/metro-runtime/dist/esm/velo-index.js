var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { builtinCustomFunctions } from '@wix/motion-edm-autogen-p13n';
import { fromCorvidEntity, toCorvidEntity, transformResponseMessage, transformToRequestMessage, } from '@wix/motion-edm-autogen-transformations';
import { ConverterType } from './serializer/domain';
import { protobufConverters } from './serializer/protobuf-converters/converters';
import { schemaSerializer } from './serializer/serializer';
import { typeToConverterSet } from './serializer/utils';
import { isUndefined, omitBy } from 'lodash';
import { veloConverters } from './serializer/velo-converters/converters';
import { RootPath, transformError, transformFqdn, } from './transformation-handler';
import { resolveQueryFieldsTransformationPaths } from './query-transformation';
var converters = typeToConverterSet(__spreadArray(__spreadArray([], protobufConverters, true), veloConverters, true));
export { RootPath, resolveQueryFieldsTransformationPaths, transformError };
export function extractDomainEventPayload(parsedDomainEvent) {
    var _a, _b, _c;
    var event = ((_a = parsedDomainEvent.createdEvent) === null || _a === void 0 ? void 0 : _a.entityAsJson) ||
        ((_b = parsedDomainEvent.actionEvent) === null || _b === void 0 ? void 0 : _b.bodyAsJson) ||
        ((_c = parsedDomainEvent.updatedEvent) === null || _c === void 0 ? void 0 : _c.currentEntityAsJson);
    if (event) {
        return event;
    }
    throw new Error('Invalid Domain Event structure detected');
}
export function serializer(_a) {
    var rootSchema = _a.rootSchema, depSchemas = _a.depSchemas, _b = _a.fqdnTransformation, fqdnTransformation = _b === void 0 ? { paths: [], transformation: '$' } : _b, _c = _a.customTransformation, customTransformation = _c === void 0 ? '$' : _c;
    var serialize = schemaSerializer(rootSchema, depSchemas, converters);
    return {
        toAmbassadorRequest: function (userInputArgs) {
            return omitBy(serialize(fromCorvidEntity(transformToRequestMessage(userInputArgs, customTransformation, builtinCustomFunctions)), ConverterType.TO_JSON), isUndefined);
        },
        fromJSON: function (json) {
            var deserialized = serialize(json, ConverterType.FROM_JSON);
            var fqdnTransformed = transformFqdn(deserialized, fqdnTransformation);
            return toCorvidEntity(transformResponseMessage(fqdnTransformed, customTransformation, builtinCustomFunctions));
        },
        toJSON: function (veloPayload) {
            var deserialized = serialize(veloPayload, ConverterType.TO_JSON);
            return fromCorvidEntity(transformToRequestMessage(deserialized, customTransformation, builtinCustomFunctions));
        },
    };
}
//# sourceMappingURL=velo-index.js.map