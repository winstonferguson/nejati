import { builtinCustomFunctions } from '@wix/motion-edm-autogen-p13n';
import {
  fromCorvidEntity,
  toCorvidEntity,
  transformResponseMessage,
  transformToRequestMessage,
} from '@wix/motion-edm-autogen-transformations';
import { ConverterType, Payload } from './serializer/domain';
import { protobufConverters } from './serializer/protobuf-converters/converters';
import { schemaSerializer } from './serializer/serializer';
import { typeToConverterSet } from './serializer/utils';
import { isUndefined, omitBy } from 'lodash';
import { veloConverters } from './serializer/velo-converters/converters';
import {
  RootPath,
  transformError,
  transformFqdn,
} from './transformation-handler';
import { SerializerParams } from './types';
import { resolveQueryFieldsTransformationPaths } from './query-transformation';

const converters = typeToConverterSet([
  ...protobufConverters,
  ...veloConverters,
]);

export { RootPath, resolveQueryFieldsTransformationPaths, transformError };

export type {
  GoogleProtoDuration,
  Long,
} from './serializer/protobuf-converters/types';

export type DomainEventMetadata = {
  id?: string;
  entityId?: string;
  eventTime?: string;
  triggeredByAnonymizeRequest?: boolean;
};

export type DomainEvent = {
  createdEvent?: { entityAsJson: object };
  updatedEvent?: { currentEntityAsJson: object };
  actionEvent?: { bodyAsJson: object };
  deletedEvent?: {};
} & DomainEventMetadata;

export function extractDomainEventPayload(parsedDomainEvent: DomainEvent) {
  const event =
    parsedDomainEvent.createdEvent?.entityAsJson ||
    parsedDomainEvent.actionEvent?.bodyAsJson ||
    parsedDomainEvent.updatedEvent?.currentEntityAsJson;

  if (event) {
    return event;
  }

  throw new Error('Invalid Domain Event structure detected');
}

export function serializer({
  rootSchema,
  depSchemas,
  fqdnTransformation = { paths: [], transformation: '$' },
  customTransformation = '$',
}: SerializerParams) {
  const serialize = schemaSerializer(rootSchema, depSchemas, converters);

  return {
    toAmbassadorRequest(userInputArgs: any[]): Payload {
      return omitBy(
        serialize(
          fromCorvidEntity(
            transformToRequestMessage(
              userInputArgs,
              customTransformation,
              builtinCustomFunctions,
            ),
          ),
          ConverterType.TO_JSON,
        ),
        isUndefined,
      );
    },

    fromJSON(json: Payload): Payload {
      const deserialized = serialize(json, ConverterType.FROM_JSON);

      const fqdnTransformed = transformFqdn(deserialized, fqdnTransformation);

      return toCorvidEntity(
        transformResponseMessage(
          fqdnTransformed,
          customTransformation,
          builtinCustomFunctions,
        ),
      );
    },

    toJSON(veloPayload: Payload): Payload {
      const deserialized = serialize(veloPayload, ConverterType.TO_JSON);

      return fromCorvidEntity(
        transformToRequestMessage(
          deserialized,
          customTransformation,
          builtinCustomFunctions,
        ),
      );
    },
  };
}
