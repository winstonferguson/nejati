"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.OffsetBasedIterator = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _Iterator = require("./Iterator");
class OffsetBasedIterator extends _Iterator.Iterator {
  constructor({
    items,
    fetchNextPage,
    fetchPrevPage,
    offset,
    originQuery,
    limit,
    totalCount,
    tooManyToCount
  }) {
    super({
      items,
      fetchNextPage,
      fetchPrevPage,
      originQuery,
      limit
    });
    (0, _defineProperty2.default)(this, "_totalCount", void 0);
    (0, _defineProperty2.default)(this, "_offset", void 0);
    (0, _defineProperty2.default)(this, "_tooManyToCount", void 0);
    this._totalCount = totalCount;
    this._offset = offset;
    this._tooManyToCount = tooManyToCount;
  }
  get currentPage() {
    return this._limit === 0 ? undefined : Math.floor(this._offset / this._limit);
  }
  get totalPages() {
    return this._tooManyToCount || this._limit === 0 ? undefined : Math.ceil(this._totalCount / this._limit);
  }
  get totalCount() {
    return this._tooManyToCount ? undefined : this._totalCount;
  }
  hasNext() {
    return Boolean(this._limit !== 0 && this.currentPage !== undefined &&
    // currentPage 0 is the first page
    this.totalPages !== undefined && this.currentPage < this.totalPages - 1);
  }
  hasPrev() {
    return Boolean(this._limit !== 0 && this.currentPage && this.currentPage > 0);
  }
}
exports.OffsetBasedIterator = OffsetBasedIterator;
//# sourceMappingURL=OffsetBasedIterator.js.map