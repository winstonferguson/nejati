"use strict";

exports.__esModule = true;
exports.wrapWithQueryBuilder = exports.PlatformizedQueryMethodWrapper = void 0;
var _CursorBasedIterator = require("./CursorBasedIterator");
var _OffsetBasedIterator = require("./OffsetBasedIterator");
var _PlatformizedQueryBuilder = require("./PlatformizedQueryBuilder");
var _motionEdmAutogenCommon = require("@wix/motion-edm-autogen-common");
var _motionEdmAutogenTransformationsCore = require("@wix/motion-edm-autogen-transformations-core");
const _preset$query = _motionEdmAutogenTransformationsCore.preset.query,
  ITEMS_RESULT_PROPERTY_NAME = _preset$query.ITEMS_RESULT_PROPERTY_NAME,
  PAGING_METADATA_RESULT_PROPERTY_NAME = _preset$query.PAGING_METADATA_RESULT_PROPERTY_NAME;
const PagingMethods = _motionEdmAutogenCommon.constants.PagingMethods;
const DEFAULT_LIMIT = 50;
class PlatformizedQueryMethodWrapper extends _PlatformizedQueryBuilder.PlatformizedQueryBuilder {
  constructor(obj) {
    super(obj);
    // Private variables cannot be prefixed with '_' here.
    // That's because the filterMixin used by PlatformizedQueryBuilder copies its properties from "this"
    // and passes them to the new instance ctor, that expects names without the '_' prefix.
    // Changing this breaks the chaining capability.
    this.func = obj.func;
    this.requestTransformer = obj.requestTransformer;
    this.responseTransformer = obj.responseTransformer;
    this.errorTransformer = obj.errorTransformer;
    this.pagingMethod = obj.pagingMethod;
    this.cursor = obj.cursor;
    this.builderOptions = obj.builderOptions;
  }
  async find(options = {}) {
    try {
      var _pagingMetadata$curso5, _pagingMetadata$curso6, _pagingMetadata$curso7, _pagingMetadata$curso8;
      const query = this._buildQuery();
      const request = this.requestTransformer(query, options);
      const response = await this.func(request, {
        ...options,
        ...this.builderOptions
      });
      const _this$responseTransfo = this.responseTransformer(response),
        items = _this$responseTransfo[ITEMS_RESULT_PROPERTY_NAME],
        pagingMetadata = _this$responseTransfo[PAGING_METADATA_RESULT_PROPERTY_NAME];
      if (this.pagingMethod === PagingMethods.Offset) {
        return new _OffsetBasedIterator.OffsetBasedIterator({
          items,
          fetchNextPage: () => this._copyWithNextPage().find(options),
          fetchPrevPage: () => this._copyWithPrevPage().find(options),
          offset: this._pagingOffset,
          limit: this._pagingLimit,
          totalCount: pagingMetadata == null ? void 0 : pagingMetadata.total,
          tooManyToCount: pagingMetadata == null ? void 0 : pagingMetadata.tooManyToCount,
          originQuery: this
        });
      }
      return new _CursorBasedIterator.CursorBasedIterator({
        items,
        limit: this._pagingLimit,
        originQuery: this,
        fetchNextPage: () => {
          var _pagingMetadata$curso, _pagingMetadata$curso2;
          return this._copyWithCursor((_pagingMetadata$curso = pagingMetadata == null ? void 0 : (_pagingMetadata$curso2 = pagingMetadata.cursors) == null ? void 0 : _pagingMetadata$curso2.next) != null ? _pagingMetadata$curso : '').find(options);
        },
        fetchPrevPage: () => {
          var _pagingMetadata$curso3, _pagingMetadata$curso4;
          return this._copyWithCursor((_pagingMetadata$curso3 = pagingMetadata == null ? void 0 : (_pagingMetadata$curso4 = pagingMetadata.cursors) == null ? void 0 : _pagingMetadata$curso4.prev) != null ? _pagingMetadata$curso3 : '').find(options);
        },
        prevCursor: (_pagingMetadata$curso5 = pagingMetadata == null ? void 0 : (_pagingMetadata$curso6 = pagingMetadata.cursors) == null ? void 0 : _pagingMetadata$curso6.prev) != null ? _pagingMetadata$curso5 : '',
        nextCursor: (_pagingMetadata$curso7 = pagingMetadata == null ? void 0 : (_pagingMetadata$curso8 = pagingMetadata.cursors) == null ? void 0 : _pagingMetadata$curso8.next) != null ? _pagingMetadata$curso7 : ''
      });
    } catch (error) {
      return this.errorTransformer(error);
    }
  }
  skipTo(cursor) {
    return this._copyWithCursor(cursor);
  }
  _copyWithCursor(cursor) {
    return new PlatformizedQueryMethodWrapper({
      ...this,
      cursor
    });
  }
  _buildQuery() {
    const queryObject = this.build();
    if (this.pagingMethod === PagingMethods.Cursor) {
      var _this$builderOptions;
      if ((_this$builderOptions = this.builderOptions) != null && _this$builderOptions.cursorWithEmptyFilterAndSort && this.cursor) {
        return {
          cursorPaging: {
            cursor: this.cursor,
            limit: this._pagingLimit
          }
        };
      }
      return {
        filter: queryObject.filter,
        sort: this.sort,
        cursorPaging: {
          cursor: this.cursor,
          limit: this._pagingLimit
        }
      };
    }
    return {
      filter: queryObject.filter,
      sort: this.sort,
      paging: {
        limit: this._pagingLimit,
        offset: this._pagingOffset
      }
    };
  }
  get _pagingOffset() {
    return this.paging.offset || 0;
  }
  get _pagingLimit() {
    return this.paging.limit === undefined ? DEFAULT_LIMIT : this.paging.limit;
  }
  _copyWithOffsetChange(amount) {
    const nextPage = {
      offset: this._pagingOffset + amount,
      limit: this._pagingLimit
    };
    return new PlatformizedQueryMethodWrapper({
      ...this,
      paging: nextPage
    });
  }
  _copyWithNextPage() {
    return this._copyWithOffsetChange(this._pagingLimit);
  }
  _copyWithPrevPage() {
    return this._copyWithOffsetChange(-this._pagingLimit);
  }
}
exports.PlatformizedQueryMethodWrapper = PlatformizedQueryMethodWrapper;
const wrapWithQueryBuilder = ({
  func,
  requestTransformer,
  responseTransformer,
  errorTransformer,
  pagingMethod,
  transformationPaths,
  cursor = undefined
}) => (builderOptions = {}) => new PlatformizedQueryMethodWrapper({
  func,
  builderOptions,
  requestTransformer,
  responseTransformer,
  errorTransformer,
  pagingMethod,
  transformationPaths,
  cursor
});
exports.wrapWithQueryBuilder = wrapWithQueryBuilder;
//# sourceMappingURL=wrapWithQueryBuilder.js.map