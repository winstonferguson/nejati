import { __extends } from "tslib";
import { Iterator } from './Iterator';
var OffsetBasedIterator = /** @class */ (function (_super) {
    __extends(OffsetBasedIterator, _super);
    function OffsetBasedIterator(_a) {
        var items = _a.items, fetchNextPage = _a.fetchNextPage, fetchPrevPage = _a.fetchPrevPage, offset = _a.offset, originQuery = _a.originQuery, limit = _a.limit, totalCount = _a.totalCount, tooManyToCount = _a.tooManyToCount;
        var _this = _super.call(this, { items: items, fetchNextPage: fetchNextPage, fetchPrevPage: fetchPrevPage, originQuery: originQuery, limit: limit }) || this;
        _this._totalCount = totalCount;
        _this._offset = offset;
        _this._tooManyToCount = tooManyToCount;
        return _this;
    }
    Object.defineProperty(OffsetBasedIterator.prototype, "currentPage", {
        get: function () {
            return this._limit === 0
                ? undefined
                : Math.floor(this._offset / this._limit);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OffsetBasedIterator.prototype, "totalPages", {
        get: function () {
            return this._tooManyToCount || this._limit === 0
                ? undefined
                : Math.ceil(this._totalCount / this._limit);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OffsetBasedIterator.prototype, "totalCount", {
        get: function () {
            return this._tooManyToCount ? undefined : this._totalCount;
        },
        enumerable: false,
        configurable: true
    });
    OffsetBasedIterator.prototype.hasNext = function () {
        return Boolean(this._limit !== 0 &&
            this.currentPage !== undefined && // currentPage 0 is the first page
            this.totalPages !== undefined &&
            this.currentPage < this.totalPages - 1);
    };
    OffsetBasedIterator.prototype.hasPrev = function () {
        return Boolean(this._limit !== 0 && this.currentPage && this.currentPage > 0);
    };
    return OffsetBasedIterator;
}(Iterator));
export { OffsetBasedIterator };
//# sourceMappingURL=OffsetBasedIterator.js.map