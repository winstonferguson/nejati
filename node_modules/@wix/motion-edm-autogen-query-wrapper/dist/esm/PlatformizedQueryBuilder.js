import { __extends, __spreadArray } from "tslib";
import { filterMixin } from '@wix/filter-builder';
import { isEqual } from 'lodash';
// import wrapper from './proto-generated';
import { renameFieldByPaths } from './renameFieldByPaths';
// The use of SortOrder adds @wix/motion-edm-autogen-query-wrapper into the chunk out of auto-fem for certain edms
// This is a workaround to avoid that
// const { SortOrder } = wrapper.wix.common;
var SortOrder;
(function (SortOrder) {
    SortOrder[SortOrder["ASC"] = 0] = "ASC";
    SortOrder[SortOrder["DESC"] = 1] = "DESC";
})(SortOrder || (SortOrder = {}));
var WIX_DATA_EMPTY_FILTER = { $and: [] };
// This can be removed when the platformized-filter-builder
// will stop producing { $and: [] } for an empty filter
var toScalaCompatibleFilter = function (filter) {
    return isEqual(filter, WIX_DATA_EMPTY_FILTER) ? {} : filter;
};
var PlatformizedQueryBuilder = /** @class */ (function (_super) {
    __extends(PlatformizedQueryBuilder, _super);
    function PlatformizedQueryBuilder(obj) {
        var _this = _super.call(this, obj) || this;
        // We must save transformationPaths on this (without `_` prefix), due to how filterMixin works.
        // See a more details explanation on PlatformizedQueryMethodWrapper
        _this.transformationPaths = obj.transformationPaths;
        _this.sort = obj.sort || [];
        _this.paging = obj.paging || {};
        return _this;
    }
    PlatformizedQueryBuilder.prototype.eq = function (field, value) {
        return _super.prototype.eq.call(this, this._transformQueryFieldName(field), value);
    };
    PlatformizedQueryBuilder.prototype.ne = function (field, value) {
        return _super.prototype.ne.call(this, this._transformQueryFieldName(field), value);
    };
    PlatformizedQueryBuilder.prototype.ge = function (field, value) {
        return _super.prototype.ge.call(this, this._transformQueryFieldName(field), value);
    };
    PlatformizedQueryBuilder.prototype.gt = function (field, value) {
        return _super.prototype.gt.call(this, this._transformQueryFieldName(field), value);
    };
    PlatformizedQueryBuilder.prototype.le = function (field, value) {
        return _super.prototype.le.call(this, this._transformQueryFieldName(field), value);
    };
    PlatformizedQueryBuilder.prototype.lt = function (field, value) {
        return _super.prototype.lt.call(this, this._transformQueryFieldName(field), value);
    };
    PlatformizedQueryBuilder.prototype.isNotEmpty = function (field) {
        return _super.prototype.isNotEmpty.call(this, this._transformQueryFieldName(field));
    };
    PlatformizedQueryBuilder.prototype.isEmpty = function (field) {
        return _super.prototype.isEmpty.call(this, this._transformQueryFieldName(field));
    };
    PlatformizedQueryBuilder.prototype.startsWith = function (field, value) {
        return _super.prototype.startsWith.call(this, this._transformQueryFieldName(field), value);
    };
    PlatformizedQueryBuilder.prototype.endsWith = function (field, value) {
        return _super.prototype.endsWith.call(this, this._transformQueryFieldName(field), value);
    };
    PlatformizedQueryBuilder.prototype.contains = function (field, value) {
        return _super.prototype.contains.call(this, this._transformQueryFieldName(field), value);
    };
    PlatformizedQueryBuilder.prototype.hasSome = function (field) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        return _super.prototype.hasSome.apply(this, __spreadArray([this._transformQueryFieldName(field)], values, false));
    };
    PlatformizedQueryBuilder.prototype.hasAll = function (field) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        return _super.prototype.hasAll.apply(this, __spreadArray([this._transformQueryFieldName(field)], values, false));
    };
    PlatformizedQueryBuilder.prototype.between = function (field, rangeStart, rangeEnd) {
        return _super.prototype.between.call(this, this._transformQueryFieldName(field), rangeStart, rangeEnd);
    };
    /*
      TODO: use the custom in() and exists() implementations from super (PlatformizedFilterBuilder) once it is exposed as a class
      from this module: https://github.com/wix-private/wix-data/blob/master/platformized-filter-builder/src/filterBuilder.es6#L13,
     */
    PlatformizedQueryBuilder.prototype.in = function (field, values) {
        return this._AndSetOperand('$in', '.in', [
            this._transformQueryFieldName(field),
            values,
        ]);
    };
    PlatformizedQueryBuilder.prototype.exists = function (field, value) {
        return this._binaryAnd('$exists', '.exists', [
            this._transformQueryFieldName(field),
            value,
        ]);
    };
    PlatformizedQueryBuilder.prototype.ascending = function () {
        var _a;
        var _this = this;
        var fieldNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fieldNames[_i] = arguments[_i];
        }
        (_a = this.sort).push.apply(_a, fieldNames.map(function (fieldName) { return ({
            fieldName: _this._transformQueryFieldName(fieldName),
            order: SortOrder[SortOrder.ASC],
        }); }));
        return this;
    };
    PlatformizedQueryBuilder.prototype.descending = function () {
        var _a;
        var _this = this;
        var fieldNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fieldNames[_i] = arguments[_i];
        }
        (_a = this.sort).push.apply(_a, fieldNames.map(function (fieldName) { return ({
            fieldName: _this._transformQueryFieldName(fieldName),
            order: SortOrder[SortOrder.DESC],
        }); }));
        return this;
    };
    PlatformizedQueryBuilder.prototype.skip = function (offset) {
        this.paging.offset = offset;
        return this;
    };
    PlatformizedQueryBuilder.prototype.limit = function (limit) {
        this.paging.limit = limit;
        return this;
    };
    PlatformizedQueryBuilder.prototype.build = function () {
        return {
            filter: toScalaCompatibleFilter(this.getFilterModel()),
            sort: this.sort,
            paging: this.paging,
        };
    };
    PlatformizedQueryBuilder.prototype._transformQueryFieldName = function (field) {
        return renameFieldByPaths(this.transformationPaths, field);
    };
    return PlatformizedQueryBuilder;
}(filterMixin()));
export { PlatformizedQueryBuilder };
//# sourceMappingURL=PlatformizedQueryBuilder.js.map