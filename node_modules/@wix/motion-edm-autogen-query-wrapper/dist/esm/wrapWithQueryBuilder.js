import { __assign, __awaiter, __extends, __generator } from "tslib";
import { CursorBasedIterator } from './CursorBasedIterator';
import { OffsetBasedIterator } from './OffsetBasedIterator';
import { PlatformizedQueryBuilder } from './PlatformizedQueryBuilder';
import { constants } from '@wix/motion-edm-autogen-common';
import { preset } from '@wix/motion-edm-autogen-transformations-core';
var _a = preset.query, ITEMS_RESULT_PROPERTY_NAME = _a.ITEMS_RESULT_PROPERTY_NAME, PAGING_METADATA_RESULT_PROPERTY_NAME = _a.PAGING_METADATA_RESULT_PROPERTY_NAME;
var PagingMethods = constants.PagingMethods;
var DEFAULT_LIMIT = 50;
var PlatformizedQueryMethodWrapper = /** @class */ (function (_super) {
    __extends(PlatformizedQueryMethodWrapper, _super);
    function PlatformizedQueryMethodWrapper(obj) {
        var _this = _super.call(this, obj) || this;
        // Private variables cannot be prefixed with '_' here.
        // That's because the filterMixin used by PlatformizedQueryBuilder copies its properties from "this"
        // and passes them to the new instance ctor, that expects names without the '_' prefix.
        // Changing this breaks the chaining capability.
        _this.func = obj.func;
        _this.requestTransformer = obj.requestTransformer;
        _this.responseTransformer = obj.responseTransformer;
        _this.errorTransformer = obj.errorTransformer;
        _this.pagingMethod = obj.pagingMethod;
        _this.cursor = obj.cursor;
        _this.builderOptions = obj.builderOptions;
        return _this;
    }
    PlatformizedQueryMethodWrapper.prototype.find = function (options) {
        var _a, _b, _c, _d;
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var query, request, response, _e, _f, items, _g, pagingMetadata_1, error_1;
            var _this = this;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        _h.trys.push([0, 2, , 3]);
                        query = this._buildQuery();
                        request = this.requestTransformer(query, options);
                        return [4 /*yield*/, this.func(request, __assign(__assign({}, options), this.builderOptions))];
                    case 1:
                        response = _h.sent();
                        _e = this.responseTransformer(response), _f = ITEMS_RESULT_PROPERTY_NAME, items = _e[_f], _g = PAGING_METADATA_RESULT_PROPERTY_NAME, pagingMetadata_1 = _e[_g];
                        if (this.pagingMethod === PagingMethods.Offset) {
                            return [2 /*return*/, new OffsetBasedIterator({
                                    items: items,
                                    fetchNextPage: function () { return _this._copyWithNextPage().find(options); },
                                    fetchPrevPage: function () { return _this._copyWithPrevPage().find(options); },
                                    offset: this._pagingOffset,
                                    limit: this._pagingLimit,
                                    totalCount: pagingMetadata_1 === null || pagingMetadata_1 === void 0 ? void 0 : pagingMetadata_1.total,
                                    tooManyToCount: pagingMetadata_1 === null || pagingMetadata_1 === void 0 ? void 0 : pagingMetadata_1.tooManyToCount,
                                    originQuery: this,
                                })];
                        }
                        return [2 /*return*/, new CursorBasedIterator({
                                items: items,
                                limit: this._pagingLimit,
                                originQuery: this,
                                fetchNextPage: function () {
                                    var _a, _b;
                                    return _this._copyWithCursor((_b = (_a = pagingMetadata_1 === null || pagingMetadata_1 === void 0 ? void 0 : pagingMetadata_1.cursors) === null || _a === void 0 ? void 0 : _a.next) !== null && _b !== void 0 ? _b : '').find(options);
                                },
                                fetchPrevPage: function () {
                                    var _a, _b;
                                    return _this._copyWithCursor((_b = (_a = pagingMetadata_1 === null || pagingMetadata_1 === void 0 ? void 0 : pagingMetadata_1.cursors) === null || _a === void 0 ? void 0 : _a.prev) !== null && _b !== void 0 ? _b : '').find(options);
                                },
                                prevCursor: (_b = (_a = pagingMetadata_1 === null || pagingMetadata_1 === void 0 ? void 0 : pagingMetadata_1.cursors) === null || _a === void 0 ? void 0 : _a.prev) !== null && _b !== void 0 ? _b : '',
                                nextCursor: (_d = (_c = pagingMetadata_1 === null || pagingMetadata_1 === void 0 ? void 0 : pagingMetadata_1.cursors) === null || _c === void 0 ? void 0 : _c.next) !== null && _d !== void 0 ? _d : '',
                            })];
                    case 2:
                        error_1 = _h.sent();
                        return [2 /*return*/, this.errorTransformer(error_1)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PlatformizedQueryMethodWrapper.prototype.skipTo = function (cursor) {
        return this._copyWithCursor(cursor);
    };
    PlatformizedQueryMethodWrapper.prototype._copyWithCursor = function (cursor) {
        return new PlatformizedQueryMethodWrapper(__assign(__assign({}, this), { cursor: cursor }));
    };
    PlatformizedQueryMethodWrapper.prototype._buildQuery = function () {
        var _a;
        var queryObject = this.build();
        if (this.pagingMethod === PagingMethods.Cursor) {
            if (((_a = this.builderOptions) === null || _a === void 0 ? void 0 : _a.cursorWithEmptyFilterAndSort) && this.cursor) {
                return {
                    cursorPaging: { cursor: this.cursor, limit: this._pagingLimit },
                };
            }
            return {
                filter: queryObject.filter,
                sort: this.sort,
                cursorPaging: { cursor: this.cursor, limit: this._pagingLimit },
            };
        }
        return {
            filter: queryObject.filter,
            sort: this.sort,
            paging: { limit: this._pagingLimit, offset: this._pagingOffset },
        };
    };
    Object.defineProperty(PlatformizedQueryMethodWrapper.prototype, "_pagingOffset", {
        get: function () {
            return this.paging.offset || 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PlatformizedQueryMethodWrapper.prototype, "_pagingLimit", {
        get: function () {
            return this.paging.limit === undefined ? DEFAULT_LIMIT : this.paging.limit;
        },
        enumerable: false,
        configurable: true
    });
    PlatformizedQueryMethodWrapper.prototype._copyWithOffsetChange = function (amount) {
        var nextPage = {
            offset: this._pagingOffset + amount,
            limit: this._pagingLimit,
        };
        return new PlatformizedQueryMethodWrapper(__assign(__assign({}, this), { paging: nextPage }));
    };
    PlatformizedQueryMethodWrapper.prototype._copyWithNextPage = function () {
        return this._copyWithOffsetChange(this._pagingLimit);
    };
    PlatformizedQueryMethodWrapper.prototype._copyWithPrevPage = function () {
        return this._copyWithOffsetChange(-this._pagingLimit);
    };
    return PlatformizedQueryMethodWrapper;
}(PlatformizedQueryBuilder));
var wrapWithQueryBuilder = function (_a) {
    var func = _a.func, requestTransformer = _a.requestTransformer, responseTransformer = _a.responseTransformer, errorTransformer = _a.errorTransformer, pagingMethod = _a.pagingMethod, transformationPaths = _a.transformationPaths, _b = _a.cursor, cursor = _b === void 0 ? undefined : _b;
    return function (builderOptions) {
        if (builderOptions === void 0) { builderOptions = {}; }
        return new PlatformizedQueryMethodWrapper({
            func: func,
            builderOptions: builderOptions,
            requestTransformer: requestTransformer,
            responseTransformer: responseTransformer,
            errorTransformer: errorTransformer,
            pagingMethod: pagingMethod,
            transformationPaths: transformationPaths,
            cursor: cursor,
        });
    };
};
export { wrapWithQueryBuilder, PlatformizedQueryMethodWrapper };
//# sourceMappingURL=wrapWithQueryBuilder.js.map