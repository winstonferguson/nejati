import { __awaiter, __generator } from "tslib";
var Iterator = /** @class */ (function () {
    function Iterator(_a) {
        var items = _a.items, originQuery = _a.originQuery, fetchNextPage = _a.fetchNextPage, fetchPrevPage = _a.fetchPrevPage, limit = _a.limit;
        this._items = items;
        this._fetchNextPage = fetchNextPage;
        this._fetchPrevPage = fetchPrevPage;
        this._originQuery = originQuery;
        this._limit = limit;
    }
    Object.defineProperty(Iterator.prototype, "items", {
        get: function () {
            return this._items;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Iterator.prototype, "length", {
        get: function () {
            return this._items.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Iterator.prototype, "pageSize", {
        get: function () {
            return this._limit;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Iterator.prototype, "query", {
        get: function () {
            return this._originQuery;
        },
        enumerable: false,
        configurable: true
    });
    Iterator.prototype.next = function () {
        return __awaiter(this, void 0, void 0, function () {
            var nextPageIterator;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.hasNext()) {
                            throw new Error('No next page to fetch');
                        }
                        return [4 /*yield*/, this._fetchNextPage()];
                    case 1:
                        nextPageIterator = _a.sent();
                        return [2 /*return*/, nextPageIterator];
                }
            });
        });
    };
    Iterator.prototype.prev = function () {
        return __awaiter(this, void 0, void 0, function () {
            var previousPageIterator;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.hasPrev()) {
                            throw new Error('No previous page to fetch');
                        }
                        return [4 /*yield*/, this._fetchPrevPage()];
                    case 1:
                        previousPageIterator = _a.sent();
                        return [2 /*return*/, previousPageIterator];
                }
            });
        });
    };
    return Iterator;
}());
export { Iterator };
//# sourceMappingURL=Iterator.js.map