import { PlatformizedQueryBuilder } from './PlatformizedQueryBuilder';
declare class PlatformizedQueryMethodWrapper extends PlatformizedQueryBuilder {
    constructor(obj: any);
    find(options?: {}): Promise<any>;
    skipTo(cursor: any): PlatformizedQueryMethodWrapper;
    _copyWithCursor(cursor: any): PlatformizedQueryMethodWrapper;
    _buildQuery(): {
        cursorPaging: {
            cursor: any;
            limit: any;
        };
        filter?: undefined;
        sort?: undefined;
        paging?: undefined;
    } | {
        filter: any;
        sort: any;
        cursorPaging: {
            cursor: any;
            limit: any;
        };
        paging?: undefined;
    } | {
        filter: any;
        sort: any;
        paging: {
            limit: any;
            offset: any;
        };
        cursorPaging?: undefined;
    };
    get _pagingOffset(): any;
    get _pagingLimit(): any;
    _copyWithOffsetChange(amount: any): PlatformizedQueryMethodWrapper;
    _copyWithNextPage(): PlatformizedQueryMethodWrapper;
    _copyWithPrevPage(): PlatformizedQueryMethodWrapper;
}
interface WrapWithQueryBuilderOptions {
    func: any;
    requestTransformer: any;
    responseTransformer: any;
    errorTransformer: any;
    pagingMethod: any;
    transformationPaths: any;
    cursor?: any;
}
declare const wrapWithQueryBuilder: ({ func, requestTransformer, responseTransformer, errorTransformer, pagingMethod, transformationPaths, cursor, }: WrapWithQueryBuilderOptions) => (builderOptions?: {}) => PlatformizedQueryMethodWrapper;
export { wrapWithQueryBuilder, PlatformizedQueryMethodWrapper };
//# sourceMappingURL=wrapWithQueryBuilder.d.ts.map