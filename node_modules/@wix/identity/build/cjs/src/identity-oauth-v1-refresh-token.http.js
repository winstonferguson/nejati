"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.revokeRefreshToken = exports.deviceVerify = exports.deviceCode = exports.token = exports.authorize = void 0;
const metro_runtime_1 = require("@wix/metro-runtime");
const ambassador_1 = require("@wix/metro-runtime/ambassador");
const metro_runtime_2 = require("@wix/metro-runtime");
const _authorizeRequest = {};
const _deviceCodeRequest = {};
const _deviceCodeResponse = {};
const _deviceVerifyRequest = {};
const _deviceVerifyResponse = {};
const _rawHttpRequest = { body: 'BYTES' };
const _rawHttpResponse = { body: 'BYTES' };
const _revokeRefreshTokenRequest = {};
const _revokeRefreshTokenResponse = {};
function resolveWixIdentityOauth2V1Oauth2NgUrl(opts) {
    const domainToMappings = {
        'manage._base_domain_': [
            {
                srcPath: '/oauth2',
                destPath: '/v1/oauth',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/oauth2',
                destPath: '/v1/oauth',
            },
        ],
        'users._base_domain_': [
            {
                srcPath: '/v1/oauth/device/verify',
                destPath: '/v1/oauth/device/verify',
            },
            {
                srcPath: '/v1/oauth/manage/user-code',
                destPath: '/v1/oauth/manage/user-code',
            },
        ],
        _: [
            {
                srcPath: '/_api/oauth2',
                destPath: '/v1/oauth',
            },
        ],
    };
    return (0, metro_runtime_2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
function authorize(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = (0, ambassador_1.serializer)(_authorizeRequest, {});
    const { fromJSON: fromRes } = (0, ambassador_1.serializer)(_rawHttpResponse, {});
    function __authorize({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.identity.oauth.v1.refresh_token',
            method: 'GET',
            methodFqn: 'wix.identity.oauth2.v1.Oauth2Ng.Authorize',
            url: resolveWixIdentityOauth2V1Oauth2NgUrl({
                protoPath: '/v1/oauth/authorize',
                data: serializedData,
                host,
            }),
            params: (0, metro_runtime_1.toURLSearchParams)(serializedData),
            transformResponse: fromRes,
        };
        return metadata;
    }
    __authorize.fromReq = fromReq;
    return __authorize;
}
exports.authorize = authorize;
/**
 * Token endpoint accepts the TokenRequest message encoded in the raw http request body, and returns either
 * TokenResponse(status code = 200) or TokenErrorResponse (status code = 4XX) encoded in the raw http response body.
 */
function token(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = (0, ambassador_1.serializer)(_rawHttpRequest, {});
    const { fromJSON: fromRes } = (0, ambassador_1.serializer)(_rawHttpResponse, {});
    function __token({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.identity.oauth.v1.refresh_token',
            method: 'POST',
            methodFqn: 'wix.identity.oauth2.v1.Oauth2Ng.Token',
            url: resolveWixIdentityOauth2V1Oauth2NgUrl({
                protoPath: '/v1/oauth/token',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __token.fromReq = fromReq;
    return __token;
}
exports.token = token;
/** this endpoint serves the Device Authorization Flow as described in https://www.rfc-editor.org/rfc/pdfrfc/rfc8628.txt.pdf */
function deviceCode(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = (0, ambassador_1.serializer)(_deviceCodeRequest, {});
    const { fromJSON: fromRes } = (0, ambassador_1.serializer)(_deviceCodeResponse, {});
    function __deviceCode({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.identity.oauth.v1.refresh_token',
            method: 'GET',
            methodFqn: 'wix.identity.oauth2.v1.Oauth2Ng.DeviceCode',
            url: resolveWixIdentityOauth2V1Oauth2NgUrl({
                protoPath: '/v1/oauth/device/code',
                data: serializedData,
                host,
            }),
            params: (0, metro_runtime_1.toURLSearchParams)(serializedData),
            transformResponse: fromRes,
        };
        return metadata;
    }
    __deviceCode.fromReq = fromReq;
    return __deviceCode;
}
exports.deviceCode = deviceCode;
/** this endpoint serves the Device Authorization Flow as described in https://www.rfc-editor.org/rfc/pdfrfc/rfc8628.txt.pdf */
function deviceVerify(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = (0, ambassador_1.serializer)(_deviceVerifyRequest, {});
    const { fromJSON: fromRes } = (0, ambassador_1.serializer)(_deviceVerifyResponse, {});
    function __deviceVerify({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.identity.oauth.v1.refresh_token',
            method: 'GET',
            methodFqn: 'wix.identity.oauth2.v1.Oauth2Ng.DeviceVerify',
            url: resolveWixIdentityOauth2V1Oauth2NgUrl({
                protoPath: '/v1/oauth/device/verify',
                data: serializedData,
                host,
            }),
            params: (0, metro_runtime_1.toURLSearchParams)(serializedData),
            transformResponse: fromRes,
        };
        return metadata;
    }
    __deviceVerify.fromReq = fromReq;
    return __deviceVerify;
}
exports.deviceVerify = deviceVerify;
/** Revoke a refresh token created by this service. */
function revokeRefreshToken(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = (0, ambassador_1.serializer)(_revokeRefreshTokenRequest, {});
    const { fromJSON: fromRes } = (0, ambassador_1.serializer)(_revokeRefreshTokenResponse, {});
    function __revokeRefreshToken({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.identity.oauth.v1.refresh_token',
            method: 'POST',
            methodFqn: 'wix.identity.oauth2.v1.Oauth2Ng.RevokeRefreshToken',
            url: resolveWixIdentityOauth2V1Oauth2NgUrl({
                protoPath: '/v1/oauth/revoke',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __revokeRefreshToken.fromReq = fromReq;
    return __revokeRefreshToken;
}
exports.revokeRefreshToken = revokeRefreshToken;
//# sourceMappingURL=identity-oauth-v1-refresh-token.http.js.map