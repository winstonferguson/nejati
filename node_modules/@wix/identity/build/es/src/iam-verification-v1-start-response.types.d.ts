export interface StartResponse {
    /** the identifier of the verification process */
    verificationId?: string;
}
export interface StartRequest {
    /**
     * an identity_Id.
     * If not provided - currently, an exception is thrown. In the future the identity from identity response will be taken.
     */
    identityId?: string | null;
    /** the delivery target */
    target?: Target;
}
export declare enum Target {
    UNKNOWN_TARGET = "UNKNOWN_TARGET",
    EMAIL = "EMAIL"
}
export interface VerifyRequest {
    /** the code to verify */
    code?: string;
    /** the identifier of the verification process */
    verificationId?: string;
}
export interface VerifyResponse {
}
export interface VerifyDuringAuthenticationRequest {
    /** The code to verify. */
    code: string;
    /** A state token representing the `REQUIRE_EMAIL_VERIFICATION` state. */
    stateToken: string;
}
export interface StateMachineResponse {
    /** The current state of the login or registration process. */
    state?: StateType;
    /** If state is `SUCCESS`, a session token. */
    sessionToken?: string | null;
    /** A token representing the current state of the login or registration process. */
    stateToken?: string | null;
    /** Identing of the current member. */
    identity?: Identity;
    /** additional_data = 5; //TBD */
    additionalData?: Record<string, CommonCustomValue>;
}
export declare enum StateType {
    UNKNOWN_STATE = "UNKNOWN_STATE",
    SUCCESS = "SUCCESS",
    REQUIRE_OWNER_APPROVAL = "REQUIRE_OWNER_APPROVAL",
    REQUIRE_EMAIL_VERIFICATION = "REQUIRE_EMAIL_VERIFICATION",
    STATUS_CHECK = "STATUS_CHECK"
}
export interface Identity {
    /** Identity ID */
    id?: string | null;
    /** Identifiers */
    identifiers?: Identifier[];
    /**
     * Represents the current state of an item. Each time the item is modified, its `revision` changes.
     * For an update operation to succeed, you MUST pass the latest revision.
     */
    revision?: string | null;
    /**
     * The time this identity was created.
     * @readonly
     */
    createdDate?: Date;
    /**
     * The time this identity was last updated.
     * @readonly
     */
    updatedDate?: Date;
    /** The identity configured connections to authenticate with. */
    connections?: Connection[];
    /** Identity profile. */
    identityProfile?: IdentityProfile;
    /**
     * Additional information about the identity that can impact user access.
     * This data cannot be set.
     */
    metadata?: Metadata;
    /** Identity email address. */
    email?: Email;
    /** Identity's current status. */
    status?: StatusV2;
}
export interface Identifier extends IdentifierValueOneOf {
    email?: string;
    userName?: string;
}
/** @oneof */
export interface IdentifierValueOneOf {
    email?: string;
    userName?: string;
}
export interface Connection extends ConnectionTypeOneOf {
    /** IDP connection. */
    idpConnection?: IdpConnection;
    /** Authenticator connection. */
    authenticatorConnection?: AuthenticatorConnection;
}
/** @oneof */
export interface ConnectionTypeOneOf {
    /** IDP connection. */
    idpConnection?: IdpConnection;
    /** Authenticator connection. */
    authenticatorConnection?: AuthenticatorConnection;
}
export interface IdpConnection {
    /** IDP connection ID. */
    idpConnectionId?: string;
    /** IDP user ID. */
    idpUserId?: string;
}
export interface AuthenticatorConnection {
    /** Authenticator connection ID. */
    authenticatorConnectionId?: string;
    /** Whether re-enrollment is required. */
    reEnrollmentRequired?: boolean;
}
export interface IdentityProfile {
    /** Profile first name. */
    firstName?: string | null;
    /** Profile last name. */
    lastName?: string | null;
    /** Profile nickname. */
    nickname?: string | null;
    /** Profile picture URL. */
    picture?: string | null;
    /** Deprecated. Use `secondaryEmails` instead. */
    emails?: string[];
    /** Deprecated. Use `phonesV2` instead. */
    phones?: string[];
    /** List of profile labels. */
    labels?: string[];
    /** Profile language. */
    language?: string | null;
    /** Profile privacy status. */
    privacyStatus?: PrivacyStatus;
    /**
     * Any number of custom fields. [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)
     * are used to store additional information about your site or app's contacts.
     */
    customFields?: CustomField[];
    /** List of profile email addresses. */
    secondaryEmails?: SecondaryEmail[];
    /** List of profile phone numbers. */
    phonesV2?: Phone[];
    /** List of profile physical addresses. */
    addresses?: AddressWrapper[];
    /** Company name. */
    company?: string | null;
    /** Position within company. */
    position?: string | null;
    /** Profile birthdate. */
    birthdate?: string | null;
}
export declare enum PrivacyStatus {
    UNDEFINED = "UNDEFINED",
    PUBLIC = "PUBLIC",
    PRIVATE = "PRIVATE"
}
export interface CustomField {
    /**
     * Custom field name. The name must match one of the key properties of the objects returned by
     * [`List Extended Fields`](https://dev.wix.com/docs/rest/api-reference/contacts/extended-fields/list-extended-fields)
     * with the `custom.` prefix removed.
     */
    name?: string;
    /** Custom field value. */
    value?: CustomValue;
}
export interface CustomValue extends CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date;
    /** List value. */
    listValue?: ListValue;
    /** Map value. */
    mapValue?: MapValue;
}
/** @oneof */
export interface CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date;
    /** List value. */
    listValue?: ListValue;
    /** Map value. */
    mapValue?: MapValue;
}
export interface ListValue {
    /** Custom value. */
    value?: CustomValue[];
}
export interface MapValue {
    /** Mapped custom value. */
    value?: Record<string, CustomValue>;
}
export interface SecondaryEmail {
    /** Email address. */
    email?: string;
    /** Email tag. */
    tag?: EmailTag;
}
export declare enum EmailTag {
    UNTAGGED = "UNTAGGED",
    MAIN = "MAIN",
    HOME = "HOME",
    WORK = "WORK"
}
export interface Phone {
    /** Phone country code. */
    countryCode?: string | null;
    /** Phone number. */
    phone?: string;
    /** Phone tag. */
    tag?: PhoneTag;
}
export declare enum PhoneTag {
    UNTAGGED = "UNTAGGED",
    MAIN = "MAIN",
    HOME = "HOME",
    MOBILE = "MOBILE",
    WORK = "WORK",
    FAX = "FAX"
}
export interface AddressWrapper {
    /** Address. */
    address?: Address;
    /** Address tag. */
    tag?: AddressTag;
}
/** Physical address */
export interface Address {
    /** Country code. */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** Main address line, usually street and number as free text. */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains Apt, Suite, and Floor. */
    addressLine2?: string | null;
}
export declare enum AddressTag {
    UNTAGGED = "UNTAGGED",
    HOME = "HOME",
    WORK = "WORK",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
export interface Metadata {
    /**
     * represents general tags such as "isOwner", "isContributor"
     * @readonly
     */
    tags?: string[];
}
export interface Email {
    address?: string;
    isVerified?: boolean;
}
export interface StatusV2 {
    name?: StatusName;
    reasons?: Reason[];
}
export declare enum StatusName {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    PENDING = "PENDING",
    ACTIVE = "ACTIVE",
    DELETED = "DELETED",
    BLOCKED = "BLOCKED"
}
export declare enum Reason {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    PENDING_ADMIN_APPROVAL_REQUIRED = "PENDING_ADMIN_APPROVAL_REQUIRED",
    PENDING_EMAIL_VERIFICATION_REQUIRED = "PENDING_EMAIL_VERIFICATION_REQUIRED"
}
export interface CommonCustomValue extends CommonCustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date;
    /** List value. */
    listValue?: CommonListValue;
    /** Map value. */
    mapValue?: CommonMapValue;
}
/** @oneof */
export interface CommonCustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date;
    /** List value. */
    listValue?: CommonListValue;
    /** Map value. */
    mapValue?: CommonMapValue;
}
export interface CommonListValue {
    /** Custom value. */
    value?: CommonCustomValue[];
}
export interface CommonMapValue {
    /** Mapped custom value. */
    value?: Record<string, CommonCustomValue>;
}
export interface StartResponseNonNullableFields {
    verificationId: string;
}
export interface StateMachineResponseNonNullableFields {
    state: StateType;
    identity?: {
        identifiers: {
            email: string;
            userName: string;
        }[];
        connections: {
            idpConnection?: {
                idpConnectionId: string;
                idpUserId: string;
            };
            authenticatorConnection?: {
                authenticatorConnectionId: string;
                reEnrollmentRequired: boolean;
            };
        }[];
        identityProfile?: {
            emails: string[];
            phones: string[];
            labels: string[];
            privacyStatus: PrivacyStatus;
            customFields: {
                name: string;
                value?: {
                    strValue: string;
                    numValue: number;
                    listValue?: {
                        value: NonNullable<NonNullable<NonNullable<NonNullable<StateMachineResponseNonNullableFields>['identity']>['identityProfile']>['customFields'][0]>['value'][];
                    };
                };
            }[];
            secondaryEmails: {
                email: string;
                tag: EmailTag;
            }[];
            phonesV2: {
                phone: string;
                tag: PhoneTag;
            }[];
            addresses: {
                tag: AddressTag;
            }[];
        };
        metadata?: {
            tags: string[];
        };
        email?: {
            address: string;
            isVerified: boolean;
        };
        status?: {
            name: StatusName;
            reasons: Reason[];
        };
    };
    additionalData?: {
        strValue: string;
        numValue: number;
        listValue?: {
            value: NonNullable<StateMachineResponseNonNullableFields>['additionalData'][];
        };
    };
}
