export interface RefreshToken {
    token?: string;
}
/**
 * AuthorizeRequest is sent by the client to the authorization server to initiate
 * the authorization process.
 */
export interface AuthorizeRequest {
    /** ID of the Wix OAuth app requesting authorization. */
    clientId?: string;
    /**
     * Desired authorization [grant type](https://auth0.com/docs/authenticate/protocols/oauth#grant-types).
     *
     * Supported values:
     * + `code`: The endpoint returns an authorization code that can be used to obtain an access token.
     */
    responseType?: string;
    /** URI to redirect the browser to after authentication and authorization. The browser is redirected to this URI whether the authentication and authorization process is successful or not. */
    redirectUri?: string | null;
    /**
     * Desired scope of access. If this field is left empty, only an access token is granted.
     * To received a refresh token, pass `offline_access` as the value of this field.
     */
    scope?: string | null;
    /**
     * A value used to confirm the state of an application before and after it makes an authorization
     * request. If a value for this field is set in the request, it's added to the `redirectUri` when the browser
     * is redirected there.
     * Learn more about [using the state parameter](https://auth0.com/docs/secure/attack-protection/state-parameters).
     */
    state?: string;
    /**
     * esired response format.
     *
     * Supported values:
     * + `query`: The response parameters are encoded as query string parameters and added to the `redirectUri` when redirecting.
     * + `fragment`: The response parameters are encoded as URI fragment parameters and added to the `redirectUri` when redirecting.
     * + `web_message`: The response parameters are encoded as a JSON object and added to the body of a [web message response](https://datatracker.ietf.org/doc/html/draft-sakimura-oauth-wmrm-00).
     *
     * Default value: `query`
     */
    responseMode?: string | null;
    /**
     * Code challenge to use for PKCE verification.
     * This field is only used if `responseType` is set to `code`.
     */
    codeChallenge?: string | null;
    /**
     * Code challenge method to use for PKCE verification.
     * This field is only used if `responseType` is set to `code`.
     *
     * Supported values:
     * + `S256`: The code challenge is transformed using SHA-256 encyption.
     * + `S512`: The code challenge is transformed using SHA-512 encyption.
     */
    codeChallengeMethod?: string | null;
    /** Session token of the site visitor to authorize. */
    sessionToken?: string | null;
}
export interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
export interface HeadersEntry {
    key?: string;
    value?: string;
}
export interface RawHttpRequest {
    body?: Uint8Array;
    pathParams?: PathParametersEntry[];
    queryParams?: QueryParametersEntry[];
    headers?: HeadersEntry[];
    method?: string;
    rawPath?: string;
    rawQuery?: string;
}
export interface PathParametersEntry {
    key?: string;
    value?: string;
}
export interface QueryParametersEntry {
    key?: string;
    value?: string;
}
export interface DeviceCodeRequest {
    /** The ID of the application that asks for authorization. */
    clientId?: string;
    /**
     * scope is a space-delimited string that specifies the requested scope of the
     * access request.
     */
    scope?: string | null;
}
export interface DeviceCodeResponse {
    /** is the unique code for the device. When the user goes to the verification_uri in their browser-based device, this code will be bound to their session. */
    deviceCode?: string;
    /** contains the code that should be input at the verification_uri to authorize the device. */
    userCode?: string;
    /** contains the URL the user should visit to authorize the device. */
    verificationUri?: string;
    /** indicates the lifetime (in seconds) of the device_code and user_code. */
    expiresIn?: number;
    /** indicates the interval (in seconds) at which the app should poll the token URL to request a token. clients MUST use 5 as the default */
    interval?: number | null;
}
export interface DeviceVerifyRequest {
    /** User code representing a currently authorizing device. */
    userCode?: string;
}
export interface DeviceVerifyResponse {
}
export interface InvalidateUserCodeRequest {
    /** user code to invalidate. Only the authorizing identity is able to invalidate it. */
    userCode?: string;
}
export interface InvalidateUserCodeResponse {
}
export interface RevokeRefreshTokenRequest {
    /** The refresh token itself. Anyone with the token itself is able to revoke it. */
    token?: string;
}
export interface RevokeRefreshTokenResponse {
}
export interface Empty {
}
export interface RawHttpResponseNonNullableFields {
    body: Uint8Array;
    headers: {
        key: string;
        value: string;
    }[];
}
export interface DeviceCodeResponseNonNullableFields {
    deviceCode: string;
    userCode: string;
    verificationUri: string;
    expiresIn: number;
}
