export interface Folder {
    /** Folder ID. Generated when a folder is created in the Media Manager. */
    id?: string;
    /** Folder name as it appears in the Media Manager. */
    displayName?: string;
    /** ID of the folder's parent folder. <br /> Default: `media-root` folder. */
    parentFolderId?: string;
    /**
     * Date the folder was created.
     * @readonly
     */
    createdDate?: Date;
    /**
     * Date the folder was updated.
     * @readonly
     */
    updatedDate?: Date;
    /**
     * State of the folder.
     * @readonly
     */
    state?: State;
}
export declare enum State {
    OK = "OK",
    DELETED = "DELETED"
}
export interface CreateFolderRequest {
    /** Folder name that appears in the Media Manager. */
    displayName: string;
    /** ID of the folder's parent folder. */
    parentFolderId?: string | null;
}
export interface CreateFolderResponse {
    /** Information about the newly created folder. */
    folder?: Folder;
}
export interface GetFolderRequest {
    /** Folder ID. */
    folderId: string;
}
export interface GetFolderResponse {
    /** Information about the folder. */
    folder?: Folder;
}
export interface ListFoldersRequest {
    /**
     * ID of the folder's parent folder.
     * <br /> Default: `media-root` folder.
     */
    parentFolderId?: string | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface CursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface ListFoldersResponse {
    /** Information about the folders in the requested folder. */
    folders?: Folder[];
    /** The next cursor if it exists. */
    nextCursor?: PagingMetadataV2;
}
export interface PagingMetadataV2 {
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
export interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
}
export interface SearchFoldersRequest {
    /**
     * A root folder in the media manager to search in. <br />
     * Default: `MEDIA_ROOT`.
     */
    rootFolder?: RootFolder;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
    /**
     * Term to search for, such as the value of a folder's `displayName`. <br />
     * For example, if a folder's `displayName` is 'my-videos-folder', the search term is 'my-videos-folder'.
     */
    search?: string | null;
}
export declare enum RootFolder {
    /** Root of all site media */
    MEDIA_ROOT = "MEDIA_ROOT",
    /** Root of the trash system folder */
    TRASH_ROOT = "TRASH_ROOT",
    /** Root of all visitor uploads */
    VISITOR_UPLOADS_ROOT = "VISITOR_UPLOADS_ROOT"
}
export interface SearchFoldersResponse {
    /** Information about the folders in the requested folder. */
    folders?: Folder[];
    /** The next cursor if it exists. */
    nextCursor?: PagingMetadataV2;
}
export interface UpdateFolderRequest {
    /** The folder to update. */
    folder: Folder;
}
export interface UpdateFolderResponse {
    /** Information about the updated folder. */
    folder?: Folder;
}
export interface GenerateFolderDownloadUrlRequest {
    /** Folder ID. */
    folderId: string;
}
export interface GenerateFolderDownloadUrlResponse {
    /** URL for downloading a specific folder in the Media Manager. */
    downloadUrl?: string;
}
export interface BulkDeleteFoldersRequest {
    /** IDs of the folders to move to the Media Manager's trash bin. */
    folderIds: string[];
    /**
     * Whether the specified folders are permanently deleted. <br />
     * Default: `false`
     */
    permanent?: boolean;
}
export interface BulkDeleteFoldersResponse {
}
export interface BulkRestoreFoldersFromTrashBinRequest {
    /** IDs of the folders to restore from the Media Manager's trash bin. */
    folderIds: string[];
}
export interface BulkRestoreFoldersFromTrashBinResponse {
}
export interface ListDeletedFoldersRequest {
    /** ID of the folder's parent folder. */
    parentFolderId?: string | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
export interface ListDeletedFoldersResponse {
    /** List of folders in the Media Manager's trash bin. */
    folders?: Folder[];
    /** The next cursor if it exists. */
    nextCursor?: PagingMetadataV2;
}
export interface CreateFolderResponseNonNullableFields {
    folder?: {
        id: string;
        displayName: string;
        parentFolderId: string;
        state: State;
    };
}
export interface GetFolderResponseNonNullableFields {
    folder?: {
        id: string;
        displayName: string;
        parentFolderId: string;
        state: State;
    };
}
export interface ListFoldersResponseNonNullableFields {
    folders: {
        id: string;
        displayName: string;
        parentFolderId: string;
        state: State;
    }[];
}
export interface SearchFoldersResponseNonNullableFields {
    folders: {
        id: string;
        displayName: string;
        parentFolderId: string;
        state: State;
    }[];
}
export interface UpdateFolderResponseNonNullableFields {
    folder?: {
        id: string;
        displayName: string;
        parentFolderId: string;
        state: State;
    };
}
export interface GenerateFolderDownloadUrlResponseNonNullableFields {
    downloadUrl: string;
}
export interface ListDeletedFoldersResponseNonNullableFields {
    folders: {
        id: string;
        displayName: string;
        parentFolderId: string;
        state: State;
    }[];
}
