export declare const __debug: {
    verboseLogging: {
        on: () => boolean;
        off: () => boolean;
    };
};
export interface Folder {
    /** Folder ID. Generated when a folder is created in the Media Manager. */
    _id?: string;
    /** Folder name as it appears in the Media Manager. */
    displayName?: string;
    /** ID of the folder's parent folder. <br /> Default: `media-root` folder. */
    parentFolderId?: string;
    /**
     * Date the folder was created.
     * @readonly
     */
    _createdDate?: Date;
    /**
     * Date the folder was updated.
     * @readonly
     */
    _updatedDate?: Date;
    /**
     * State of the folder.
     *
     * Supported values: `"OK"`, `"DELETED"`.
     * @readonly
     */
    state?: State;
}
export declare enum State {
    OK = "OK",
    DELETED = "DELETED"
}
export interface CreateFolderRequest {
    /** Folder name that appears in the Media Manager. */
    displayName: string;
    /** ID of the folder's parent folder. */
    parentFolderId?: string | null;
}
export interface CreateFolderResponse {
    /** Information about the newly created folder. */
    folder?: Folder;
}
export interface GetFolderRequest {
    /** Folder ID. */
    folderId: string;
}
export interface GetFolderResponse {
    /** Information about the folder. */
    folder?: Folder;
}
export interface ListFoldersRequest {
    /**
     * ID of the folder's parent folder.
     * <br /> Default: `media-root` folder.
     */
    parentFolderId?: string | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /**
     * Sort order.
     *
     * Supported values: `"ASC"`, `"DESC"`
     */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface CursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface ListFoldersResponse {
    /** Information about the folders in the requested folder. */
    folders?: Folder[];
    /** The next cursor if it exists. */
    nextCursor?: PagingMetadataV2;
}
export interface PagingMetadataV2 {
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
export interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
}
export interface SearchFoldersRequest {
    /**
     * A root folder in the media manager to search in. <br />
     * Default: `MEDIA_ROOT`.
     */
    rootFolder?: RootFolder;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
    /**
     * Term to search for, such as the value of a folder's `displayName`. <br />
     * For example, if a folder's `displayName` is 'my-videos-folder', the search term is 'my-videos-folder'.
     */
    search?: string | null;
}
export declare enum RootFolder {
    /** Root of all site media */
    MEDIA_ROOT = "MEDIA_ROOT",
    /** Root of the trash system folder */
    TRASH_ROOT = "TRASH_ROOT",
    /** Root of all visitor uploads */
    VISITOR_UPLOADS_ROOT = "VISITOR_UPLOADS_ROOT"
}
export interface SearchFoldersResponse {
    /** Information about the folders in the requested folder. */
    folders?: Folder[];
    /** The next cursor if it exists. */
    nextCursor?: PagingMetadataV2;
}
export interface UpdateFolderRequest {
    /** The folder to update. */
    folder: Folder;
}
export interface UpdateFolderResponse {
    /** Information about the updated folder. */
    folder?: Folder;
}
export interface GenerateFolderDownloadUrlRequest {
    /** Folder ID. */
    folderId: string;
}
export interface GenerateFolderDownloadUrlResponse {
    /** URL for downloading a specific folder in the Media Manager. */
    downloadUrl?: string;
}
export interface BulkDeleteFoldersRequest {
    /** IDs of the folders to move to the Media Manager's trash bin. */
    folderIds: string[];
    /**
     * Whether the specified folders are permanently deleted. <br />
     * Default: `false`
     */
    permanent?: boolean;
}
export interface BulkDeleteFoldersResponse {
}
export interface BulkRestoreFoldersFromTrashBinRequest {
    /** IDs of the folders to restore from the Media Manager's trash bin. */
    folderIds: string[];
}
export interface BulkRestoreFoldersFromTrashBinResponse {
}
export interface ListDeletedFoldersRequest {
    /** ID of the folder's parent folder. */
    parentFolderId?: string | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
export interface ListDeletedFoldersResponse {
    /** List of folders in the Media Manager's trash bin. */
    folders?: Folder[];
    /** The next cursor if it exists. */
    nextCursor?: PagingMetadataV2;
}
export interface CreateFolderResponseNonNullableFields {
    folder?: {
        _id: string;
        displayName: string;
        parentFolderId: string;
        state: State;
    };
}
export interface GetFolderResponseNonNullableFields {
    folder?: {
        _id: string;
        displayName: string;
        parentFolderId: string;
        state: State;
    };
}
export interface ListFoldersResponseNonNullableFields {
    folders: {
        _id: string;
        displayName: string;
        parentFolderId: string;
        state: State;
    }[];
}
export interface SearchFoldersResponseNonNullableFields {
    folders: {
        _id: string;
        displayName: string;
        parentFolderId: string;
        state: State;
    }[];
}
export interface UpdateFolderResponseNonNullableFields {
    folder?: {
        _id: string;
        displayName: string;
        parentFolderId: string;
        state: State;
    };
}
export interface GenerateFolderDownloadUrlResponseNonNullableFields {
    downloadUrl: string;
}
export interface ListDeletedFoldersResponseNonNullableFields {
    folders: {
        _id: string;
        displayName: string;
        parentFolderId: string;
        state: State;
    }[];
}
/**
 * Creates a new folder in the Media Manager.
 *
 * Use the `parentFolderId` parameter to specify in which existing folder you want the new folder to be created.
 * If no folder is specified, the new folder is created in the `media-root` folder.
 * @param displayName - Folder name that appears in the Media Manager.
 * @public
 * @requiredField displayName
 * @param options - Options for specifying where to create a folder.
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
export declare function createFolder(displayName: string, options?: CreateFolderOptions): Promise<CreateFolderResponse & CreateFolderResponseNonNullableFields>;
export interface CreateFolderOptions {
    /** ID of the folder's parent folder. */
    parentFolderId?: string | null;
}
/**
 * Gets information from a specific folder in the Media Manager.
 * @param folderId - Folder ID.
 * @public
 * @requiredField folderId
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 * @returns Information about the folder.
 */
export declare function getFolder(folderId: string): Promise<Folder & NonNullable<GetFolderResponseNonNullableFields>['folder']>;
/**
 * Retrieves a list of folders in the Media Manager.
 *
 * To retrieve a list of folders within a specific folder in the Media Manager, pass the specific folder's ID in the `parentFolderId` parameter. If no folder is specified, the endpoint retrieves a list of folders within the root folder of the Media Manager.
 * @public
 * @param options - Options to use when listing folders from the Media Manager.
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 */
export declare function listFolders(options?: ListFoldersOptions): Promise<ListFoldersResponse & ListFoldersResponseNonNullableFields>;
export interface ListFoldersOptions {
    /**
     * ID of the folder's parent folder.
     * <br /> Default: `media-root` folder.
     */
    parentFolderId?: string | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
/**
 * Searches the Media Manager and returns a list of folders that match the terms specified in the parameters.
 *
 * If no parameters are specified, the endpoint returns all folders in the `MEDIA_ROOT` folder.
 * @public
 * @param options - Options specifying which folders to search.
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 */
export declare function searchFolders(options?: SearchFoldersOptions): Promise<SearchFoldersResponse & SearchFoldersResponseNonNullableFields>;
export interface SearchFoldersOptions {
    /**
     * A root folder in the media manager to search in. <br />
     * Default: `MEDIA_ROOT`.
     */
    rootFolder?: RootFolder;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
    /**
     * Term to search for, such as the value of a folder's `displayName`.
     *
     * For example, if a folder's `displayName` is 'my-videos-folder', the search term is `'my-videos-folder'`.
     */
    search?: string | null;
}
/**
 * Updates a folder.
 *
 * You can use the `parentFolderId` parameter to move a folder from its current parent folder to a different parent folder.
 * @param _id - Folder ID. Generated when a folder is created in the Media Manager.
 * @public
 * @requiredField _id
 * @requiredField folder
 * @param options - @internal
 * @param folder - Folder to update.
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 * @returns Information about the updated folder.
 */
export declare function updateFolder(_id: string, folder: UpdateFolder): Promise<Folder & NonNullable<UpdateFolderResponseNonNullableFields>['folder']>;
export interface UpdateFolder {
    /** Folder ID. Generated when a folder is created in the Media Manager. */
    _id?: string;
    /** Folder name as it appears in the Media Manager. */
    displayName?: string;
    /** ID of the folder's parent folder. <br /> Default: `media-root` folder. */
    parentFolderId?: string;
    /**
     * Date the folder was created.
     * @readonly
     */
    _createdDate?: Date;
    /**
     * Date the folder was updated.
     * @readonly
     */
    _updatedDate?: Date;
    /**
     * State of the folder.
     *
     * Supported values: `"OK"`, `"DELETED"`.
     * @readonly
     */
    state?: State;
}
/**
 * Generates a URL for downloading a compressed file containing a specific folder in the Media Manager.
 *
 * The compressed file can contain sub-folders, and up to 1000 files.
 * @param folderId - Folder ID.
 * @public
 * @requiredField folderId
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
export declare function generateFolderDownloadUrl(folderId: string): Promise<GenerateFolderDownloadUrlResponse & GenerateFolderDownloadUrlResponseNonNullableFields>;
/**
 * Temporarily deletes the specified folders from the Media Manager.
 *
 * The deleted folders are moved to the Media Manager's `trash-root` folder (trash bin) unless permanently deleted. To permanently delete folders, pass the `permanent` parameter with the value `true`. Permanently deleting folders isn't reversible, so make sure that the files in these folders aren't being used in a site or in any other way as the files will no longer be accessible.
 *
 * >**Notes:**
 * > - When a folder is deleted, the files in that folder are deleted.
 * > - The specified folders can be from different parent folders.
 * > - Moving multiple folders at once is an asynchronous action, and may take time for the changes to appear in the Media Manager.
 * > - Attempting to delete folders that are already in the trash bin doesn't result in an error.
 * > - If your site contains files from a deleted media folder, the files still appear on your site as the deleted folder is still in the Media Manager (in the trash bin).
 * > - You can use the [Bulk Restore Folders From Trash Bin](#bulkrestorefoldersfromtrashbin) endpoint to restore folders from the Media Manager's trash bin.
 * @param folderIds - IDs of the folders to move to the Media Manager's trash bin.
 * @public
 * @requiredField folderIds
 * @param options - Options to use when deleting folders.
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
export declare function bulkDeleteFolders(folderIds: string[], options?: BulkDeleteFoldersOptions): Promise<void>;
export interface BulkDeleteFoldersOptions {
    /**
     * Whether the specified folders are permanently deleted. <br />
     * Default: `false`
     */
    permanent?: boolean;
}
/**
 * Restores the specified folders from the Media Manager's trash bin, and moves them to their original locations in the Media Manager.
 * @param folderIds - IDs of the folders to restore from the Media Manager's trash bin.
 * @public
 * @requiredField folderIds
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
export declare function bulkRestoreFoldersFromTrashBin(folderIds: string[]): Promise<void>;
/**
 * Retrieves a list of deleted folders from the trash bin.
 * @public
 * @param options - Options to use when listing deleted folders from the trash bin.
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 */
export declare function listDeletedFolders(options?: ListDeletedFoldersOptions): Promise<ListDeletedFoldersResponse & ListDeletedFoldersResponseNonNullableFields>;
export interface ListDeletedFoldersOptions {
    /** ID of the folder's parent folder. */
    parentFolderId?: string | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
