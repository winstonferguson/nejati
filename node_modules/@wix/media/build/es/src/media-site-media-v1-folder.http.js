import { toURLSearchParams } from '@wix/metro-runtime';
import { serializer } from '@wix/metro-runtime/ambassador';
import { resolveUrl } from '@wix/metro-runtime';
const _bulkDeleteFoldersRequest = {};
const _bulkDeleteFoldersResponse = {};
const _bulkRestoreFoldersFromTrashBinRequest = {};
const _bulkRestoreFoldersFromTrashBinResponse = {};
const _createFolderRequest = {};
const _createFolderResponse = { folder: '_folder' };
const _folder = {
    createdDate: 'google.protobuf.Timestamp',
    updatedDate: 'google.protobuf.Timestamp',
};
const _generateFolderDownloadUrlRequest = {};
const _generateFolderDownloadUrlResponse = {};
const _getFolderRequest = {};
const _getFolderResponse = { folder: '_folder' };
const _listDeletedFoldersRequest = {};
const _listDeletedFoldersResponse = { folders: '_folder' };
const _listFoldersRequest = {};
const _listFoldersResponse = { folders: '_folder' };
const _searchFoldersRequest = {};
const _searchFoldersResponse = { folders: '_folder' };
const _updateFolderRequest = {
    fieldMask: 'google.protobuf.FieldMask',
    folder: '_folder',
};
const _updateFolderResponse = { folder: '_folder' };
function resolveComWixMediaSiteMediaV1FoldersServiceUrl(opts) {
    const domainToMappings = {
        'apps._base_domain_': [
            {
                srcPath: '/_api/wix-privatemedia-proxy-server',
                destPath: '/api',
            },
            {
                srcPath: '/_api/wix-privatemedia-proxy-server/v1',
                destPath: '/v1',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/_api/wix-privatemedia-proxy-server',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/site-media/v1',
                destPath: '/v1',
            },
        ],
    };
    return resolveUrl(Object.assign(opts, { domainToMappings }));
}
/**
 * Creates a new folder in the Media Manager.
 *
 * Use the `parentFolderId` parameter to specify in which existing folder you want the new folder to be created.
 * If no folder is specified, the new folder is created in the `media-root` folder.
 */
export function createFolder(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_createFolderRequest, {});
    const { fromJSON: fromRes } = serializer(_createFolderResponse, { _folder });
    function __createFolder({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.folder',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FoldersService.CreateFolder',
            url: resolveComWixMediaSiteMediaV1FoldersServiceUrl({
                protoPath: '/v1/folders',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __createFolder.fromReq = fromReq;
    return __createFolder;
}
/** Gets information from a specific folder in the Media Manager. */
export function getFolder(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_getFolderRequest, {});
    const { fromJSON: fromRes } = serializer(_getFolderResponse, { _folder });
    function __getFolder({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.folder',
            method: 'GET',
            methodFqn: 'com.wix.media.site_media.v1.FoldersService.GetFolder',
            url: resolveComWixMediaSiteMediaV1FoldersServiceUrl({
                protoPath: '/v1/folders/{folderId}',
                data: serializedData,
                host,
            }),
            params: toURLSearchParams(serializedData),
            transformResponse: fromRes,
        };
        return metadata;
    }
    __getFolder.fromReq = fromReq;
    return __getFolder;
}
/**
 * Retrieves a list of folders in the Media Manager.
 *
 * To retrieve a list of folders within a specific folder in the Media Manager, pass the specific folder's ID in the `parentFolderId` parameter. If no folder is specified, the endpoint retrieves a list of folders within the root folder of the Media Manager.
 */
export function listFolders(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_listFoldersRequest, {});
    const { fromJSON: fromRes } = serializer(_listFoldersResponse, { _folder });
    function __listFolders({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.folder',
            method: 'GET',
            methodFqn: 'com.wix.media.site_media.v1.FoldersService.ListFolders',
            url: resolveComWixMediaSiteMediaV1FoldersServiceUrl({
                protoPath: '/v1/folders',
                data: serializedData,
                host,
            }),
            params: toURLSearchParams(serializedData),
            transformResponse: fromRes,
        };
        return metadata;
    }
    __listFolders.fromReq = fromReq;
    return __listFolders;
}
/**
 * Searches the Media Manager and returns a list of folders that match the terms specified in the parameters.
 *
 * If no parameters are specified, the endpoint returns all folders in the `MEDIA_ROOT` folder.
 */
export function searchFolders(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_searchFoldersRequest, {});
    const { fromJSON: fromRes } = serializer(_searchFoldersResponse, { _folder });
    function __searchFolders({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.folder',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FoldersService.SearchFolders',
            url: resolveComWixMediaSiteMediaV1FoldersServiceUrl({
                protoPath: '/v1/folders/search',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __searchFolders.fromReq = fromReq;
    return __searchFolders;
}
/**
 * Updates a folder.
 *
 * You can use the `parentFolderId` parameter to move a folder from its current parent folder to a different parent folder.
 */
export function updateFolder(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_updateFolderRequest, { _folder });
    const { fromJSON: fromRes } = serializer(_updateFolderResponse, { _folder });
    function __updateFolder({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.folder',
            method: 'PATCH',
            methodFqn: 'com.wix.media.site_media.v1.FoldersService.UpdateFolder',
            url: resolveComWixMediaSiteMediaV1FoldersServiceUrl({
                protoPath: '/v1/folders/{folder.id}',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __updateFolder.fromReq = fromReq;
    return __updateFolder;
}
/**
 * Generates a URL for downloading a compressed file containing a specific folder in the Media Manager.
 *
 * The compressed file can contain sub-folders, and up to 1000 files.
 */
export function generateFolderDownloadUrl(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_generateFolderDownloadUrlRequest, {});
    const { fromJSON: fromRes } = serializer(_generateFolderDownloadUrlResponse, {});
    function __generateFolderDownloadUrl({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.folder',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FoldersService.GenerateFolderDownloadUrl',
            url: resolveComWixMediaSiteMediaV1FoldersServiceUrl({
                protoPath: '/v1/folders/{folderId}/generate-download-url',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __generateFolderDownloadUrl.fromReq = fromReq;
    return __generateFolderDownloadUrl;
}
/**
 * Temporarily deletes the specified folders from the Media Manager.
 *
 * The deleted folders are moved to the Media Manager's `trash-root` folder (trash bin) unless permanently deleted. To permanently delete folders, pass the `permanent` parameter with the value `true`. Permanently deleting folders isn't reversible, so make sure that the files in these folders aren't being used in a site or in any other way as the files will no longer be accessible.
 *
 * >**Notes:**
 * > - When a folder is deleted, the files in that folder are deleted.
 * > - The specified folders can be from different parent folders.
 * > - Moving multiple folders at once is an asynchronous action, and may take time for the changes to appear in the Media Manager.
 * > - Attempting to delete folders that are already in the trash bin doesn't result in an error.
 * > - If your site contains files from a deleted media folder, the files still appear on your site as the deleted folder is still in the Media Manager (in the trash bin).
 * > - You can use the [Bulk Restore Folders From Trash Bin](#bulkrestorefoldersfromtrashbin) endpoint to restore folders from the Media Manager's trash bin.
 */
export function bulkDeleteFolders(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_bulkDeleteFoldersRequest, {});
    const { fromJSON: fromRes } = serializer(_bulkDeleteFoldersResponse, {});
    function __bulkDeleteFolders({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.folder',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FoldersService.BulkDeleteFolders',
            url: resolveComWixMediaSiteMediaV1FoldersServiceUrl({
                protoPath: '/v1/bulk/folders/delete',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __bulkDeleteFolders.fromReq = fromReq;
    return __bulkDeleteFolders;
}
/** Restores the specified folders from the Media Manager's trash bin, and moves them to their original locations in the Media Manager. */
export function bulkRestoreFoldersFromTrashBin(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_bulkRestoreFoldersFromTrashBinRequest, {});
    const { fromJSON: fromRes } = serializer(_bulkRestoreFoldersFromTrashBinResponse, {});
    function __bulkRestoreFoldersFromTrashBin({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.folder',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FoldersService.BulkRestoreFoldersFromTrashBin',
            url: resolveComWixMediaSiteMediaV1FoldersServiceUrl({
                protoPath: '/v1/bulk/trash-bin/folders/restore',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __bulkRestoreFoldersFromTrashBin.fromReq = fromReq;
    return __bulkRestoreFoldersFromTrashBin;
}
/** Retrieves a list of deleted folders from the trash bin. */
export function listDeletedFolders(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_listDeletedFoldersRequest, {});
    const { fromJSON: fromRes } = serializer(_listDeletedFoldersResponse, {
        _folder,
    });
    function __listDeletedFolders({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.folder',
            method: 'GET',
            methodFqn: 'com.wix.media.site_media.v1.FoldersService.ListDeletedFolders',
            url: resolveComWixMediaSiteMediaV1FoldersServiceUrl({
                protoPath: '/v1/trash-bin/folders',
                data: serializedData,
                host,
            }),
            params: toURLSearchParams(serializedData),
            transformResponse: fromRes,
        };
        return metadata;
    }
    __listDeletedFolders.fromReq = fromReq;
    return __listDeletedFolders;
}
//# sourceMappingURL=media-site-media-v1-folder.http.js.map