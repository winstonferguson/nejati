import { toURLSearchParams } from '@wix/metro-runtime';
import { serializer } from '@wix/metro-runtime/ambassador';
import { resolveUrl } from '@wix/metro-runtime';
const _archive = { urlExpirationDate: 'google.protobuf.Timestamp' };
const _audio = { urlExpirationDate: 'google.protobuf.Timestamp' };
const _audioV2 = { assets: '_audio' };
const _bulkDeleteFilesRequest = {};
const _bulkDeleteFilesResponse = {};
const _bulkImportFilesRequest = { importFileRequests: '_importFileRequest' };
const _bulkImportFilesResponse = { files: '_fileDescriptor' };
const _bulkRestoreFilesFromTrashBinRequest = {};
const _bulkRestoreFilesFromTrashBinResponse = {};
const _document = { urlExpirationDate: 'google.protobuf.Timestamp' };
const _faceRecognition = { confidence: 'DOUBLE' };
const _fileDescriptor = {
    createdDate: 'google.protobuf.Timestamp',
    updatedDate: 'google.protobuf.Timestamp',
    media: '_fileMedia',
};
const _fileMedia = {
    image: '_imageMedia',
    video: '_videoV2',
    audio: '_audioV2',
    document: '_document',
    vector: '_imageMedia',
    archive: '_archive',
    model3d: '_model3D',
};
const _generateFileDownloadUrlRequest = {};
const _generateFileDownloadUrlResponse = {};
const _generateFileResumableUploadUrlRequest = {};
const _generateFileResumableUploadUrlResponse = {};
const _generateFilesDownloadUrlRequest = {};
const _generateFilesDownloadUrlResponse = {};
const _generateFileUploadUrlRequest = {};
const _generateFileUploadUrlResponse = {};
const _generateVideoStreamingUrlRequest = {};
const _generateVideoStreamingUrlResponse = {};
const _getFileDescriptorRequest = {};
const _getFileDescriptorResponse = { file: '_fileDescriptor' };
const _getFileDescriptorsRequest = {};
const _getFileDescriptorsResponse = { files: '_fileDescriptor' };
const _image = { urlExpirationDate: 'google.protobuf.Timestamp' };
const _imageMedia = {
    image: '_image',
    faces: '_faceRecognition',
    previewImage: '_image',
};
const _importFileRequest = {};
const _importFileResponse = { file: '_fileDescriptor' };
const _listDeletedFilesRequest = {};
const _listDeletedFilesResponse = { files: '_fileDescriptor' };
const _listFilesRequest = {};
const _listFilesResponse = { files: '_fileDescriptor' };
const _model3D = {
    urlExpirationDate: 'google.protobuf.Timestamp',
    thumbnail: '_image',
};
const _searchFilesRequest = {};
const _searchFilesResponse = { files: '_fileDescriptor' };
const _updateFileDescriptorRequest = {
    fieldMask: 'google.protobuf.FieldMask',
    file: '_fileDescriptor',
};
const _updateFileDescriptorResponse = { file: '_fileDescriptor' };
const _videoResolution = {
    urlExpirationDate: 'google.protobuf.Timestamp',
    poster: '_image',
};
const _videoV2 = {
    urlExpirationDate: 'google.protobuf.Timestamp',
    resolutions: '_videoResolution',
    posters: '_image',
};
function resolveComWixMediaSiteMediaV1FilesServiceUrl(opts) {
    const domainToMappings = {
        'apps._base_domain_': [
            {
                srcPath: '/_api/wix-privatemedia-proxy-server',
                destPath: '/api',
            },
            {
                srcPath: '/_api/wix-privatemedia-proxy-server/v1',
                destPath: '/v1',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/_api/wix-privatemedia-proxy-server',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/site-media/v1',
                destPath: '/v1',
            },
        ],
    };
    return resolveUrl(Object.assign(opts, { domainToMappings }));
}
/**
 * Generates a URL for downloading a compressed file containing specific files in the Media Manager.
 *
 * The compressed file can contain up to 1000 files.
 */
export function generateFilesDownloadUrl(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_generateFilesDownloadUrlRequest, {});
    const { fromJSON: fromRes } = serializer(_generateFilesDownloadUrlResponse, {});
    function __generateFilesDownloadUrl({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.GenerateFilesDownloadUrl',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/files/generate-download-url',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __generateFilesDownloadUrl.fromReq = fromReq;
    return __generateFilesDownloadUrl;
}
/**
 * Generates one or more temporary URLs for downloading a specific file in the Media Manager.
 *
 * To download different assets of the file, use the `assetKeys` parameter which generates a download URL for each asset.
 * If no `assetKey` is specified, it defaults to `src`, which generates one download URL in the original file's format and quality.
 *
 * Use this endpoint to grant external clients access to a private media file. Use the `expirationInMinutes` parameter to set the URL expiration time, and the `expirationRedirectUrl` parameter to add a redirect url when the URL expires.
 */
export function generateFileDownloadUrl(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_generateFileDownloadUrlRequest, {});
    const { fromJSON: fromRes } = serializer(_generateFileDownloadUrlResponse, {});
    function __generateFileDownloadUrl({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.GenerateFileDownloadUrl',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/files/{fileId}/generate-download-url',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __generateFileDownloadUrl.fromReq = fromReq;
    return __generateFileDownloadUrl;
}
/** Gets information about a specific file in the Media Manager. */
export function getFileDescriptor(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_getFileDescriptorRequest, {});
    const { fromJSON: fromRes } = serializer(_getFileDescriptorResponse, {
        _archive,
        _audio,
        _audioV2,
        _document,
        _faceRecognition,
        _fileDescriptor,
        _fileMedia,
        _image,
        _imageMedia,
        _model3D,
        _videoResolution,
        _videoV2,
    });
    function __getFileDescriptor({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'GET',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.GetFileDescriptor',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/files/{fileId}',
                data: serializedData,
                host,
            }),
            params: toURLSearchParams(serializedData),
            transformResponse: fromRes,
        };
        return metadata;
    }
    __getFileDescriptor.fromReq = fromReq;
    return __getFileDescriptor;
}
/** Gets information about the specified files in the Media Manager. */
export function getFileDescriptors(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_getFileDescriptorsRequest, {});
    const { fromJSON: fromRes } = serializer(_getFileDescriptorsResponse, {
        _archive,
        _audio,
        _audioV2,
        _document,
        _faceRecognition,
        _fileDescriptor,
        _fileMedia,
        _image,
        _imageMedia,
        _model3D,
        _videoResolution,
        _videoV2,
    });
    function __getFileDescriptors({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.GetFileDescriptors',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/files/get-files',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __getFileDescriptors.fromReq = fromReq;
    return __getFileDescriptors;
}
/**
 * Updates a file. <br />
 *
 * You can use the `parentFolderId` parameter to move a file from its current folder to a different folder.
 */
export function updateFileDescriptor(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_updateFileDescriptorRequest, {
        _archive,
        _audio,
        _audioV2,
        _document,
        _faceRecognition,
        _fileDescriptor,
        _fileMedia,
        _image,
        _imageMedia,
        _model3D,
        _videoResolution,
        _videoV2,
    });
    const { fromJSON: fromRes } = serializer(_updateFileDescriptorResponse, {
        _archive,
        _audio,
        _audioV2,
        _document,
        _faceRecognition,
        _fileDescriptor,
        _fileMedia,
        _image,
        _imageMedia,
        _model3D,
        _videoResolution,
        _videoV2,
    });
    function __updateFileDescriptor({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'PATCH',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.UpdateFileDescriptor',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/files/{file.id}/update',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __updateFileDescriptor.fromReq = fromReq;
    return __updateFileDescriptor;
}
/**
 * Generates an upload URL to allow external clients to upload a file to the Media Manager.
 *
 * To learn how external clients can use the generated upload URL in the response to upload a file to the Media Manager, see the [Upload API](#upload-api).
 *
 * > **Note:** Any interruption in the upload process stops the file upload. For files larger than 10MB, or when network connection is poor, use the [Generate File Resumable Upload Url](#generatefileresumableuploadurl) instead. With the resumable upload URL, any interruption in the upload process pauses the file upload, and resumes the file upload process after the interruption.
 */
export function generateFileUploadUrl(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_generateFileUploadUrlRequest, {});
    const { fromJSON: fromRes } = serializer(_generateFileUploadUrlResponse, {});
    function __generateFileUploadUrl({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.GenerateFileUploadUrl',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/files/generate-upload-url',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __generateFileUploadUrl.fromReq = fromReq;
    return __generateFileUploadUrl;
}
/**
 * Generates a resumable upload URL to allow external clients to easily upload large files over 10MB to the Media Manager.
 *
 * With the resumable upload URL, any interruptions in the upload process pauses the file upload, and resumes the file upload process after the interruption. The resumable upload URL is also helpful when network connection is poor.
 *
 * To learn how external clients can use the generated upload URL in the response to upload large files to the Media Manager, see the [Resumable Upload API](#resumable-upload-api) article.
 */
export function generateFileResumableUploadUrl(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_generateFileResumableUploadUrlRequest, {});
    const { fromJSON: fromRes } = serializer(_generateFileResumableUploadUrlResponse, {});
    function __generateFileResumableUploadUrl({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.GenerateFileResumableUploadUrl',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/files/generate-resumable-upload-url',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __generateFileResumableUploadUrl.fromReq = fromReq;
    return __generateFileResumableUploadUrl;
}
/**
 * Imports a file to the Media Manager using an external url.
 *
 * This function returns information about the imported file.
 * Use the `parentFolderId` parameter to specify which folder you want the file to be imported to.
 * If no folder is specified, the file is imported to the `media-root` folder.
 *
 * To import a file, you need to provide one of the following:
 * 1. Pass the file's [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) in the `mimeType` parameter of the request. For example, `'image/png'`.
 * 2. Pass the file's name and extension. For example, `'my-image.png'`.
 * 3. If you don't know the file's extension or MIME type, pass its [media type](https://support.wix.com/en/article/wix-media-supported-media-file-types-and-file-sizes) in the `mediaType` parameter of the request. For example, `'IMAGE'`. Note that this option only works if the server hosting the media allows a 'HEAD' request.
 *
 * >**Note:** The `media` property isn't returned in the `files` response object.
 *
 */
export function importFile(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_importFileRequest, {});
    const { fromJSON: fromRes } = serializer(_importFileResponse, {
        _archive,
        _audio,
        _audioV2,
        _document,
        _faceRecognition,
        _fileDescriptor,
        _fileMedia,
        _image,
        _imageMedia,
        _model3D,
        _videoResolution,
        _videoV2,
    });
    function __importFile({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.ImportFile',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/files/import',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __importFile.fromReq = fromReq;
    return __importFile;
}
/**
 * Imports a bulk of files to the Media Manager using external urls.
 *
 * Returns information about the imported files. Use the `parentFolderId` parameter to specify in which folder you want each file to be imported to.
 * If no folder is specified, the file is imported to the `media-root` folder.
 *
 * To import files, you need to provide one of the following:
 * 1. Pass each file's [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) in the `mimeType` parameter of the request. For example, `'image/png'`.
 * 2. Pass each file's name and extension. For example, `'my-image.png'`.
 * 3. If you don't know a file's extension or MIME type, pass its [media type](https://support.wix.com/en/article/wix-media-supported-media-file-types-and-file-sizes) in the `mediaType` parameter of the request. For example, `'IMAGE'`. Note that this option only works if the server hosting the media allows a 'HEAD' request.
 *
 * >**Note:** The `media` property isn't returned in the `files` response object.
 */
export function bulkImportFiles(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_bulkImportFilesRequest, { _importFileRequest });
    const { fromJSON: fromRes } = serializer(_bulkImportFilesResponse, {
        _archive,
        _audio,
        _audioV2,
        _document,
        _faceRecognition,
        _fileDescriptor,
        _fileMedia,
        _image,
        _imageMedia,
        _model3D,
        _videoResolution,
        _videoV2,
    });
    function __bulkImportFiles({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.BulkImportFiles',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/bulk/files/import',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __bulkImportFiles.fromReq = fromReq;
    return __bulkImportFiles;
}
/**
 * Retrieves a list of files in the Media Manager.
 *
 * To retrieve a list of files within a specific folder in the Media Manager, pass the folder's ID in the `parentFolderId` parameter. If no folder is specified, the endpoint retrieves the list of files in the root folder of the Media Manager.
 */
export function listFiles(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_listFilesRequest, {});
    const { fromJSON: fromRes } = serializer(_listFilesResponse, {
        _archive,
        _audio,
        _audioV2,
        _document,
        _faceRecognition,
        _fileDescriptor,
        _fileMedia,
        _image,
        _imageMedia,
        _model3D,
        _videoResolution,
        _videoV2,
    });
    function __listFiles({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'GET',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.ListFiles',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/files',
                data: serializedData,
                host,
            }),
            params: toURLSearchParams(serializedData),
            transformResponse: fromRes,
        };
        return metadata;
    }
    __listFiles.fromReq = fromReq;
    return __listFiles;
}
/**
 * Searches all folders in the Media Manager and returns a list of files that match the terms specified in the optional parameters.
 *
 * If no parameters are specified, the endpoint returns all files in the `MEDIA_ROOT` folder.
 */
export function searchFiles(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_searchFilesRequest, {});
    const { fromJSON: fromRes } = serializer(_searchFilesResponse, {
        _archive,
        _audio,
        _audioV2,
        _document,
        _faceRecognition,
        _fileDescriptor,
        _fileMedia,
        _image,
        _imageMedia,
        _model3D,
        _videoResolution,
        _videoV2,
    });
    function __searchFiles({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.SearchFiles',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/files/search',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __searchFiles.fromReq = fromReq;
    return __searchFiles;
}
/** Generates a URL for streaming a specific video file in the Media Manager. */
export function generateVideoStreamingUrl(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_generateVideoStreamingUrlRequest, {});
    const { fromJSON: fromRes } = serializer(_generateVideoStreamingUrlResponse, {});
    function __generateVideoStreamingUrl({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.GenerateVideoStreamingUrl',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/files/video/{fileId}/generate-stream-url',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __generateVideoStreamingUrl.fromReq = fromReq;
    return __generateVideoStreamingUrl;
}
/**
 * Deletes the specified files from the Media Manager.
 *
 *
 * The deleted files are moved to the Media Manager's trash bin (`TRASH-ROOT` folder) unless permanently deleted. To permanently delete files, pass the `permanent` parameter with the value `true`. Permanently deleting files isn't reversible, so make sure that these files aren't being used in a site or in any other way as the files will no longer be accessible.
 *
 * >**Notes:**
 * > - The specified files can be from different folders.
 * > - Moving multiple files at once is an asynchronous action, and may take time for the changes to appear in the Media Manager.
 * > - Attempting to delete files that are already in the trash bin doesn't result in an error.
 * > - If your site contains deleted media files, the deleted media files still appear on your site as the files are still in the Media Manager (in the trash bin).
 * > - You can use the [Bulk Restore Files From Trash Bin](#bulkrestorefilesfromtrashbin) endpoint to restore files from the Media Manager's trash bin.
 */
export function bulkDeleteFiles(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_bulkDeleteFilesRequest, {});
    const { fromJSON: fromRes } = serializer(_bulkDeleteFilesResponse, {});
    function __bulkDeleteFiles({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.BulkDeleteFiles',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/bulk/files/delete',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __bulkDeleteFiles.fromReq = fromReq;
    return __bulkDeleteFiles;
}
/** Restores the specified files from the Media Manager's trash bin, and moves them to their original locations in the Media Manager. */
export function bulkRestoreFilesFromTrashBin(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_bulkRestoreFilesFromTrashBinRequest, {});
    const { fromJSON: fromRes } = serializer(_bulkRestoreFilesFromTrashBinResponse, {});
    function __bulkRestoreFilesFromTrashBin({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'POST',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.BulkRestoreFilesFromTrashBin',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/bulk/trash-bin/files/restore',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __bulkRestoreFilesFromTrashBin.fromReq = fromReq;
    return __bulkRestoreFilesFromTrashBin;
}
/**
 * Retrieves a list of files in the Media Manager's trash bin.
 *
 * >**Note:** The Media Manager's trash bin (`TRASH-ROOT` folder) only contains temporarily deleted files, not permanently deleted files.
 */
export function listDeletedFiles(payload) {
    const { toJSON: toReq, fromJSON: fromReq } = serializer(_listDeletedFilesRequest, {});
    const { fromJSON: fromRes } = serializer(_listDeletedFilesResponse, {
        _archive,
        _audio,
        _audioV2,
        _document,
        _faceRecognition,
        _fileDescriptor,
        _fileMedia,
        _image,
        _imageMedia,
        _model3D,
        _videoResolution,
        _videoV2,
    });
    function __listDeletedFiles({ host }) {
        const serializedData = toReq(payload);
        const metadata = {
            entityFqdn: 'wix.media.site_media.v1.file_descriptor',
            method: 'GET',
            methodFqn: 'com.wix.media.site_media.v1.FilesService.ListDeletedFiles',
            url: resolveComWixMediaSiteMediaV1FilesServiceUrl({
                protoPath: '/v1/trash-bin/files',
                data: serializedData,
                host,
            }),
            params: toURLSearchParams(serializedData),
            transformResponse: fromRes,
        };
        return metadata;
    }
    __listDeletedFiles.fromReq = fromReq;
    return __listDeletedFiles;
}
//# sourceMappingURL=media-site-media-v1-file-descriptor.http.js.map