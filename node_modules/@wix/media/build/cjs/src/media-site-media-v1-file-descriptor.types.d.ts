export interface FileDescriptor {
    /**
     * File ID. Generated when a file is uploaded to the Media Manager.
     * @readonly
     */
    id?: string;
    /** File name as it appears in the Media Manager. */
    displayName?: string;
    /**
     * Static URL of the file.
     * @readonly
     */
    url?: string;
    /** ID of the file's parent folder. */
    parentFolderId?: string | null;
    /**
     * File hash.
     * @readonly
     */
    hash?: string;
    /**
     * Size of the uploaded file in bytes.
     * @readonly
     */
    sizeInBytes?: string | null;
    /**
     * Whether the link to the uploaded file is public or private. Private links require a token.
     * @readonly
     */
    private?: boolean;
    /**
     * Media file type.
     * @readonly
     */
    mediaType?: MediaType;
    /**
     * Media file content.
     * @readonly
     */
    media?: FileMedia;
    /**
     * Status of the file that was uploaded.
     * * `FAILED`: The file failed to upload, for example, during media post processing.
     * * `READY`: The file uploaded, finished all processing, and is ready for use.
     * * `PENDING`: The file is processing and the URLs are not yet available. This response is returned when importing a file.
     * @readonly
     */
    operationStatus?: OperationStatus;
    /**
     * URL where the file was uploaded from.
     * @readonly
     */
    sourceUrl?: string | null;
    /**
     * URL of the file's thumbnail.
     * @readonly
     */
    thumbnailUrl?: string | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[];
    /**
     * Date and time the file was created.
     * @readonly
     */
    createdDate?: Date;
    /**
     * Date and time the file was updated.
     * @readonly
     */
    updatedDate?: Date;
    /**
     * The Wix site ID where the media file is stored.
     * @readonly
     */
    siteId?: string;
    /**
     * State of the file.
     * @readonly
     */
    state?: State;
}
export declare enum MediaType {
    UNKNOWN = "UNKNOWN",
    IMAGE = "IMAGE",
    VIDEO = "VIDEO",
    AUDIO = "AUDIO",
    DOCUMENT = "DOCUMENT",
    VECTOR = "VECTOR",
    ARCHIVE = "ARCHIVE",
    MODEL3D = "MODEL3D",
    OTHER = "OTHER"
}
export interface FileMedia extends FileMediaMediaOneOf {
    /** Information about the image. */
    image?: ImageMedia;
    /** Information about the video. */
    video?: VideoV2;
    /** Information about the audio. */
    audio?: AudioV2;
    /** Information about the document. */
    document?: Document;
    /** Information about the vector. */
    vector?: ImageMedia;
    /** Information about the archive. */
    archive?: Archive;
    /** Information about the 3D Model. */
    model3d?: Model3D;
}
/** @oneof */
export interface FileMediaMediaOneOf {
    /** Information about the image. */
    image?: ImageMedia;
    /** Information about the video. */
    video?: VideoV2;
    /** Information about the audio. */
    audio?: AudioV2;
    /** Information about the document. */
    document?: Document;
    /** Information about the vector. */
    vector?: ImageMedia;
    /** Information about the archive. */
    archive?: Archive;
    /** Information about the 3D Model. */
    model3d?: Model3D;
}
export interface ImageMedia {
    /** Image data. */
    image?: Image;
    /** Image colors. */
    colors?: Colors;
    /** Information about faces in the image. Use to crop images without cutting out faces. */
    faces?: FaceRecognition[];
    /**
     * Information about the image preview.
     * You can use this to display a preview for private images.
     */
    previewImage?: Image;
}
export interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
export interface Colors {
    /** Main color of the image. */
    prominent?: Color;
    /** Color palette of the image. */
    palette?: Color[];
}
export interface Color {
    /** HEX color. */
    hex?: string | null;
    /** RGB color. */
    rgb?: ColorRGB;
}
export interface ColorRGB {
    /** Red channel. */
    r?: number | null;
    /** Green channel. */
    g?: number | null;
    /** Blue channel. */
    b?: number | null;
}
/**
 * Using this object you can crop images while centering on faces
 * ------------------------
 * |                      |
 * |    x,y               |
 * |    *--------         |
 * |    |  .  . |         |
 * |    |   |   | height  |
 * |    |  \ /  |         |
 * |    |       |         |
 * |    ---------         |
 * |     width            |
 * |                      |
 * |______________________|
 */
export interface FaceRecognition {
    /** The accuracy percentage of the face recognition. The likelihood that a face is detected. */
    confidence?: number;
    /** Top left x pixel coordinate of the face. */
    x?: number;
    /** Top left y pixel coordinate of the face. */
    y?: number;
    /** Face pixel height. */
    height?: number;
    /** Face pixel width. */
    width?: number;
}
export interface VideoV2 {
    /** WixMedia ID. */
    id?: string;
    /**
     * Available resolutions for the video, starting with the optimal resolution.
     * @readonly
     */
    resolutions?: VideoResolution[];
    /**
     * Video filename.
     * @readonly
     */
    filename?: string | null;
}
export interface VideoResolution {
    /** Video URL. */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /**
     * Video format
     * Possible values: ['144p.mp4' '144p.webm' '240p.mp4' '240p.webm' '360p.mp4' '360p.webm' '480p.mp4' '480p.webm'
     * '720p.mp4' '720p.webm' '1080p.mp4' '1080p.webm' ]
     */
    format?: string;
}
export interface AudioV2 {
    /** WixMedia ID. */
    id?: string;
    /** Audio formats available for this file. */
    assets?: Audio[];
    /**
     * Audio bitrate. Optional.
     * @readonly
     */
    bitrate?: number | null;
    /**
     * Audio format. Optional.
     * @readonly
     */
    format?: string | null;
    /**
     * Audio duration in seconds. Optional.
     * @readonly
     */
    duration?: number | null;
    /**
     * Audio size in bytes. Optional.
     * @readonly
     */
    sizeInBytes?: string | null;
}
export interface Audio {
    /** WixMedia ID. */
    id?: string;
    /** Audio URL. */
    url?: string;
    /**
     * Audio filename.
     * @readonly
     */
    filename?: string | null;
}
export interface Document {
    /** WixMedia ID. */
    id?: string;
    /** Document URL. */
    url?: string;
    /** Document filename. */
    filename?: string | null;
}
export interface Archive {
    /** WixMedia ID. */
    id?: string;
    /** Archive URL. */
    url?: string;
    /**
     * Archive URL expiration date (when relevant).
     * @readonly
     */
    urlExpirationDate?: Date;
    /** Archive size in bytes. */
    sizeInBytes?: string | null;
    /** Archive filename. */
    filename?: string | null;
}
export interface Model3D {
    /** WixMedia 3D ID. */
    id?: string;
    /** 3D URL. */
    url?: string;
    /** 3D thumbnail Image */
    thumbnail?: Image;
    /** 3D alt text. */
    altText?: string | null;
    /**
     * 3D URL expiration date (when relevant).
     * @readonly
     */
    urlExpirationDate?: Date;
    /**
     * 3D filename.
     * @readonly
     */
    filename?: string | null;
    /**
     * 3D size in bytes.
     * @readonly
     */
    sizeInBytes?: string | null;
}
export interface OtherMedia {
    /** WixMedia ID. for use with Site Media APIs only */
    id?: string;
    /**
     * The media type of the file: 'site_icon', 'swf', 'package', 'ufont'
     * @readonly
     */
    internalMediaType?: string | null;
    /**
     * size in bytes. Optional.
     * @readonly
     */
    sizeInBytes?: string | null;
}
export declare enum OperationStatus {
    /** File upload or processing failed */
    FAILED = "FAILED",
    /** File is ready for consumption */
    READY = "READY",
    /** File is waiting for processing or currently being processed */
    PENDING = "PENDING"
}
export declare enum State {
    OK = "OK",
    DELETED = "DELETED"
}
export interface FileReady {
    /** File entity that is ready with full information */
    file?: FileDescriptor;
    /** External information passed in the file import or upload. */
    externalInfo?: ExternalInfo;
    /** The File was restored from the trash-bin */
    triggeredByUndelete?: boolean;
}
export interface ExternalInfo {
    /** External information to pass in the [File Ready](https://dev.wix.com/api/rest/media/media-manager/files/file-ready-domain-event) or [File Failed](https://dev.wix.com/api/rest/media/media-manager/files/file-failed-domain-event) events. */
    origin?: string;
    /** External IDs to pass in the [File Ready](https://dev.wix.com/api/rest/media/media-manager/files/file-ready-domain-event) or [File Failed](https://dev.wix.com/api/rest/media/media-manager/files/file-failed-domain-event) events. */
    externalIds?: string[];
}
export interface FileFailed {
    /** External information passed in the file import or upload. */
    externalInfo?: ExternalInfo;
}
export interface GenerateFilesDownloadUrlRequest {
    /** IDs of the files to download. */
    fileIds: string[];
}
export interface GenerateFilesDownloadUrlResponse {
    /** URL for downloading the compressed file containing the specified files in the Media Manager. */
    downloadUrl?: string;
}
export interface GenerateFileDownloadUrlRequest {
    /** File ID. */
    fileId: string;
    /**
     * Temporary file name used to identify the file type. For example, a file named "myFile.jpeg" identifies as an "image/jpeg" file type. <br />
     *
     * **Note:** The name that appears in the Media Manager is taken from the `filename` query parameter in the upload request.
     */
    downloadFileName?: string | null;
    /**
     * The time that it takes in minutes for the download URL to expire. <br />
     * Default: `600`. <br />
     * Limit: `525600` (1 year).
     */
    expirationInMinutes?: number | null;
    /**
     * The redirect URL for when the temporary download URL with a token expires. <br />
     * Default: A 403 Forbidden response page.
     */
    expirationRedirectUrl?: string | null;
    /**
     * Keys for downloading different assets (format and quality) of a file.
     * Default: `src`, key representing the original file's format and quality.
     */
    assetKeys?: string[] | null;
}
export interface GenerateFileDownloadUrlResponse {
    /** URL for downloading a specific file in the Media Manager. */
    downloadUrls?: DownloadUrl[];
}
export interface DownloadUrl {
    /** The file download URL. */
    url?: string;
    /**
     * Key for downloading a different asset (format and quality) of a file.
     * Default: `src`, key representing the original file's format and quality.
     */
    assetKey?: string;
}
export interface GetFileDescriptorRequest {
    /** File ID. */
    fileId: string;
}
export interface GetFileDescriptorResponse {
    /** Information about the file. */
    file?: FileDescriptor;
}
export interface GetFileDescriptorsRequest {
    /** File IDs. */
    fileIds: string[];
}
export interface GetFileDescriptorsResponse {
    /** Information about the requested files. */
    files?: FileDescriptor[];
}
export interface UpdateFileRequest {
    /** ID of the file to update. */
    fileId?: string;
    /** File name that appears in the Media Manager. */
    displayName?: string | null;
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[] | null;
}
export interface UpdateFileResponse {
    /** Information about the updated file. */
    file?: FileDescriptor;
}
export interface UpdateFileDescriptorRequest {
    /** The file to update. */
    file: FileDescriptor;
}
export interface UpdateFileDescriptorResponse {
    /** Information about the updated file. */
    file?: FileDescriptor;
}
export interface GenerateFileUploadUrlRequest {
    /** File mime type. */
    mimeType: string | null;
    /**
     * Temporary file name used to identify the file type. For example, a file named "myFile.jpeg" identifies as an "image/jpeg" file type.
     * <br /> **Note:** The name that appears in the Media Manager is taken from the `filename` query parameter in the upload request.
     */
    fileName?: string | null;
    /**
     * File size in bytes.
     * @readonly
     */
    sizeInBytes?: string | null;
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /** Whether the link to the uploaded file is public or private. See `Private Files` in terminology. */
    private?: boolean | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[] | null;
    /** A place to map an external entity to an uploaded file in the Wix Media Manager. */
    externalInfo?: ExternalInfo;
}
export interface GenerateFileUploadUrlResponse {
    /** The URL for uploading a file to the Media Manager. */
    uploadUrl?: string;
}
export interface GenerateFileResumableUploadUrlRequest {
    /** File mime type. */
    mimeType: string | null;
    /**
     * Temporary file name used to identify the file type. For example, a file named "myFile.jpeg" identifies as an "image/jpeg" file type.
     * <br /> **Note:** The name that appears in the Media Manager is taken from the `filename` query parameter in the upload request.
     */
    fileName?: string | null;
    /**
     * File size in bytes.
     * @readonly
     */
    sizeInBytes?: string | null;
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /** Whether the link to the imported file is public or private. See `Private Files` in terminology. */
    private?: boolean | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[] | null;
    /** The upload protocol to use for implementing the resumable upload. */
    uploadProtocol?: UploadProtocol;
}
export declare enum UploadProtocol {
    /** The upload protocol to use for implementing the resumable upload. */
    TUS = "TUS"
}
export interface GenerateFileResumableUploadUrlResponse {
    /** The upload protocol to use for implementing the resumable upload. */
    uploadProtocol?: UploadProtocol;
    /** The URL for uploading a file to the Media Manager. */
    uploadUrl?: string;
    /** Single-use upload token. */
    uploadToken?: string;
}
export interface ImportFileRequest {
    /** Publicly accessible external file URL. */
    url: string;
    /**
     * Media type of the file to import.
     * excluding: OTHER media type
     */
    mediaType?: MediaType;
    /** File name that appears in the Media Manager. */
    displayName?: string | null;
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /** Whether the link to the imported file is public or private. */
    private?: boolean | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[] | null;
    /** File mime type. */
    mimeType?: string;
    /** A place to map an external entity to an imported file in the Wix Media Manager. */
    externalInfo?: ExternalInfo;
    /** Optional parameters that should be sent with the external URL. */
    urlParams?: Record<string, any> | null;
    /** Optional headers that should be sent with the external URL. */
    urlHeaders?: Record<string, any> | null;
}
export interface ImportFileResponse {
    /** Information about the imported file. */
    file?: FileDescriptor;
}
export interface BulkImportFilesRequest {
    /** Information about the files to import. */
    importFileRequests: ImportFileRequest[];
}
export interface BulkImportFilesResponse {
    /** Information about the imported files. */
    files?: FileDescriptor[];
}
export interface ListFilesRequest {
    /**
     * ID of the file's parent folder. <br />
     * Default:`media-root`.
     */
    parentFolderId?: string | null;
    /**
     * File media type.
     * excluding: OTHER media type
     */
    mediaTypes?: MediaType[];
    /** Whether the link to the imported file is public or private. */
    private?: boolean | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * * `sizeInBytes`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface CursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface ListFilesResponse {
    /** List of files in the Media Manager. */
    files?: FileDescriptor[];
    /** The next cursor if it exists. */
    nextCursor?: PagingMetadataV2;
}
export interface PagingMetadataV2 {
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
export interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
}
export interface SearchFilesRequest {
    /**
     * Term to search for. Possible terms include the value of a file's
     * `displayName`, `mimeType`, and `label`. <br />
     * For example, if a file's label is cat, the search term is 'cat'.
     */
    search?: string | null;
    /**
     * A root folder in the media manager to search in. <br />
     * Default: `MEDIA_ROOT`.
     */
    rootFolder?: RootFolder;
    /**
     * File media type.
     * excluding: OTHER media type
     */
    mediaTypes?: MediaType[];
    /** Whether the link to the imported file is public or private. */
    private?: boolean | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * * `sizeInBytes`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
export declare enum RootFolder {
    /** Root of all site media */
    MEDIA_ROOT = "MEDIA_ROOT",
    /** Root of the trash system folder */
    TRASH_ROOT = "TRASH_ROOT",
    /** Root of all visitor uploads */
    VISITOR_UPLOADS_ROOT = "VISITOR_UPLOADS_ROOT"
}
export interface SearchFilesResponse {
    /** Files matching the query. */
    files?: FileDescriptor[];
    /** The next cursor if it exists. */
    nextCursor?: PagingMetadataV2;
}
export interface GenerateVideoStreamingUrlRequest {
    /** File ID. */
    fileId: string;
    /** Video stream format. */
    format?: StreamFormat;
}
export declare enum StreamFormat {
    UNKNOWN = "UNKNOWN",
    HLS = "HLS",
    DASH = "DASH"
}
export interface GenerateVideoStreamingUrlResponse {
    /** URL for streaming a specific file in the Media Manager. */
    downloadUrl?: DownloadUrl;
}
export interface GenerateWebSocketTokenRequest {
}
export interface GenerateWebSocketTokenResponse {
    /** The web socket token for the identity in the request */
    token?: string;
}
export interface BulkDeleteFilesRequest {
    /** IDs of the files to move to the Media Manager's trash bin. */
    fileIds: string[];
    /**
     * Whether the specified files are permanently deleted. <br />
     * Default: `false`
     */
    permanent?: boolean;
}
export interface BulkDeleteFilesResponse {
}
export interface BulkRestoreFilesFromTrashBinRequest {
    /** IDs of the files to restore from the Media Manager's trash bin. */
    fileIds: string[];
}
export interface BulkRestoreFilesFromTrashBinResponse {
}
export interface ListDeletedFilesRequest {
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /**
     * File media type.
     * excluding: OTHER media type
     */
    mediaTypes?: MediaType[];
    /** Whether the link to the imported file is public or private. */
    private?: boolean | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * * `sizeInBytes`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
export interface ListDeletedFilesResponse {
    /** List of files in the Media Manager's trash bin. */
    files?: FileDescriptor[];
    /** The next cursor if it exists. */
    nextCursor?: PagingMetadataV2;
}
export interface GenerateFilesDownloadUrlResponseNonNullableFields {
    downloadUrl: string;
}
export interface GenerateFileDownloadUrlResponseNonNullableFields {
    downloadUrls: {
        url: string;
        assetKey: string;
    }[];
}
export interface GetFileDescriptorResponseNonNullableFields {
    file?: {
        id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            video?: {
                id: string;
                url: string;
                resolutions: {
                    url: string;
                    height: number;
                    width: number;
                    poster?: {
                        id: string;
                        url: string;
                        height: number;
                        width: number;
                    };
                    format: string;
                }[];
                posters: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                }[];
            };
            audio?: {
                id: string;
                assets: {
                    id: string;
                    url: string;
                }[];
            };
            document?: {
                id: string;
                url: string;
            };
            vector?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            archive?: {
                id: string;
                url: string;
            };
            model3d?: {
                id: string;
                url: string;
                thumbnail?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            other?: {
                id: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
        internalTags: string[];
    };
}
export interface GetFileDescriptorsResponseNonNullableFields {
    files: {
        id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            video?: {
                id: string;
                url: string;
                resolutions: {
                    url: string;
                    height: number;
                    width: number;
                    poster?: {
                        id: string;
                        url: string;
                        height: number;
                        width: number;
                    };
                    format: string;
                }[];
                posters: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                }[];
            };
            audio?: {
                id: string;
                assets: {
                    id: string;
                    url: string;
                }[];
            };
            document?: {
                id: string;
                url: string;
            };
            vector?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            archive?: {
                id: string;
                url: string;
            };
            model3d?: {
                id: string;
                url: string;
                thumbnail?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            other?: {
                id: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
        internalTags: string[];
    }[];
}
export interface UpdateFileDescriptorResponseNonNullableFields {
    file?: {
        id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            video?: {
                id: string;
                url: string;
                resolutions: {
                    url: string;
                    height: number;
                    width: number;
                    poster?: {
                        id: string;
                        url: string;
                        height: number;
                        width: number;
                    };
                    format: string;
                }[];
                posters: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                }[];
            };
            audio?: {
                id: string;
                assets: {
                    id: string;
                    url: string;
                }[];
            };
            document?: {
                id: string;
                url: string;
            };
            vector?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            archive?: {
                id: string;
                url: string;
            };
            model3d?: {
                id: string;
                url: string;
                thumbnail?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            other?: {
                id: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
        internalTags: string[];
    };
}
export interface GenerateFileUploadUrlResponseNonNullableFields {
    uploadUrl: string;
}
export interface GenerateFileResumableUploadUrlResponseNonNullableFields {
    uploadProtocol: UploadProtocol;
    uploadUrl: string;
    uploadToken: string;
}
export interface ImportFileResponseNonNullableFields {
    file?: {
        id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            video?: {
                id: string;
                url: string;
                resolutions: {
                    url: string;
                    height: number;
                    width: number;
                    poster?: {
                        id: string;
                        url: string;
                        height: number;
                        width: number;
                    };
                    format: string;
                }[];
                posters: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                }[];
            };
            audio?: {
                id: string;
                assets: {
                    id: string;
                    url: string;
                }[];
            };
            document?: {
                id: string;
                url: string;
            };
            vector?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            archive?: {
                id: string;
                url: string;
            };
            model3d?: {
                id: string;
                url: string;
                thumbnail?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            other?: {
                id: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
        internalTags: string[];
    };
}
export interface BulkImportFilesResponseNonNullableFields {
    files: {
        id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            video?: {
                id: string;
                url: string;
                resolutions: {
                    url: string;
                    height: number;
                    width: number;
                    poster?: {
                        id: string;
                        url: string;
                        height: number;
                        width: number;
                    };
                    format: string;
                }[];
                posters: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                }[];
            };
            audio?: {
                id: string;
                assets: {
                    id: string;
                    url: string;
                }[];
            };
            document?: {
                id: string;
                url: string;
            };
            vector?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            archive?: {
                id: string;
                url: string;
            };
            model3d?: {
                id: string;
                url: string;
                thumbnail?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            other?: {
                id: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
        internalTags: string[];
    }[];
}
export interface ListFilesResponseNonNullableFields {
    files: {
        id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            video?: {
                id: string;
                url: string;
                resolutions: {
                    url: string;
                    height: number;
                    width: number;
                    poster?: {
                        id: string;
                        url: string;
                        height: number;
                        width: number;
                    };
                    format: string;
                }[];
                posters: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                }[];
            };
            audio?: {
                id: string;
                assets: {
                    id: string;
                    url: string;
                }[];
            };
            document?: {
                id: string;
                url: string;
            };
            vector?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            archive?: {
                id: string;
                url: string;
            };
            model3d?: {
                id: string;
                url: string;
                thumbnail?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            other?: {
                id: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
        internalTags: string[];
    }[];
}
export interface SearchFilesResponseNonNullableFields {
    files: {
        id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            video?: {
                id: string;
                url: string;
                resolutions: {
                    url: string;
                    height: number;
                    width: number;
                    poster?: {
                        id: string;
                        url: string;
                        height: number;
                        width: number;
                    };
                    format: string;
                }[];
                posters: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                }[];
            };
            audio?: {
                id: string;
                assets: {
                    id: string;
                    url: string;
                }[];
            };
            document?: {
                id: string;
                url: string;
            };
            vector?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            archive?: {
                id: string;
                url: string;
            };
            model3d?: {
                id: string;
                url: string;
                thumbnail?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            other?: {
                id: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
        internalTags: string[];
    }[];
}
export interface GenerateVideoStreamingUrlResponseNonNullableFields {
    downloadUrl?: {
        url: string;
        assetKey: string;
    };
}
export interface ListDeletedFilesResponseNonNullableFields {
    files: {
        id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            video?: {
                id: string;
                url: string;
                resolutions: {
                    url: string;
                    height: number;
                    width: number;
                    poster?: {
                        id: string;
                        url: string;
                        height: number;
                        width: number;
                    };
                    format: string;
                }[];
                posters: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                }[];
            };
            audio?: {
                id: string;
                assets: {
                    id: string;
                    url: string;
                }[];
            };
            document?: {
                id: string;
                url: string;
            };
            vector?: {
                image?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            archive?: {
                id: string;
                url: string;
            };
            model3d?: {
                id: string;
                url: string;
                thumbnail?: {
                    id: string;
                    url: string;
                    height: number;
                    width: number;
                };
            };
            other?: {
                id: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
        internalTags: string[];
    }[];
}
