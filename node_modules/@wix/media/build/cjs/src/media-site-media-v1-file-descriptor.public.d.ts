import { HttpClient } from '@wix/sdk-types';
import { UpdateFileDescriptorFile, ImportFileRequest, BulkDeleteFilesOptions, GenerateFileDownloadUrlOptions, GenerateFileResumableUploadUrlOptions, GenerateFileUploadUrlOptions, GenerateVideoStreamingUrlOptions, ImportFileOptions, ListDeletedFilesOptions, ListFilesOptions, SearchFilesOptions } from './media-site-media-v1-file-descriptor.universal';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function generateFilesDownloadUrl(httpClient: HttpClient): (fileIds: string[]) => Promise<import("./media-site-media-v1-file-descriptor.universal").GenerateFilesDownloadUrlResponse & import("./media-site-media-v1-file-descriptor.universal").GenerateFilesDownloadUrlResponseNonNullableFields>;
export declare function generateFileDownloadUrl(httpClient: HttpClient): (fileId: string, options?: GenerateFileDownloadUrlOptions | undefined) => Promise<import("./media-site-media-v1-file-descriptor.universal").GenerateFileDownloadUrlResponse & import("./media-site-media-v1-file-descriptor.universal").GenerateFileDownloadUrlResponseNonNullableFields>;
export declare function getFileDescriptor(httpClient: HttpClient): (fileId: string) => Promise<import("./media-site-media-v1-file-descriptor.universal").FileDescriptor & {
    _id: string;
    displayName: string;
    url: string;
    hash: string;
    private: boolean;
    mediaType: import("./media-site-media-v1-file-descriptor.universal").MediaType;
    media?: {
        image?: {
            image: string;
            colors?: {
                palette: import("./media-site-media-v1-file-descriptor.universal").Color[];
            } | undefined;
            faces: {
                confidence: number;
                x: number;
                y: number;
                height: number;
                width: number;
            }[];
            previewImage: string;
        } | undefined;
        video: string;
        audio?: {
            _id: string;
            assets: string;
        } | undefined;
        document: string;
        vector?: {
            image: string;
            colors?: {
                palette: import("./media-site-media-v1-file-descriptor.universal").Color[];
            } | undefined;
            faces: {
                confidence: number;
                x: number;
                y: number;
                height: number;
                width: number;
            }[];
            previewImage: string;
        } | undefined;
        archive?: {
            _id: string;
            url: string;
        } | undefined;
        model3d?: {
            _id: string;
            url: string;
            thumbnail: string;
        } | undefined;
    } | undefined;
    operationStatus: import("./media-site-media-v1-file-descriptor.universal").OperationStatus;
    labels: string[];
    siteId: string;
    state: import("./media-site-media-v1-file-descriptor.universal").State;
}>;
export declare function getFileDescriptors(httpClient: HttpClient): (fileIds: string[]) => Promise<import("./media-site-media-v1-file-descriptor.universal").GetFileDescriptorsResponse & import("./media-site-media-v1-file-descriptor.universal").GetFileDescriptorsResponseNonNullableFields>;
export declare function updateFileDescriptor(httpClient: HttpClient): (_id: string, file: UpdateFileDescriptorFile) => Promise<import("./media-site-media-v1-file-descriptor.universal").FileDescriptor & {
    _id: string;
    displayName: string;
    url: string;
    hash: string;
    private: boolean;
    mediaType: import("./media-site-media-v1-file-descriptor.universal").MediaType;
    media?: {
        image?: {
            image: string;
            colors?: {
                palette: import("./media-site-media-v1-file-descriptor.universal").Color[];
            } | undefined;
            faces: {
                confidence: number;
                x: number;
                y: number;
                height: number;
                width: number;
            }[];
            previewImage: string;
        } | undefined;
        video: string;
        audio?: {
            _id: string;
            assets: string;
        } | undefined;
        document: string;
        vector?: {
            image: string;
            colors?: {
                palette: import("./media-site-media-v1-file-descriptor.universal").Color[];
            } | undefined;
            faces: {
                confidence: number;
                x: number;
                y: number;
                height: number;
                width: number;
            }[];
            previewImage: string;
        } | undefined;
        archive?: {
            _id: string;
            url: string;
        } | undefined;
        model3d?: {
            _id: string;
            url: string;
            thumbnail: string;
        } | undefined;
    } | undefined;
    operationStatus: import("./media-site-media-v1-file-descriptor.universal").OperationStatus;
    labels: string[];
    siteId: string;
    state: import("./media-site-media-v1-file-descriptor.universal").State;
}>;
export declare function generateFileUploadUrl(httpClient: HttpClient): (mimeType: string | null, options?: GenerateFileUploadUrlOptions | undefined) => Promise<import("./media-site-media-v1-file-descriptor.universal").GenerateFileUploadUrlResponse & import("./media-site-media-v1-file-descriptor.universal").GenerateFileUploadUrlResponseNonNullableFields>;
export declare function generateFileResumableUploadUrl(httpClient: HttpClient): (mimeType: string | null, options?: GenerateFileResumableUploadUrlOptions | undefined) => Promise<import("./media-site-media-v1-file-descriptor.universal").GenerateFileResumableUploadUrlResponse & import("./media-site-media-v1-file-descriptor.universal").GenerateFileResumableUploadUrlResponseNonNullableFields>;
export declare function importFile(httpClient: HttpClient): (url: string, options?: ImportFileOptions | undefined) => Promise<import("./media-site-media-v1-file-descriptor.universal").ImportFileResponse & import("./media-site-media-v1-file-descriptor.universal").ImportFileResponseNonNullableFields>;
export declare function bulkImportFiles(httpClient: HttpClient): (importFileRequests: ImportFileRequest[]) => Promise<import("./media-site-media-v1-file-descriptor.universal").BulkImportFilesResponse & import("./media-site-media-v1-file-descriptor.universal").BulkImportFilesResponseNonNullableFields>;
export declare function listFiles(httpClient: HttpClient): (options?: ListFilesOptions | undefined) => Promise<import("./media-site-media-v1-file-descriptor.universal").ListFilesResponse & import("./media-site-media-v1-file-descriptor.universal").ListFilesResponseNonNullableFields>;
export declare function searchFiles(httpClient: HttpClient): (options?: SearchFilesOptions | undefined) => Promise<import("./media-site-media-v1-file-descriptor.universal").SearchFilesResponse & import("./media-site-media-v1-file-descriptor.universal").SearchFilesResponseNonNullableFields>;
export declare function generateVideoStreamingUrl(httpClient: HttpClient): (fileId: string, options?: GenerateVideoStreamingUrlOptions | undefined) => Promise<import("./media-site-media-v1-file-descriptor.universal").GenerateVideoStreamingUrlResponse & import("./media-site-media-v1-file-descriptor.universal").GenerateVideoStreamingUrlResponseNonNullableFields>;
export declare function bulkDeleteFiles(httpClient: HttpClient): (fileIds: string[], options?: BulkDeleteFilesOptions | undefined) => Promise<void>;
export declare function bulkRestoreFilesFromTrashBin(httpClient: HttpClient): (fileIds: string[]) => Promise<void>;
export declare function listDeletedFiles(httpClient: HttpClient): (options?: ListDeletedFilesOptions | undefined) => Promise<import("./media-site-media-v1-file-descriptor.universal").ListDeletedFilesResponse & import("./media-site-media-v1-file-descriptor.universal").ListDeletedFilesResponseNonNullableFields>;
export { MediaType, OperationStatus, State, UploadProtocol, SortOrder, RootFolder, StreamFormat, } from './media-site-media-v1-file-descriptor.universal';
export { FileDescriptor, FileMedia, FileMediaMediaOneOf, ImageMedia, Colors, Color, ColorRGB, FaceRecognition, VideoResolution, AudioV2, Archive, Model3D, OtherMedia, FileReady, ExternalInfo, FileFailed, GenerateFilesDownloadUrlRequest, GenerateFilesDownloadUrlResponse, GenerateFileDownloadUrlRequest, GenerateFileDownloadUrlResponse, DownloadUrl, GetFileDescriptorRequest, GetFileDescriptorResponse, GetFileDescriptorsRequest, GetFileDescriptorsResponse, UpdateFileRequest, UpdateFileResponse, UpdateFileDescriptorRequest, UpdateFileDescriptorResponse, GenerateFileUploadUrlRequest, GenerateFileUploadUrlResponse, GenerateFileResumableUploadUrlRequest, GenerateFileResumableUploadUrlResponse, ImportFileRequest, ImportFileResponse, BulkImportFilesRequest, BulkImportFilesResponse, ListFilesRequest, Sorting, CursorPaging, ListFilesResponse, PagingMetadataV2, Cursors, SearchFilesRequest, SearchFilesResponse, GenerateVideoStreamingUrlRequest, GenerateVideoStreamingUrlResponse, GenerateWebSocketTokenRequest, GenerateWebSocketTokenResponse, BulkDeleteFilesRequest, BulkDeleteFilesResponse, BulkRestoreFilesFromTrashBinRequest, BulkRestoreFilesFromTrashBinResponse, ListDeletedFilesRequest, ListDeletedFilesResponse, GenerateFilesDownloadUrlResponseNonNullableFields, GenerateFileDownloadUrlResponseNonNullableFields, GetFileDescriptorResponseNonNullableFields, GetFileDescriptorsResponseNonNullableFields, UpdateFileDescriptorResponseNonNullableFields, GenerateFileUploadUrlResponseNonNullableFields, GenerateFileResumableUploadUrlResponseNonNullableFields, ImportFileResponseNonNullableFields, BulkImportFilesResponseNonNullableFields, ListFilesResponseNonNullableFields, SearchFilesResponseNonNullableFields, GenerateVideoStreamingUrlResponseNonNullableFields, ListDeletedFilesResponseNonNullableFields, GenerateFileDownloadUrlOptions, UpdateFileDescriptorFile, GenerateFileUploadUrlOptions, GenerateFileResumableUploadUrlOptions, ImportFileOptions, ListFilesOptions, SearchFilesOptions, GenerateVideoStreamingUrlOptions, BulkDeleteFilesOptions, ListDeletedFilesOptions, } from './media-site-media-v1-file-descriptor.universal';
