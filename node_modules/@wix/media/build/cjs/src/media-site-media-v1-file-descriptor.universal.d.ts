export declare const __debug: {
    verboseLogging: {
        on: () => boolean;
        off: () => boolean;
    };
};
export interface FileDescriptor {
    /**
     * File ID. Generated when a file is uploaded to the Media Manager.
     * @readonly
     */
    _id?: string;
    /** File name as it appears in the Media Manager. */
    displayName?: string;
    /**
     * Static URL of the file.
     * @readonly
     */
    url?: string;
    /** ID of the file's parent folder. */
    parentFolderId?: string | null;
    /**
     * File hash.
     * @readonly
     */
    hash?: string;
    /**
     * Size of the uploaded file in bytes.
     * @readonly
     */
    sizeInBytes?: string | null;
    /**
     * Whether the link to the uploaded file is public or private. Private links require a token.
     * @readonly
     */
    private?: boolean;
    /**
     * Media file type.
     *
     * Supported values: `"IMAGE"`, `"VIDEO"`, `"AUDIO"`, `"DOCUMENT"`, `"VECTOR"`, `"ARCHIVE"`, `"MODEL3D"`
     * @readonly
     */
    mediaType?: MediaType;
    /**
     * Media file content.
     * @readonly
     */
    media?: FileMedia;
    /**
     * Status of the file that was uploaded.
     *
     * Supported values: `"FAILED"`, `"READY"`, `"PENDING"`
     * * `FAILED`: The file failed to upload, for example, during media post processing.
     * * `READY`: The file uploaded, finished all processing, and is ready for use.
     * * `PENDING`: The file is processing and the URLs are not yet available. This response is returned when importing a file.
     * @readonly
     */
    operationStatus?: OperationStatus;
    /**
     * URL where the file was uploaded from.
     * @readonly
     */
    sourceUrl?: string | null;
    /**
     * URL of the file's thumbnail.
     * @readonly
     */
    thumbnailUrl?: string | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[];
    /**
     * Date and time the file was created.
     * @readonly
     */
    _createdDate?: Date;
    /**
     * Date and time the file was updated.
     * @readonly
     */
    _updatedDate?: Date;
    /**
     * The Wix site ID where the media file is stored.
     * @readonly
     */
    siteId?: string;
    /**
     * State of the file.
     *
     * Supported values: `"OK"`, `"DELETED"`
     * @readonly
     */
    state?: State;
}
export declare enum MediaType {
    UNKNOWN = "UNKNOWN",
    IMAGE = "IMAGE",
    VIDEO = "VIDEO",
    AUDIO = "AUDIO",
    DOCUMENT = "DOCUMENT",
    VECTOR = "VECTOR",
    ARCHIVE = "ARCHIVE",
    MODEL3D = "MODEL3D",
    OTHER = "OTHER"
}
export interface FileMedia extends FileMediaMediaOneOf {
    /** Information about the image. */
    image?: ImageMedia;
    /** Information about the video. */
    video?: string;
    /** Information about the audio. */
    audio?: AudioV2;
    /** Information about the document. */
    document?: string;
    /** Information about the vector. */
    vector?: ImageMedia;
    /** Information about the archive. */
    archive?: Archive;
    /** Information about the 3D Model. */
    model3d?: Model3D;
}
/** @oneof */
export interface FileMediaMediaOneOf {
    /** Information about the image. */
    image?: ImageMedia;
    /** Information about the video. */
    video?: string;
    /** Information about the audio. */
    audio?: AudioV2;
    /** Information about the document. */
    document?: string;
    /** Information about the vector. */
    vector?: ImageMedia;
    /** Information about the archive. */
    archive?: Archive;
    /** Information about the 3D Model. */
    model3d?: Model3D;
}
export interface ImageMedia {
    /** Image data. */
    image?: string;
    /** Image colors. */
    colors?: Colors;
    /** Information about faces in the image. Use to crop images without cutting out faces. */
    faces?: FaceRecognition[];
    /**
     * Information about the image preview.
     * You can use this to display a preview for private images.
     */
    previewImage?: string;
}
export interface Colors {
    /** Main color of the image. */
    prominent?: Color;
    /** Color palette of the image. */
    palette?: Color[];
}
export interface Color {
    /** HEX color. */
    hex?: string | null;
    /** RGB color. */
    rgb?: ColorRGB;
}
export interface ColorRGB {
    /** Red channel. */
    r?: number | null;
    /** Green channel. */
    g?: number | null;
    /** Blue channel. */
    b?: number | null;
}
/**
 * Using this object you can crop images while centering on faces
 * ------------------------
 * |                      |
 * |    x,y               |
 * |    *--------         |
 * |    |  .  . |         |
 * |    |   |   | height  |
 * |    |  \ /  |         |
 * |    |       |         |
 * |    ---------         |
 * |     width            |
 * |                      |
 * |______________________|
 */
export interface FaceRecognition {
    /** The accuracy percentage of the face recognition. The likelihood that a face is detected. */
    confidence?: number;
    /** Top left x pixel coordinate of the face. */
    x?: number;
    /** Top left y pixel coordinate of the face. */
    y?: number;
    /** Face pixel height. */
    height?: number;
    /** Face pixel width. */
    width?: number;
}
export interface VideoResolution {
    /** Video URL. */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /**
     * Video format
     * Possible values: ['144p.mp4' '144p.webm' '240p.mp4' '240p.webm' '360p.mp4' '360p.webm' '480p.mp4' '480p.webm'
     * '720p.mp4' '720p.webm' '1080p.mp4' '1080p.webm' ]
     */
    format?: string;
}
export interface AudioV2 {
    /** WixMedia ID. */
    _id?: string;
    /** Audio formats available for this file. */
    assets?: string[];
    /**
     * Audio bitrate. Optional.
     * @readonly
     */
    bitrate?: number | null;
    /**
     * Audio format. Optional.
     * @readonly
     */
    format?: string | null;
    /**
     * Audio duration in seconds. Optional.
     * @readonly
     */
    duration?: number | null;
    /**
     * Audio size in bytes. Optional.
     * @readonly
     */
    sizeInBytes?: string | null;
}
export interface Archive {
    /** WixMedia ID. */
    _id?: string;
    /** Archive URL. */
    url?: string;
    /**
     * Archive URL expiration date (when relevant).
     * @readonly
     */
    urlExpirationDate?: Date;
    /** Archive size in bytes. */
    sizeInBytes?: string | null;
    /** Archive filename. */
    filename?: string | null;
}
export interface Model3D {
    /** WixMedia 3D ID. */
    _id?: string;
    /** 3D URL. */
    url?: string;
    /** 3D thumbnail Image */
    thumbnail?: string;
    /** 3D alt text. */
    altText?: string | null;
    /**
     * 3D URL expiration date (when relevant).
     * @readonly
     */
    urlExpirationDate?: Date;
    /**
     * 3D filename.
     * @readonly
     */
    filename?: string | null;
    /**
     * 3D size in bytes.
     * @readonly
     */
    sizeInBytes?: string | null;
}
export interface OtherMedia {
    /** WixMedia ID. for use with Site Media APIs only */
    _id?: string;
    /**
     * The media type of the file: 'site_icon', 'swf', 'package', 'ufont'
     * @readonly
     */
    internalMediaType?: string | null;
    /**
     * size in bytes. Optional.
     * @readonly
     */
    sizeInBytes?: string | null;
}
export declare enum OperationStatus {
    /** File upload or processing failed */
    FAILED = "FAILED",
    /** File is ready for consumption */
    READY = "READY",
    /** File is waiting for processing or currently being processed */
    PENDING = "PENDING"
}
export declare enum State {
    OK = "OK",
    DELETED = "DELETED"
}
export interface FileReady {
    /** File entity that is ready with full information */
    file?: FileDescriptor;
    /** External information passed in the file import or upload. */
    externalInfo?: ExternalInfo;
    /** The File was restored from the trash-bin */
    triggeredByUndelete?: boolean;
}
export interface ExternalInfo {
    /** External information to pass in the [File Ready](https://dev.wix.com/api/rest/media/media-manager/files/file-ready-domain-event) or [File Failed](https://dev.wix.com/api/rest/media/media-manager/files/file-failed-domain-event) events. */
    origin?: string;
    /** External IDs to pass in the [File Ready](https://dev.wix.com/api/rest/media/media-manager/files/file-ready-domain-event) or [File Failed](https://dev.wix.com/api/rest/media/media-manager/files/file-failed-domain-event) events. */
    externalIds?: string[];
}
export interface FileFailed {
    /** External information passed in the file import or upload. */
    externalInfo?: ExternalInfo;
}
export interface GenerateFilesDownloadUrlRequest {
    /** IDs of the files to download. */
    fileIds: string[];
}
export interface GenerateFilesDownloadUrlResponse {
    /** URL for downloading the compressed file containing the specified files in the Media Manager. */
    downloadUrl?: string;
}
export interface GenerateFileDownloadUrlRequest {
    /** File ID. */
    fileId: string;
    /**
     * Temporary file name used to identify the file type. For example, a file named "myFile.jpeg" identifies as an "image/jpeg" file type. <br />
     *
     * **Note:** The name that appears in the Media Manager is taken from the `filename` query parameter in the upload request.
     */
    downloadFileName?: string | null;
    /**
     * The time that it takes in minutes for the download URL to expire. <br />
     * Default: `600`. <br />
     * Limit: `525600` (1 year).
     */
    expirationInMinutes?: number | null;
    /**
     * The redirect URL for when the temporary download URL with a token expires. <br />
     * Default: A 403 Forbidden response page.
     */
    expirationRedirectUrl?: string | null;
    /**
     * Keys for downloading different assets (format and quality) of a file.
     * Default: `src`, key representing the original file's format and quality.
     */
    assetKeys?: string[] | null;
}
export interface GenerateFileDownloadUrlResponse {
    /** URL for downloading a specific file in the Media Manager. */
    downloadUrls?: DownloadUrl[];
}
export interface DownloadUrl {
    /** The file download URL. */
    url?: string;
    /**
     * Key for downloading a different asset (format and quality) of a file.
     * Default: `src`, key representing the original file's format and quality.
     */
    assetKey?: string;
}
export interface GetFileDescriptorRequest {
    /** File ID. */
    fileId: string;
}
export interface GetFileDescriptorResponse {
    /** Information about the file. */
    file?: FileDescriptor;
}
export interface GetFileDescriptorsRequest {
    /** File IDs. */
    fileIds: string[];
}
export interface GetFileDescriptorsResponse {
    /** Information about the requested files. */
    files?: FileDescriptor[];
}
export interface UpdateFileRequest {
    /** ID of the file to update. */
    fileId?: string;
    /** File name that appears in the Media Manager. */
    displayName?: string | null;
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[] | null;
}
export interface UpdateFileResponse {
    /** Information about the updated file. */
    file?: FileDescriptor;
}
export interface UpdateFileDescriptorRequest {
    /** The file to update. */
    file: FileDescriptor;
}
export interface UpdateFileDescriptorResponse {
    /** Information about the updated file. */
    file?: FileDescriptor;
}
export interface GenerateFileUploadUrlRequest {
    /** File mime type. */
    mimeType: string | null;
    /**
     * Temporary file name used to identify the file type. For example, a file named "myFile.jpeg" identifies as an "image/jpeg" file type.
     * <br /> **Note:** The name that appears in the Media Manager is taken from the `filename` query parameter in the upload request.
     */
    fileName?: string | null;
    /**
     * File size in bytes.
     * @readonly
     */
    sizeInBytes?: string | null;
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /** Whether the link to the uploaded file is public or private. See `Private Files` in terminology. */
    private?: boolean | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[] | null;
    /** A place to map an external entity to an uploaded file in the Wix Media Manager. */
    externalInfo?: ExternalInfo;
}
export interface GenerateFileUploadUrlResponse {
    /** The URL for uploading a file to the Media Manager. */
    uploadUrl?: string;
}
export interface GenerateFileResumableUploadUrlRequest {
    /** File mime type. */
    mimeType: string | null;
    /**
     * Temporary file name used to identify the file type. For example, a file named "myFile.jpeg" identifies as an "image/jpeg" file type.
     * <br /> **Note:** The name that appears in the Media Manager is taken from the `filename` query parameter in the upload request.
     */
    fileName?: string | null;
    /**
     * File size in bytes.
     * @readonly
     */
    sizeInBytes?: string | null;
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /** Whether the link to the imported file is public or private. See `Private Files` in terminology. */
    private?: boolean | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[] | null;
    /** The upload protocol to use for implementing the resumable upload. */
    uploadProtocol?: UploadProtocol;
}
export declare enum UploadProtocol {
    /** The upload protocol to use for implementing the resumable upload. */
    TUS = "TUS"
}
export interface GenerateFileResumableUploadUrlResponse {
    /**
     * The upload protocol to use for implementing the resumable upload.
     *
     * Supported values: `"TUS"`
     */
    uploadProtocol?: UploadProtocol;
    /** The URL for uploading a file to the Media Manager. */
    uploadUrl?: string;
    /** Single-use upload token. */
    uploadToken?: string;
}
export interface ImportFileRequest {
    /** Publicly accessible external file URL. */
    url: string;
    /**
     * Media type of the file to import.
     *
     * Supported values: `"IMAGE"`, `"VIDEO"`, `"AUDIO"`, `"DOCUMENT"`, `"VECTOR"`, `"ARCHIVE"`, `"MODEL3D"`
     */
    mediaType?: MediaType;
    /** File name that appears in the Media Manager. */
    displayName?: string | null;
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /** Whether the link to the imported file is public or private. */
    private?: boolean | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[] | null;
    /** File mime type. */
    mimeType?: string;
    /** A place to map an external entity to an imported file in the Wix Media Manager. */
    externalInfo?: ExternalInfo;
    /** Optional parameters that should be sent with the external URL. */
    urlParams?: Record<string, any> | null;
    /** Optional headers that should be sent with the external URL. */
    urlHeaders?: Record<string, any> | null;
}
export interface ImportFileResponse {
    /** Information about the imported file. */
    file?: FileDescriptor;
}
export interface BulkImportFilesRequest {
    /** Information about the files to import. */
    importFileRequests: ImportFileRequest[];
}
export interface BulkImportFilesResponse {
    /** Information about the imported files. */
    files?: FileDescriptor[];
}
export interface ListFilesRequest {
    /**
     * ID of the file's parent folder. <br />
     * Default:`media-root`.
     */
    parentFolderId?: string | null;
    /**
     * File media type.
     * excluding: OTHER media type
     */
    mediaTypes?: MediaType[];
    /** Whether the link to the imported file is public or private. */
    private?: boolean | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * * `sizeInBytes`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /**
     * Sort order
     *
     * Supported values: `"ASC"`, `"DESC"`
     */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface CursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface ListFilesResponse {
    /** List of files in the Media Manager. */
    files?: FileDescriptor[];
    /** The next cursor if it exists. */
    nextCursor?: PagingMetadataV2;
}
export interface PagingMetadataV2 {
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
export interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
}
export interface SearchFilesRequest {
    /**
     * Term to search for. Possible terms include the value of a file's
     * `displayName`, `mimeType`, and `label`. <br />
     * For example, if a file's label is cat, the search term is 'cat'.
     */
    search?: string | null;
    /**
     * A root folder in the media manager to search in. <br />
     * Default: `MEDIA_ROOT`.
     */
    rootFolder?: RootFolder;
    /**
     * File media type.
     * excluding: OTHER media type
     */
    mediaTypes?: MediaType[];
    /** Whether the link to the imported file is public or private. */
    private?: boolean | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * * `sizeInBytes`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
export declare enum RootFolder {
    /** Root of all site media */
    MEDIA_ROOT = "MEDIA_ROOT",
    /** Root of the trash system folder */
    TRASH_ROOT = "TRASH_ROOT",
    /** Root of all visitor uploads */
    VISITOR_UPLOADS_ROOT = "VISITOR_UPLOADS_ROOT"
}
export interface SearchFilesResponse {
    /** Files matching the query. */
    files?: FileDescriptor[];
    /** The next cursor if it exists. */
    nextCursor?: PagingMetadataV2;
}
export interface GenerateVideoStreamingUrlRequest {
    /** File ID. */
    fileId: string;
    /** Video stream format. */
    format?: StreamFormat;
}
export declare enum StreamFormat {
    UNKNOWN = "UNKNOWN",
    HLS = "HLS",
    DASH = "DASH"
}
export interface GenerateVideoStreamingUrlResponse {
    /** URL for streaming a specific file in the Media Manager. */
    downloadUrl?: DownloadUrl;
}
export interface GenerateWebSocketTokenRequest {
}
export interface GenerateWebSocketTokenResponse {
    /** The web socket token for the identity in the request */
    token?: string;
}
export interface BulkDeleteFilesRequest {
    /** IDs of the files to move to the Media Manager's trash bin. */
    fileIds: string[];
    /**
     * Whether the specified files are permanently deleted. <br />
     * Default: `false`
     */
    permanent?: boolean;
}
export interface BulkDeleteFilesResponse {
}
export interface BulkRestoreFilesFromTrashBinRequest {
    /** IDs of the files to restore from the Media Manager's trash bin. */
    fileIds: string[];
}
export interface BulkRestoreFilesFromTrashBinResponse {
}
export interface ListDeletedFilesRequest {
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /**
     * File media type.
     * excluding: OTHER media type
     */
    mediaTypes?: MediaType[];
    /** Whether the link to the imported file is public or private. */
    private?: boolean | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * * `sizeInBytes`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
export interface ListDeletedFilesResponse {
    /** List of files in the Media Manager's trash bin. */
    files?: FileDescriptor[];
    /** The next cursor if it exists. */
    nextCursor?: PagingMetadataV2;
}
export interface GenerateFilesDownloadUrlResponseNonNullableFields {
    downloadUrl: string;
}
export interface GenerateFileDownloadUrlResponseNonNullableFields {
    downloadUrls: {
        url: string;
        assetKey: string;
    }[];
}
export interface GetFileDescriptorResponseNonNullableFields {
    file?: {
        _id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            video: string;
            audio?: {
                _id: string;
                assets: string;
            };
            document: string;
            vector?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            archive?: {
                _id: string;
                url: string;
            };
            model3d?: {
                _id: string;
                url: string;
                thumbnail: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
    };
}
export interface GetFileDescriptorsResponseNonNullableFields {
    files: {
        _id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            video: string;
            audio?: {
                _id: string;
                assets: string;
            };
            document: string;
            vector?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            archive?: {
                _id: string;
                url: string;
            };
            model3d?: {
                _id: string;
                url: string;
                thumbnail: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
    }[];
}
export interface UpdateFileDescriptorResponseNonNullableFields {
    file?: {
        _id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            video: string;
            audio?: {
                _id: string;
                assets: string;
            };
            document: string;
            vector?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            archive?: {
                _id: string;
                url: string;
            };
            model3d?: {
                _id: string;
                url: string;
                thumbnail: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
    };
}
export interface GenerateFileUploadUrlResponseNonNullableFields {
    uploadUrl: string;
}
export interface GenerateFileResumableUploadUrlResponseNonNullableFields {
    uploadProtocol: UploadProtocol;
    uploadUrl: string;
    uploadToken: string;
}
export interface ImportFileResponseNonNullableFields {
    file?: {
        _id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            video: string;
            audio?: {
                _id: string;
                assets: string;
            };
            document: string;
            vector?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            archive?: {
                _id: string;
                url: string;
            };
            model3d?: {
                _id: string;
                url: string;
                thumbnail: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
    };
}
export interface BulkImportFilesResponseNonNullableFields {
    files: {
        _id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            video: string;
            audio?: {
                _id: string;
                assets: string;
            };
            document: string;
            vector?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            archive?: {
                _id: string;
                url: string;
            };
            model3d?: {
                _id: string;
                url: string;
                thumbnail: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
    }[];
}
export interface ListFilesResponseNonNullableFields {
    files: {
        _id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            video: string;
            audio?: {
                _id: string;
                assets: string;
            };
            document: string;
            vector?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            archive?: {
                _id: string;
                url: string;
            };
            model3d?: {
                _id: string;
                url: string;
                thumbnail: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
    }[];
}
export interface SearchFilesResponseNonNullableFields {
    files: {
        _id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            video: string;
            audio?: {
                _id: string;
                assets: string;
            };
            document: string;
            vector?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            archive?: {
                _id: string;
                url: string;
            };
            model3d?: {
                _id: string;
                url: string;
                thumbnail: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
    }[];
}
export interface GenerateVideoStreamingUrlResponseNonNullableFields {
    downloadUrl?: {
        url: string;
        assetKey: string;
    };
}
export interface ListDeletedFilesResponseNonNullableFields {
    files: {
        _id: string;
        displayName: string;
        url: string;
        hash: string;
        private: boolean;
        mediaType: MediaType;
        media?: {
            image?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            video: string;
            audio?: {
                _id: string;
                assets: string;
            };
            document: string;
            vector?: {
                image: string;
                colors?: {
                    palette: Color[];
                };
                faces: {
                    confidence: number;
                    x: number;
                    y: number;
                    height: number;
                    width: number;
                }[];
                previewImage: string;
            };
            archive?: {
                _id: string;
                url: string;
            };
            model3d?: {
                _id: string;
                url: string;
                thumbnail: string;
            };
        };
        operationStatus: OperationStatus;
        labels: string[];
        siteId: string;
        state: State;
    }[];
}
/**
 * Generates a URL for downloading a compressed file containing specific files in the Media Manager.
 *
 * The compressed file can contain up to 1000 files.
 * @param fileIds - IDs of the files to download.
 * @public
 * @requiredField fileIds
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
export declare function generateFilesDownloadUrl(fileIds: string[]): Promise<GenerateFilesDownloadUrlResponse & GenerateFilesDownloadUrlResponseNonNullableFields>;
/**
 * Generates one or more temporary URLs for downloading a specific file in the Media Manager.
 *
 * To download different assets of the file, use the `assetKeys` parameter which generates a download URL for each asset.
 * If no `assetKey` is specified, it defaults to `src`, which generates one download URL in the original file's format and quality.
 *
 * Use this endpoint to grant external clients access to a private media file. Use the `expirationInMinutes` parameter to set the URL expiration time, and the `expirationRedirectUrl` parameter to add a redirect url when the URL expires.
 * @param fileId - File ID.
 * @public
 * @requiredField fileId
 * @param options - Options to use when generating a file's download URL.
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
export declare function generateFileDownloadUrl(fileId: string, options?: GenerateFileDownloadUrlOptions): Promise<GenerateFileDownloadUrlResponse & GenerateFileDownloadUrlResponseNonNullableFields>;
export interface GenerateFileDownloadUrlOptions {
    /**
     * Temporary file name used to identify the file type. For example, a file named "myFile.jpeg" identifies as an "image/jpeg" file type. <br />
     *
     * **Note:** The name that appears in the Media Manager is taken from the `filename` query parameter in the upload request.
     */
    downloadFileName?: string | null;
    /**
     * The time that it takes in minutes for the download URL to expire. <br />
     * Default: `600`. <br />
     * Limit: `525600` (1 year).
     */
    expirationInMinutes?: number | null;
    /**
     * The redirect URL for when the temporary download URL with a token expires. <br />
     * Default: A 403 Forbidden response page.
     */
    expirationRedirectUrl?: string | null;
    /**
     * Keys for downloading different assets (format and quality) of a file.
     * Default: `src`, key representing the original file's format and quality.
     */
    assetKeys?: string[] | null;
}
/**
 * Gets information about a specific file in the Media Manager.
 * @param fileId - File ID.
 * @public
 * @requiredField fileId
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 * @returns Information about the file.
 */
export declare function getFileDescriptor(fileId: string): Promise<FileDescriptor & NonNullable<GetFileDescriptorResponseNonNullableFields>['file']>;
/**
 * Gets information about the specified files in the Media Manager.
 * @param fileIds - File IDs.
 * @public
 * @requiredField fileIds
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 */
export declare function getFileDescriptors(fileIds: string[]): Promise<GetFileDescriptorsResponse & GetFileDescriptorsResponseNonNullableFields>;
/**
 * Updates a file. <br />
 *
 * You can use the `parentFolderId` parameter to move a file from its current folder to a different folder.
 * @param _id - File ID. Generated when a file is uploaded to the Media Manager.
 * @public
 * @requiredField _id
 * @requiredField file
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 * @returns Information about the updated file.
 */
export declare function updateFileDescriptor(_id: string, file: UpdateFileDescriptorFile): Promise<FileDescriptor & NonNullable<UpdateFileDescriptorResponseNonNullableFields>['file']>;
export interface UpdateFileDescriptorFile {
    /**
     * File ID. Generated when a file is uploaded to the Media Manager.
     * @readonly
     */
    _id?: string;
    /** File name as it appears in the Media Manager. */
    displayName?: string;
    /**
     * Static URL of the file.
     * @readonly
     */
    url?: string;
    /** ID of the file's parent folder. */
    parentFolderId?: string | null;
    /**
     * File hash.
     * @readonly
     */
    hash?: string;
    /**
     * Size of the uploaded file in bytes.
     * @readonly
     */
    sizeInBytes?: string | null;
    /**
     * Whether the link to the uploaded file is public or private. Private links require a token.
     * @readonly
     */
    private?: boolean;
    /**
     * Media file type.
     *
     * Supported values: `"IMAGE"`, `"VIDEO"`, `"AUDIO"`, `"DOCUMENT"`, `"VECTOR"`, `"ARCHIVE"`, `"MODEL3D"`
     * @readonly
     */
    mediaType?: MediaType;
    /**
     * Media file content.
     * @readonly
     */
    media?: FileMedia;
    /**
     * Status of the file that was uploaded.
     *
     * Supported values: `"FAILED"`, `"READY"`, `"PENDING"`
     * * `FAILED`: The file failed to upload, for example, during media post processing.
     * * `READY`: The file uploaded, finished all processing, and is ready for use.
     * * `PENDING`: The file is processing and the URLs are not yet available. This response is returned when importing a file.
     * @readonly
     */
    operationStatus?: OperationStatus;
    /**
     * URL where the file was uploaded from.
     * @readonly
     */
    sourceUrl?: string | null;
    /**
     * URL of the file's thumbnail.
     * @readonly
     */
    thumbnailUrl?: string | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[];
    /**
     * Date and time the file was created.
     * @readonly
     */
    _createdDate?: Date;
    /**
     * Date and time the file was updated.
     * @readonly
     */
    _updatedDate?: Date;
    /**
     * The Wix site ID where the media file is stored.
     * @readonly
     */
    siteId?: string;
    /**
     * State of the file.
     *
     * Supported values: `"OK"`, `"DELETED"`
     * @readonly
     */
    state?: State;
}
/**
 * Generates an upload URL to allow external clients to upload a file to the Media Manager.
 *
 * To learn how external clients can use the generated upload URL in the response to upload a file to the Media Manager, see the [Upload API](#upload-api).
 *
 * > **Note:** Any interruption in the upload process stops the file upload. For files larger than 10MB, or when network connection is poor, use the [Generate File Resumable Upload Url](#generatefileresumableuploadurl) instead. With the resumable upload URL, any interruption in the upload process pauses the file upload, and resumes the file upload process after the interruption.
 * @param mimeType - File mime type.
 * @public
 * @requiredField mimeType
 * @param options - Options to use when generating a file's upload URL.
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
export declare function generateFileUploadUrl(mimeType: string | null, options?: GenerateFileUploadUrlOptions): Promise<GenerateFileUploadUrlResponse & GenerateFileUploadUrlResponseNonNullableFields>;
export interface GenerateFileUploadUrlOptions {
    /**
     * Temporary file name used to identify the file type. For example, a file named "myFile.jpeg" identifies as an "image/jpeg" file type.
     * <br /> **Note:** The name that appears in the Media Manager is taken from the `filename` query parameter in the upload request.
     */
    fileName?: string | null;
    /**
     * File size in bytes.
     * @readonly
     */
    sizeInBytes?: string | null;
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /** Whether the link to the uploaded file is public or private. See `Private Files` in terminology. */
    private?: boolean | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[] | null;
    /** A place to map an external entity to an uploaded file in the Wix Media Manager. */
    externalInfo?: ExternalInfo;
}
/**
 * Generates a resumable upload URL to allow external clients to easily upload large files over 10MB to the Media Manager.
 *
 * With the resumable upload URL, any interruptions in the upload process pauses the file upload, and resumes the file upload process after the interruption. The resumable upload URL is also helpful when network connection is poor.
 *
 * To learn how external clients can use the generated upload URL in the response to upload large files to the Media Manager, see the [Resumable Upload API](#resumable-upload-api) article.
 * @param mimeType - File mime type.
 * @public
 * @requiredField mimeType
 * @param options - Options to use when generating a resumable upload URL.
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
export declare function generateFileResumableUploadUrl(mimeType: string | null, options?: GenerateFileResumableUploadUrlOptions): Promise<GenerateFileResumableUploadUrlResponse & GenerateFileResumableUploadUrlResponseNonNullableFields>;
export interface GenerateFileResumableUploadUrlOptions {
    /**
     * Temporary file name used to identify the file type. For example, a file named "myFile.jpeg" identifies as an "image/jpeg" file type.
     * <br /> **Note:** The name that appears in the Media Manager is taken from the `filename` query parameter in the upload request.
     */
    fileName?: string | null;
    /**
     * File size in bytes.
     * @readonly
     */
    sizeInBytes?: string | null;
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /** Whether the link to the imported file is public or private. See `Private Files` in terminology. */
    private?: boolean | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[] | null;
    /**
     * The upload protocol to use for implementing the resumable upload.
     *
     * Supported values: `"TUS"`
     */
    uploadProtocol?: UploadProtocol;
}
/**
 * Imports a file to the Media Manager using an external url.
 *
 * This function returns information about the imported file.
 * Use the `parentFolderId` parameter to specify which folder you want the file to be imported to.
 * If no folder is specified, the file is imported to the `media-root` folder.
 *
 * To import a file, you need to provide one of the following:
 * 1. Pass the file's [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) in the `mimeType` parameter of the request. For example, `'image/png'`.
 * 2. Pass the file's name and extension. For example, `'my-image.png'`.
 * 3. If you don't know the file's extension or MIME type, pass its [media type](https://support.wix.com/en/article/wix-media-supported-media-file-types-and-file-sizes) in the `mediaType` parameter of the request. For example, `'IMAGE'`. Note that this option only works if the server hosting the media allows a 'HEAD' request.
 *
 * >**Note:** The `media` property isn't returned in the `files` response object.
 *
 * @param url - Publicly accessible external file URL.
 * @public
 * @requiredField url
 * @param options - Options to use when importing a single file.
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
export declare function importFile(url: string, options?: ImportFileOptions): Promise<ImportFileResponse & ImportFileResponseNonNullableFields>;
export interface ImportFileOptions {
    /**
     * Media type of the file to import.
     *
     * Supported values: `"IMAGE"`, `"VIDEO"`, `"AUDIO"`, `"DOCUMENT"`, `"VECTOR"`, `"ARCHIVE"`, `"MODEL3D"`
     */
    mediaType?: MediaType;
    /** File name that appears in the Media Manager. */
    displayName?: string | null;
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /** Whether the link to the imported file is public or private. */
    private?: boolean | null;
    /** Labels assigned to media files that describe and categorize them. Provided by the user, or generated by [Google Vision API](https://cloud.google.com/vision/docs/drag-and-drop) for images. */
    labels?: string[] | null;
    /** File mime type. */
    mimeType?: string;
    /** A place to map an external entity to an imported file in the Wix Media Manager. */
    externalInfo?: ExternalInfo;
    /** Optional parameters that should be sent with the external URL. */
    urlParams?: Record<string, any> | null;
    /** Optional headers that should be sent with the external URL. */
    urlHeaders?: Record<string, any> | null;
}
/**
 * Imports a bulk of files to the Media Manager using external urls.
 *
 * Returns information about the imported files. Use the `parentFolderId` parameter to specify in which folder you want each file to be imported to.
 * If no folder is specified, the file is imported to the `media-root` folder.
 *
 * To import files, you need to provide one of the following:
 * 1. Pass each file's [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) in the `mimeType` parameter of the request. For example, `'image/png'`.
 * 2. Pass each file's name and extension. For example, `'my-image.png'`.
 * 3. If you don't know a file's extension or MIME type, pass its [media type](https://support.wix.com/en/article/wix-media-supported-media-file-types-and-file-sizes) in the `mediaType` parameter of the request. For example, `'IMAGE'`. Note that this option only works if the server hosting the media allows a 'HEAD' request.
 *
 * >**Note:** The `media` property isn't returned in the `files` response object.
 * @param importFileRequests - Information about the files to import.
 * @public
 * @requiredField importFileRequests
 * @requiredField importFileRequests.url
 * @param options - Options to use when uploading multiple files.
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
export declare function bulkImportFiles(importFileRequests: ImportFileRequest[]): Promise<BulkImportFilesResponse & BulkImportFilesResponseNonNullableFields>;
/**
 * Retrieves a list of files in the Media Manager.
 *
 * To retrieve a list of files within a specific folder in the Media Manager, pass the folder's ID in the `parentFolderId` parameter. If no folder is specified, the endpoint retrieves the list of files in the root folder of the Media Manager.
 * @public
 * @param options - Options to use when listing media files.
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 */
export declare function listFiles(options?: ListFilesOptions): Promise<ListFilesResponse & ListFilesResponseNonNullableFields>;
export interface ListFilesOptions {
    /**
     * ID of the file's parent folder. <br />
     * Default:`media-root`.
     */
    parentFolderId?: string | null;
    /**
     * Media file type.
     *
     * Supported values: `"IMAGE"`, `"VIDEO"`, `"AUDIO"`, `"DOCUMENT"`, `"VECTOR"`, `"ARCHIVE"`, `"MODEL3D"`
     */
    mediaTypes?: MediaType[];
    /** Whether the link to the imported file is public or private. */
    private?: boolean | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * * `sizeInBytes`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
/**
 * Searches all folders in the Media Manager and returns a list of files that match the terms specified in the optional parameters.
 *
 * If no parameters are specified, the endpoint returns all files in the `MEDIA_ROOT` folder.
 * @public
 * @param options - Options to specify which folders to search.
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 */
export declare function searchFiles(options?: SearchFilesOptions): Promise<SearchFilesResponse & SearchFilesResponseNonNullableFields>;
export interface SearchFilesOptions {
    /**
     * Term to search for. Possible terms include the value of a file's
     * `displayName`, `mimeType`, and `label`. <br />
     * For example, if a file's label is cat, the search term is 'cat'.
     */
    search?: string | null;
    /**
     * A root folder in the media manager to search in. <br />
     *
     * Supported values: `"MEDIA_ROOT"`, `"TRASH_ROOT"`, `"VISITOR_UPLOADS_ROOT"`
     *
     * Default: `MEDIA_ROOT`.
     */
    rootFolder?: RootFolder;
    /**
     * Media file type.
     *
     * Supported values: `"IMAGE"`, `"VIDEO"`, `"AUDIO"`, `"DOCUMENT"`, `"VECTOR"`, `"ARCHIVE"`, `"MODEL3D"`
     */
    mediaTypes?: MediaType[];
    /** Whether the link to the imported file is public or private. */
    private?: boolean | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * * `sizeInBytes`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
/**
 * Generates a URL for streaming a specific video file in the Media Manager.
 * @param fileId - File ID.
 * @public
 * @requiredField fileId
 * @param options - Options to use when generating a video file's streaming URL.
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 */
export declare function generateVideoStreamingUrl(fileId: string, options?: GenerateVideoStreamingUrlOptions): Promise<GenerateVideoStreamingUrlResponse & GenerateVideoStreamingUrlResponseNonNullableFields>;
export interface GenerateVideoStreamingUrlOptions {
    /**
     * Video stream format.
     *
     * Supported values: `"UNKNOWN"`, `"HLS"`, `"DASH"`
     *
     *
     */
    format?: StreamFormat;
}
/**
 * Deletes the specified files from the Media Manager.
 *
 *
 * The deleted files are moved to the Media Manager's trash bin (`TRASH-ROOT` folder) unless permanently deleted. To permanently delete files, pass the `permanent` parameter with the value `true`. Permanently deleting files isn't reversible, so make sure that these files aren't being used in a site or in any other way as the files will no longer be accessible.
 *
 * >**Notes:**
 * > - The specified files can be from different folders.
 * > - Moving multiple files at once is an asynchronous action, and may take time for the changes to appear in the Media Manager.
 * > - Attempting to delete files that are already in the trash bin doesn't result in an error.
 * > - If your site contains deleted media files, the deleted media files still appear on your site as the files are still in the Media Manager (in the trash bin).
 * > - You can use the [Bulk Restore Files From Trash Bin](#bulkrestorefilesfromtrashbin) endpoint to restore files from the Media Manager's trash bin.
 * @param fileIds - IDs of the files to move to the Media Manager's trash bin.
 * @public
 * @requiredField fileIds
 * @param options - Options to use when deleting files.
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
export declare function bulkDeleteFiles(fileIds: string[], options?: BulkDeleteFilesOptions): Promise<void>;
export interface BulkDeleteFilesOptions {
    /**
     * Whether the specified files are permanently deleted. <br />
     * Default: `false`
     */
    permanent?: boolean;
}
/**
 * Restores the specified files from the Media Manager's trash bin, and moves them to their original locations in the Media Manager.
 * @param fileIds - IDs of the files to restore from the Media Manager's trash bin.
 * @public
 * @requiredField fileIds
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
export declare function bulkRestoreFilesFromTrashBin(fileIds: string[]): Promise<void>;
/**
 * Retrieves a list of files in the Media Manager's trash bin.
 *
 * >**Note:** The Media Manager's trash bin (`TRASH-ROOT` folder) only contains temporarily deleted files, not permanently deleted files.
 * @public
 * @param options - Options to use when listing deleted files from the trash bin.
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 */
export declare function listDeletedFiles(options?: ListDeletedFilesOptions): Promise<ListDeletedFilesResponse & ListDeletedFilesResponseNonNullableFields>;
export interface ListDeletedFilesOptions {
    /**
     * ID of the file's parent folder. <br />
     * Default: `media-root`.
     */
    parentFolderId?: string | null;
    /**
     * Media file type.
     *
     * Supported values: `"IMAGE"`, `"VIDEO"`, `"AUDIO"`, `"DOCUMENT"`, `"VECTOR"`, `"ARCHIVE"`, `"MODEL3D"`
     */
    mediaTypes?: MediaType[];
    /** Whether the link to the imported file is public or private. */
    private?: boolean | null;
    /**
     * Field name and order to sort by. One of: <br />
     * * `displayName`
     * * `updatedDate`
     * * `sizeInBytes`
     * Default: `updatedDate` in `desc` order.
     */
    sort?: Sorting;
    /** Cursor and paging information. */
    paging?: CursorPaging;
}
