"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listDeletedFolders = exports.bulkRestoreFoldersFromTrashBin = exports.bulkDeleteFolders = exports.generateFolderDownloadUrl = exports.updateFolder = exports.searchFolders = exports.listFolders = exports.getFolder = exports.createFolder = exports.RootFolder = exports.SortOrder = exports.State = exports.__debug = void 0;
const velo_1 = require("@wix/metro-runtime/velo");
const ambassadorWixMediaSiteMediaV1Folder = __importStar(require("./media-site-media-v1-folder.http"));
let __verbose = false;
function __log(...args) {
    __verbose && console.log(...args);
}
function __inspect(obj) {
    return obj;
}
exports.__debug = {
    verboseLogging: {
        on: () => (__verbose = true),
        off: () => (__verbose = false),
    },
};
const _toVeloEntity = '$';
const _fromVeloEntity = '$';
var State;
(function (State) {
    State["OK"] = "OK";
    State["DELETED"] = "DELETED";
})(State = exports.State || (exports.State = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder = exports.SortOrder || (exports.SortOrder = {}));
var RootFolder;
(function (RootFolder) {
    /** Root of all site media */
    RootFolder["MEDIA_ROOT"] = "MEDIA_ROOT";
    /** Root of the trash system folder */
    RootFolder["TRASH_ROOT"] = "TRASH_ROOT";
    /** Root of all visitor uploads */
    RootFolder["VISITOR_UPLOADS_ROOT"] = "VISITOR_UPLOADS_ROOT";
})(RootFolder = exports.RootFolder || (exports.RootFolder = {}));
const _bulkDeleteFoldersRequest = {};
const _bulkDeleteFoldersResponse = {};
const _bulkRestoreFoldersFromTrashBinRequest = {};
const _bulkRestoreFoldersFromTrashBinResponse = {};
const _createFolderRequest = {};
const _createFolderResponse = {};
const _generateFolderDownloadUrlRequest = {};
const _generateFolderDownloadUrlResponse = {};
const _getFolderRequest = {};
const _getFolderResponse = {};
const _listDeletedFoldersRequest = {};
const _listDeletedFoldersResponse = {};
const _listFoldersRequest = {};
const _listFoldersResponse = {};
const _searchFoldersRequest = {};
const _searchFoldersResponse = {};
const _updateFolderRequest = {};
const _updateFolderResponse = {};
/**
 * Creates a new folder in the Media Manager.
 *
 * Use the `parentFolderId` parameter to specify in which existing folder you want the new folder to be created.
 * If no folder is specified, the new folder is created in the `media-root` folder.
 * @param displayName - Folder name that appears in the Media Manager.
 * @public
 * @requiredField displayName
 * @param options - Options for specifying where to create a folder.
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
function createFolder(displayName, options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            displayName: '$[0]',
            parentFolderId: '$[1].parentFolderId',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[2];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _createFolderRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _createFolderResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['folder']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([displayName, options]);
        const reqOpts = ambassadorWixMediaSiteMediaV1Folder.createFolder(payload);
        __log(`"CreateFolder" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'displayName',
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.createFolder = createFolder;
/**
 * Gets information from a specific folder in the Media Manager.
 * @param folderId - Folder ID.
 * @public
 * @requiredField folderId
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 * @returns Information about the folder.
 */
function getFolder(folderId) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { folderId: '$[0]' };
        const responseTransformation = '$.folder';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _getFolderRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _getFolderResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['folder']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([folderId]);
        const reqOpts = ambassadorWixMediaSiteMediaV1Folder.getFolder(payload);
        __log(`"GetFolder" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'folderId',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.getFolder = getFolder;
/**
 * Retrieves a list of folders in the Media Manager.
 *
 * To retrieve a list of folders within a specific folder in the Media Manager, pass the specific folder's ID in the `parentFolderId` parameter. If no folder is specified, the endpoint retrieves a list of folders within the root folder of the Media Manager.
 * @public
 * @param options - Options to use when listing folders from the Media Manager.
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 */
function listFolders(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            parentFolderId: '$[0].parentFolderId',
            sort: '$[0].sort',
            paging: '$[0].paging',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _listFoldersRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _listFoldersResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#folders']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixMediaSiteMediaV1Folder.listFolders(payload);
        __log(`"ListFolders" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.listFolders = listFolders;
/**
 * Searches the Media Manager and returns a list of folders that match the terms specified in the parameters.
 *
 * If no parameters are specified, the endpoint returns all folders in the `MEDIA_ROOT` folder.
 * @public
 * @param options - Options specifying which folders to search.
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 */
function searchFolders(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            rootFolder: '$[0].rootFolder',
            sort: '$[0].sort',
            paging: '$[0].paging',
            search: '$[0].search',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _searchFoldersRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _searchFoldersResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#folders']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixMediaSiteMediaV1Folder.searchFolders(payload);
        __log(`"SearchFolders" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.searchFolders = searchFolders;
/**
 * Updates a folder.
 *
 * You can use the `parentFolderId` parameter to move a folder from its current parent folder to a different parent folder.
 * @param _id - Folder ID. Generated when a folder is created in the Media Manager.
 * @public
 * @requiredField _id
 * @requiredField folder
 * @param options - @internal
 * @param folder - Folder to update.
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 * @returns Information about the updated folder.
 */
function updateFolder(_id, folder) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { folder: { '*': '$[1]', id: '$[0]' } };
        const responseTransformation = '$.folder';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[2];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _updateFolderRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['folder']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _updateFolderResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['folder']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([_id, folder]);
        const reqOpts = ambassadorWixMediaSiteMediaV1Folder.updateFolder(payload);
        __log(`"UpdateFolder" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                '_id',
                'folder',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.updateFolder = updateFolder;
/**
 * Generates a URL for downloading a compressed file containing a specific folder in the Media Manager.
 *
 * The compressed file can contain sub-folders, and up to 1000 files.
 * @param folderId - Folder ID.
 * @public
 * @requiredField folderId
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
function generateFolderDownloadUrl(folderId) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { folderId: '$[0]' };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _generateFolderDownloadUrlRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _generateFolderDownloadUrlResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([folderId]);
        const reqOpts = ambassadorWixMediaSiteMediaV1Folder.generateFolderDownloadUrl(payload);
        __log(`"GenerateFolderDownloadUrl" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'folderId',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.generateFolderDownloadUrl = generateFolderDownloadUrl;
/**
 * Temporarily deletes the specified folders from the Media Manager.
 *
 * The deleted folders are moved to the Media Manager's `trash-root` folder (trash bin) unless permanently deleted. To permanently delete folders, pass the `permanent` parameter with the value `true`. Permanently deleting folders isn't reversible, so make sure that the files in these folders aren't being used in a site or in any other way as the files will no longer be accessible.
 *
 * >**Notes:**
 * > - When a folder is deleted, the files in that folder are deleted.
 * > - The specified folders can be from different parent folders.
 * > - Moving multiple folders at once is an asynchronous action, and may take time for the changes to appear in the Media Manager.
 * > - Attempting to delete folders that are already in the trash bin doesn't result in an error.
 * > - If your site contains files from a deleted media folder, the files still appear on your site as the deleted folder is still in the Media Manager (in the trash bin).
 * > - You can use the [Bulk Restore Folders From Trash Bin](#bulkrestorefoldersfromtrashbin) endpoint to restore folders from the Media Manager's trash bin.
 * @param folderIds - IDs of the folders to move to the Media Manager's trash bin.
 * @public
 * @requiredField folderIds
 * @param options - Options to use when deleting folders.
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
function bulkDeleteFolders(folderIds, options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            folderIds: '$[0]',
            permanent: '$[1].permanent',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[2];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _bulkDeleteFoldersRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _bulkDeleteFoldersResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([folderIds, options]);
        const reqOpts = ambassadorWixMediaSiteMediaV1Folder.bulkDeleteFolders(payload);
        __log(`"BulkDeleteFolders" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'folderIds',
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.bulkDeleteFolders = bulkDeleteFolders;
/**
 * Restores the specified folders from the Media Manager's trash bin, and moves them to their original locations in the Media Manager.
 * @param folderIds - IDs of the folders to restore from the Media Manager's trash bin.
 * @public
 * @requiredField folderIds
 * @permissionScope Manage Media Manager
 * @applicableIdentity APP
 */
function bulkRestoreFoldersFromTrashBin(folderIds) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { folderIds: '$[0]' };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _bulkRestoreFoldersFromTrashBinRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _bulkRestoreFoldersFromTrashBinResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([folderIds]);
        const reqOpts = ambassadorWixMediaSiteMediaV1Folder.bulkRestoreFoldersFromTrashBin(payload);
        __log(`"BulkRestoreFoldersFromTrashBin" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'folderIds',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.bulkRestoreFoldersFromTrashBin = bulkRestoreFoldersFromTrashBin;
/**
 * Retrieves a list of deleted folders from the trash bin.
 * @public
 * @param options - Options to use when listing deleted folders from the trash bin.
 * @permissionScope Read Media Manager
 * @applicableIdentity APP
 */
function listDeletedFolders(options) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {
            parentFolderId: '$[0].parentFolderId',
            sort: '$[0].sort',
            paging: '$[0].paging',
        };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = (0, velo_1.serializer)({
            rootSchema: _listDeletedFoldersRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = (0, velo_1.serializer)({
            rootSchema: _listDeletedFoldersResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#folders']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([options]);
        const reqOpts = ambassadorWixMediaSiteMediaV1Folder.listDeletedFolders(payload);
        __log(`"ListDeletedFolders" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = (0, velo_1.transformError)(err, requestTransformation, [
                'options',
            ]);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
exports.listDeletedFolders = listDeletedFolders;
//# sourceMappingURL=media-site-media-v1-folder.universal.js.map